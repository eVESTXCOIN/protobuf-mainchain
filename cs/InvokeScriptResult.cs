// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: vrp/invoke_script_result.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace VRP {

  /// <summary>Holder for reflection information generated from vrp/invoke_script_result.proto</summary>
  public static partial class InvokeScriptResultReflection {

    #region Descriptor
    /// <summary>File descriptor for vrp/invoke_script_result.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static InvokeScriptResultReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch52cnAvaW52b2tlX3NjcmlwdF9yZXN1bHQucHJvdG8SA3ZycBoVdnJwL3Ry",
            "YW5zYWN0aW9uLnByb3RvGhB2cnAvYW1vdW50LnByb3RvGhN2cnAvcmVjaXBp",
            "ZW50LnByb3RvIsYNChJJbnZva2VTY3JpcHRSZXN1bHQSMAoEZGF0YRgBIAMo",
            "CzIiLnZycC5EYXRhVHJhbnNhY3Rpb25EYXRhLkRhdGFFbnRyeRIyCgl0cmFu",
            "c2ZlcnMYAiADKAsyHy52cnAuSW52b2tlU2NyaXB0UmVzdWx0LlBheW1lbnQS",
            "LQoGaXNzdWVzGAMgAygLMh0udnJwLkludm9rZVNjcmlwdFJlc3VsdC5Jc3N1",
            "ZRIxCghyZWlzc3VlcxgEIAMoCzIfLnZycC5JbnZva2VTY3JpcHRSZXN1bHQu",
            "UmVpc3N1ZRIrCgVidXJucxgFIAMoCzIcLnZycC5JbnZva2VTY3JpcHRSZXN1",
            "bHQuQnVybhI7Cg1lcnJvcl9tZXNzYWdlGAYgASgLMiQudnJwLkludm9rZVNj",
            "cmlwdFJlc3VsdC5FcnJvck1lc3NhZ2USOAoMc3BvbnNvcl9mZWVzGAcgAygL",
            "MiIudnJwLkludm9rZVNjcmlwdFJlc3VsdC5TcG9uc29yRmVlEi0KBmxlYXNl",
            "cxgIIAMoCzIdLnZycC5JbnZva2VTY3JpcHRSZXN1bHQuTGVhc2USOgoNbGVh",
            "c2VfY2FuY2VscxgJIAMoCzIjLnZycC5JbnZva2VTY3JpcHRSZXN1bHQuTGVh",
            "c2VDYW5jZWwSMwoHaW52b2tlcxgKIAMoCzIiLnZycC5JbnZva2VTY3JpcHRS",
            "ZXN1bHQuSW52b2NhdGlvbhI/Cg9wcml2YXRlX3BheW1lbnQYCyADKAsyJi52",
            "cnAuSW52b2tlU2NyaXB0UmVzdWx0LlByaXZhdGVQYXltZW50GjcKB1BheW1l",
            "bnQSDwoHYWRkcmVzcxgBIAEoDBIbCgZhbW91bnQYAiABKAsyCy52cnAuQW1v",
            "dW50Gj4KDlByaXZhdGVQYXltZW50Eg8KB2FkZHJlc3MYASABKAwSGwoGYW1v",
            "dW50GAIgASgLMgsudnJwLkFtb3VudBqgAQoFSXNzdWUSEAoIYXNzZXRfaWQY",
            "ASABKAwSDAoEbmFtZRgCIAEoCRITCgtkZXNjcmlwdGlvbhgDIAEoCRINCgVp",
            "bWFnZRgEIAEoCRIOCgZhbW91bnQYBSABKAMSEAoIZGVjaW1hbHMYBiABKAUS",
            "EgoKcmVpc3N1YWJsZRgHIAEoCBIOCgZzY3JpcHQYCCABKAwSDQoFbm9uY2UY",
            "CSABKAMaQgoHUmVpc3N1ZRIQCghhc3NldF9pZBgBIAEoDBIOCgZhbW91bnQY",
            "AiABKAMSFQoNaXNfcmVpc3N1YWJsZRgDIAEoCBooCgRCdXJuEhAKCGFzc2V0",
            "X2lkGAEgASgMEg4KBmFtb3VudBgCIAEoAxoqCgpTcG9uc29yRmVlEhwKB21p",
            "bl9mZWUYASABKAsyCy52cnAuQW1vdW50GlsKBUxlYXNlEiEKCXJlY2lwaWVu",
            "dBgBIAEoCzIOLnZycC5SZWNpcGllbnQSDgoGYW1vdW50GAIgASgDEg0KBW5v",
            "bmNlGAMgASgDEhAKCGxlYXNlX2lkGAQgASgMGh8KC0xlYXNlQ2FuY2VsEhAK",
            "CGxlYXNlX2lkGAEgASgMGioKDEVycm9yTWVzc2FnZRIMCgRjb2RlGAEgASgF",
            "EgwKBHRleHQYAiABKAka6wIKBENhbGwSEAoIZnVuY3Rpb24YASABKAkSFgoK",
            "YXJnc19ieXRlcxgCIAMoDEICGAESMwoEYXJncxgDIAMoCzIlLnZycC5JbnZv",
            "a2VTY3JpcHRSZXN1bHQuQ2FsbC5Bcmd1bWVudBqDAgoIQXJndW1lbnQSFwoN",
            "aW50ZWdlcl92YWx1ZRgBIAEoA0gAEhYKDGJpbmFyeV92YWx1ZRgCIAEoDEgA",
            "EhYKDHN0cmluZ192YWx1ZRgDIAEoCUgAEhcKDWJvb2xlYW5fdmFsdWUYBCAB",
            "KAhIABISCghjYXNlX29iahgFIAEoDEgAEjoKBGxpc3QYCiABKAsyKi52cnAu",
            "SW52b2tlU2NyaXB0UmVzdWx0LkNhbGwuQXJndW1lbnQuTGlzdEgAGjwKBExp",
            "c3QSNAoFaXRlbXMYASADKAsyJS52cnAuSW52b2tlU2NyaXB0UmVzdWx0LkNh",
            "bGwuQXJndW1lbnRCBwoFdmFsdWUalAEKCkludm9jYXRpb24SDAoEZEFwcBgB",
            "IAEoDBIqCgRjYWxsGAIgASgLMhwudnJwLkludm9rZVNjcmlwdFJlc3VsdC5D",
            "YWxsEh0KCHBheW1lbnRzGAMgAygLMgsudnJwLkFtb3VudBItCgxzdGF0ZUNo",
            "YW5nZXMYBCABKAsyFy52cnAuSW52b2tlU2NyaXB0UmVzdWx0QlgKHGNvbS52",
            "cnAucHJvdG9idWYudHJhbnNhY3Rpb25aMmdpdGh1Yi5jb20vZVZFU1RYQ09J",
            "Ti9nb3ZycC9wa2cvZ3JwYy9nZW5lcmF0ZWQvdnJwqgIDVlJQYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::VRP.TransactionReflection.Descriptor, global::VRP.AmountReflection.Descriptor, global::VRP.RecipientReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::VRP.InvokeScriptResult), global::VRP.InvokeScriptResult.Parser, new[]{ "Data", "Transfers", "Issues", "Reissues", "Burns", "ErrorMessage", "SponsorFees", "Leases", "LeaseCancels", "Invokes", "PrivatePayment" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::VRP.InvokeScriptResult.Types.Payment), global::VRP.InvokeScriptResult.Types.Payment.Parser, new[]{ "Address", "Amount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VRP.InvokeScriptResult.Types.PrivatePayment), global::VRP.InvokeScriptResult.Types.PrivatePayment.Parser, new[]{ "Address", "Amount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VRP.InvokeScriptResult.Types.Issue), global::VRP.InvokeScriptResult.Types.Issue.Parser, new[]{ "AssetId", "Name", "Description", "Image", "Amount", "Decimals", "Reissuable", "Script", "Nonce" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VRP.InvokeScriptResult.Types.Reissue), global::VRP.InvokeScriptResult.Types.Reissue.Parser, new[]{ "AssetId", "Amount", "IsReissuable" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VRP.InvokeScriptResult.Types.Burn), global::VRP.InvokeScriptResult.Types.Burn.Parser, new[]{ "AssetId", "Amount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VRP.InvokeScriptResult.Types.SponsorFee), global::VRP.InvokeScriptResult.Types.SponsorFee.Parser, new[]{ "MinFee" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VRP.InvokeScriptResult.Types.Lease), global::VRP.InvokeScriptResult.Types.Lease.Parser, new[]{ "Recipient", "Amount", "Nonce", "LeaseId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VRP.InvokeScriptResult.Types.LeaseCancel), global::VRP.InvokeScriptResult.Types.LeaseCancel.Parser, new[]{ "LeaseId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VRP.InvokeScriptResult.Types.ErrorMessage), global::VRP.InvokeScriptResult.Types.ErrorMessage.Parser, new[]{ "Code", "Text" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VRP.InvokeScriptResult.Types.Call), global::VRP.InvokeScriptResult.Types.Call.Parser, new[]{ "Function", "ArgsBytes", "Args" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::VRP.InvokeScriptResult.Types.Call.Types.Argument), global::VRP.InvokeScriptResult.Types.Call.Types.Argument.Parser, new[]{ "IntegerValue", "BinaryValue", "StringValue", "BooleanValue", "CaseObj", "List" }, new[]{ "Value" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::VRP.InvokeScriptResult.Types.Call.Types.Argument.Types.List), global::VRP.InvokeScriptResult.Types.Call.Types.Argument.Types.List.Parser, new[]{ "Items" }, null, null, null, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::VRP.InvokeScriptResult.Types.Invocation), global::VRP.InvokeScriptResult.Types.Invocation.Parser, new[]{ "DApp", "Call", "Payments", "StateChanges" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class InvokeScriptResult : pb::IMessage<InvokeScriptResult> {
    private static readonly pb::MessageParser<InvokeScriptResult> _parser = new pb::MessageParser<InvokeScriptResult>(() => new InvokeScriptResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InvokeScriptResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VRP.InvokeScriptResultReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvokeScriptResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvokeScriptResult(InvokeScriptResult other) : this() {
      data_ = other.data_.Clone();
      transfers_ = other.transfers_.Clone();
      issues_ = other.issues_.Clone();
      reissues_ = other.reissues_.Clone();
      burns_ = other.burns_.Clone();
      errorMessage_ = other.errorMessage_ != null ? other.errorMessage_.Clone() : null;
      sponsorFees_ = other.sponsorFees_.Clone();
      leases_ = other.leases_.Clone();
      leaseCancels_ = other.leaseCancels_.Clone();
      invokes_ = other.invokes_.Clone();
      privatePayment_ = other.privatePayment_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvokeScriptResult Clone() {
      return new InvokeScriptResult(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::VRP.DataTransactionData.Types.DataEntry> _repeated_data_codec
        = pb::FieldCodec.ForMessage(10, global::VRP.DataTransactionData.Types.DataEntry.Parser);
    private readonly pbc::RepeatedField<global::VRP.DataTransactionData.Types.DataEntry> data_ = new pbc::RepeatedField<global::VRP.DataTransactionData.Types.DataEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VRP.DataTransactionData.Types.DataEntry> Data {
      get { return data_; }
    }

    /// <summary>Field number for the "transfers" field.</summary>
    public const int TransfersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::VRP.InvokeScriptResult.Types.Payment> _repeated_transfers_codec
        = pb::FieldCodec.ForMessage(18, global::VRP.InvokeScriptResult.Types.Payment.Parser);
    private readonly pbc::RepeatedField<global::VRP.InvokeScriptResult.Types.Payment> transfers_ = new pbc::RepeatedField<global::VRP.InvokeScriptResult.Types.Payment>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VRP.InvokeScriptResult.Types.Payment> Transfers {
      get { return transfers_; }
    }

    /// <summary>Field number for the "issues" field.</summary>
    public const int IssuesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::VRP.InvokeScriptResult.Types.Issue> _repeated_issues_codec
        = pb::FieldCodec.ForMessage(26, global::VRP.InvokeScriptResult.Types.Issue.Parser);
    private readonly pbc::RepeatedField<global::VRP.InvokeScriptResult.Types.Issue> issues_ = new pbc::RepeatedField<global::VRP.InvokeScriptResult.Types.Issue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VRP.InvokeScriptResult.Types.Issue> Issues {
      get { return issues_; }
    }

    /// <summary>Field number for the "reissues" field.</summary>
    public const int ReissuesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::VRP.InvokeScriptResult.Types.Reissue> _repeated_reissues_codec
        = pb::FieldCodec.ForMessage(34, global::VRP.InvokeScriptResult.Types.Reissue.Parser);
    private readonly pbc::RepeatedField<global::VRP.InvokeScriptResult.Types.Reissue> reissues_ = new pbc::RepeatedField<global::VRP.InvokeScriptResult.Types.Reissue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VRP.InvokeScriptResult.Types.Reissue> Reissues {
      get { return reissues_; }
    }

    /// <summary>Field number for the "burns" field.</summary>
    public const int BurnsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::VRP.InvokeScriptResult.Types.Burn> _repeated_burns_codec
        = pb::FieldCodec.ForMessage(42, global::VRP.InvokeScriptResult.Types.Burn.Parser);
    private readonly pbc::RepeatedField<global::VRP.InvokeScriptResult.Types.Burn> burns_ = new pbc::RepeatedField<global::VRP.InvokeScriptResult.Types.Burn>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VRP.InvokeScriptResult.Types.Burn> Burns {
      get { return burns_; }
    }

    /// <summary>Field number for the "error_message" field.</summary>
    public const int ErrorMessageFieldNumber = 6;
    private global::VRP.InvokeScriptResult.Types.ErrorMessage errorMessage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VRP.InvokeScriptResult.Types.ErrorMessage ErrorMessage {
      get { return errorMessage_; }
      set {
        errorMessage_ = value;
      }
    }

    /// <summary>Field number for the "sponsor_fees" field.</summary>
    public const int SponsorFeesFieldNumber = 7;
    private static readonly pb::FieldCodec<global::VRP.InvokeScriptResult.Types.SponsorFee> _repeated_sponsorFees_codec
        = pb::FieldCodec.ForMessage(58, global::VRP.InvokeScriptResult.Types.SponsorFee.Parser);
    private readonly pbc::RepeatedField<global::VRP.InvokeScriptResult.Types.SponsorFee> sponsorFees_ = new pbc::RepeatedField<global::VRP.InvokeScriptResult.Types.SponsorFee>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VRP.InvokeScriptResult.Types.SponsorFee> SponsorFees {
      get { return sponsorFees_; }
    }

    /// <summary>Field number for the "leases" field.</summary>
    public const int LeasesFieldNumber = 8;
    private static readonly pb::FieldCodec<global::VRP.InvokeScriptResult.Types.Lease> _repeated_leases_codec
        = pb::FieldCodec.ForMessage(66, global::VRP.InvokeScriptResult.Types.Lease.Parser);
    private readonly pbc::RepeatedField<global::VRP.InvokeScriptResult.Types.Lease> leases_ = new pbc::RepeatedField<global::VRP.InvokeScriptResult.Types.Lease>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VRP.InvokeScriptResult.Types.Lease> Leases {
      get { return leases_; }
    }

    /// <summary>Field number for the "lease_cancels" field.</summary>
    public const int LeaseCancelsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::VRP.InvokeScriptResult.Types.LeaseCancel> _repeated_leaseCancels_codec
        = pb::FieldCodec.ForMessage(74, global::VRP.InvokeScriptResult.Types.LeaseCancel.Parser);
    private readonly pbc::RepeatedField<global::VRP.InvokeScriptResult.Types.LeaseCancel> leaseCancels_ = new pbc::RepeatedField<global::VRP.InvokeScriptResult.Types.LeaseCancel>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VRP.InvokeScriptResult.Types.LeaseCancel> LeaseCancels {
      get { return leaseCancels_; }
    }

    /// <summary>Field number for the "invokes" field.</summary>
    public const int InvokesFieldNumber = 10;
    private static readonly pb::FieldCodec<global::VRP.InvokeScriptResult.Types.Invocation> _repeated_invokes_codec
        = pb::FieldCodec.ForMessage(82, global::VRP.InvokeScriptResult.Types.Invocation.Parser);
    private readonly pbc::RepeatedField<global::VRP.InvokeScriptResult.Types.Invocation> invokes_ = new pbc::RepeatedField<global::VRP.InvokeScriptResult.Types.Invocation>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VRP.InvokeScriptResult.Types.Invocation> Invokes {
      get { return invokes_; }
    }

    /// <summary>Field number for the "private_payment" field.</summary>
    public const int PrivatePaymentFieldNumber = 11;
    private static readonly pb::FieldCodec<global::VRP.InvokeScriptResult.Types.PrivatePayment> _repeated_privatePayment_codec
        = pb::FieldCodec.ForMessage(90, global::VRP.InvokeScriptResult.Types.PrivatePayment.Parser);
    private readonly pbc::RepeatedField<global::VRP.InvokeScriptResult.Types.PrivatePayment> privatePayment_ = new pbc::RepeatedField<global::VRP.InvokeScriptResult.Types.PrivatePayment>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VRP.InvokeScriptResult.Types.PrivatePayment> PrivatePayment {
      get { return privatePayment_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InvokeScriptResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InvokeScriptResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!data_.Equals(other.data_)) return false;
      if(!transfers_.Equals(other.transfers_)) return false;
      if(!issues_.Equals(other.issues_)) return false;
      if(!reissues_.Equals(other.reissues_)) return false;
      if(!burns_.Equals(other.burns_)) return false;
      if (!object.Equals(ErrorMessage, other.ErrorMessage)) return false;
      if(!sponsorFees_.Equals(other.sponsorFees_)) return false;
      if(!leases_.Equals(other.leases_)) return false;
      if(!leaseCancels_.Equals(other.leaseCancels_)) return false;
      if(!invokes_.Equals(other.invokes_)) return false;
      if(!privatePayment_.Equals(other.privatePayment_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= data_.GetHashCode();
      hash ^= transfers_.GetHashCode();
      hash ^= issues_.GetHashCode();
      hash ^= reissues_.GetHashCode();
      hash ^= burns_.GetHashCode();
      if (errorMessage_ != null) hash ^= ErrorMessage.GetHashCode();
      hash ^= sponsorFees_.GetHashCode();
      hash ^= leases_.GetHashCode();
      hash ^= leaseCancels_.GetHashCode();
      hash ^= invokes_.GetHashCode();
      hash ^= privatePayment_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      data_.WriteTo(output, _repeated_data_codec);
      transfers_.WriteTo(output, _repeated_transfers_codec);
      issues_.WriteTo(output, _repeated_issues_codec);
      reissues_.WriteTo(output, _repeated_reissues_codec);
      burns_.WriteTo(output, _repeated_burns_codec);
      if (errorMessage_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ErrorMessage);
      }
      sponsorFees_.WriteTo(output, _repeated_sponsorFees_codec);
      leases_.WriteTo(output, _repeated_leases_codec);
      leaseCancels_.WriteTo(output, _repeated_leaseCancels_codec);
      invokes_.WriteTo(output, _repeated_invokes_codec);
      privatePayment_.WriteTo(output, _repeated_privatePayment_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += data_.CalculateSize(_repeated_data_codec);
      size += transfers_.CalculateSize(_repeated_transfers_codec);
      size += issues_.CalculateSize(_repeated_issues_codec);
      size += reissues_.CalculateSize(_repeated_reissues_codec);
      size += burns_.CalculateSize(_repeated_burns_codec);
      if (errorMessage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ErrorMessage);
      }
      size += sponsorFees_.CalculateSize(_repeated_sponsorFees_codec);
      size += leases_.CalculateSize(_repeated_leases_codec);
      size += leaseCancels_.CalculateSize(_repeated_leaseCancels_codec);
      size += invokes_.CalculateSize(_repeated_invokes_codec);
      size += privatePayment_.CalculateSize(_repeated_privatePayment_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InvokeScriptResult other) {
      if (other == null) {
        return;
      }
      data_.Add(other.data_);
      transfers_.Add(other.transfers_);
      issues_.Add(other.issues_);
      reissues_.Add(other.reissues_);
      burns_.Add(other.burns_);
      if (other.errorMessage_ != null) {
        if (errorMessage_ == null) {
          ErrorMessage = new global::VRP.InvokeScriptResult.Types.ErrorMessage();
        }
        ErrorMessage.MergeFrom(other.ErrorMessage);
      }
      sponsorFees_.Add(other.sponsorFees_);
      leases_.Add(other.leases_);
      leaseCancels_.Add(other.leaseCancels_);
      invokes_.Add(other.invokes_);
      privatePayment_.Add(other.privatePayment_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
          case 18: {
            transfers_.AddEntriesFrom(input, _repeated_transfers_codec);
            break;
          }
          case 26: {
            issues_.AddEntriesFrom(input, _repeated_issues_codec);
            break;
          }
          case 34: {
            reissues_.AddEntriesFrom(input, _repeated_reissues_codec);
            break;
          }
          case 42: {
            burns_.AddEntriesFrom(input, _repeated_burns_codec);
            break;
          }
          case 50: {
            if (errorMessage_ == null) {
              ErrorMessage = new global::VRP.InvokeScriptResult.Types.ErrorMessage();
            }
            input.ReadMessage(ErrorMessage);
            break;
          }
          case 58: {
            sponsorFees_.AddEntriesFrom(input, _repeated_sponsorFees_codec);
            break;
          }
          case 66: {
            leases_.AddEntriesFrom(input, _repeated_leases_codec);
            break;
          }
          case 74: {
            leaseCancels_.AddEntriesFrom(input, _repeated_leaseCancels_codec);
            break;
          }
          case 82: {
            invokes_.AddEntriesFrom(input, _repeated_invokes_codec);
            break;
          }
          case 90: {
            privatePayment_.AddEntriesFrom(input, _repeated_privatePayment_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the InvokeScriptResult message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Payment : pb::IMessage<Payment> {
        private static readonly pb::MessageParser<Payment> _parser = new pb::MessageParser<Payment>(() => new Payment());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Payment> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::VRP.InvokeScriptResult.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Payment() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Payment(Payment other) : this() {
          address_ = other.address_;
          amount_ = other.amount_ != null ? other.amount_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Payment Clone() {
          return new Payment(this);
        }

        /// <summary>Field number for the "address" field.</summary>
        public const int AddressFieldNumber = 1;
        private pb::ByteString address_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Address {
          get { return address_; }
          set {
            address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "amount" field.</summary>
        public const int AmountFieldNumber = 2;
        private global::VRP.Amount amount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::VRP.Amount Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Payment);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Payment other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Address != other.Address) return false;
          if (!object.Equals(Amount, other.Amount)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Address.Length != 0) hash ^= Address.GetHashCode();
          if (amount_ != null) hash ^= Amount.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Address.Length != 0) {
            output.WriteRawTag(10);
            output.WriteBytes(Address);
          }
          if (amount_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Amount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Address.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Address);
          }
          if (amount_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Amount);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Payment other) {
          if (other == null) {
            return;
          }
          if (other.Address.Length != 0) {
            Address = other.Address;
          }
          if (other.amount_ != null) {
            if (amount_ == null) {
              Amount = new global::VRP.Amount();
            }
            Amount.MergeFrom(other.Amount);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Address = input.ReadBytes();
                break;
              }
              case 18: {
                if (amount_ == null) {
                  Amount = new global::VRP.Amount();
                }
                input.ReadMessage(Amount);
                break;
              }
            }
          }
        }

      }

      public sealed partial class PrivatePayment : pb::IMessage<PrivatePayment> {
        private static readonly pb::MessageParser<PrivatePayment> _parser = new pb::MessageParser<PrivatePayment>(() => new PrivatePayment());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PrivatePayment> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::VRP.InvokeScriptResult.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PrivatePayment() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PrivatePayment(PrivatePayment other) : this() {
          address_ = other.address_;
          amount_ = other.amount_ != null ? other.amount_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PrivatePayment Clone() {
          return new PrivatePayment(this);
        }

        /// <summary>Field number for the "address" field.</summary>
        public const int AddressFieldNumber = 1;
        private pb::ByteString address_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Address {
          get { return address_; }
          set {
            address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "amount" field.</summary>
        public const int AmountFieldNumber = 2;
        private global::VRP.Amount amount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::VRP.Amount Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PrivatePayment);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PrivatePayment other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Address != other.Address) return false;
          if (!object.Equals(Amount, other.Amount)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Address.Length != 0) hash ^= Address.GetHashCode();
          if (amount_ != null) hash ^= Amount.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Address.Length != 0) {
            output.WriteRawTag(10);
            output.WriteBytes(Address);
          }
          if (amount_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Amount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Address.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Address);
          }
          if (amount_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Amount);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PrivatePayment other) {
          if (other == null) {
            return;
          }
          if (other.Address.Length != 0) {
            Address = other.Address;
          }
          if (other.amount_ != null) {
            if (amount_ == null) {
              Amount = new global::VRP.Amount();
            }
            Amount.MergeFrom(other.Amount);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Address = input.ReadBytes();
                break;
              }
              case 18: {
                if (amount_ == null) {
                  Amount = new global::VRP.Amount();
                }
                input.ReadMessage(Amount);
                break;
              }
            }
          }
        }

      }

      public sealed partial class Issue : pb::IMessage<Issue> {
        private static readonly pb::MessageParser<Issue> _parser = new pb::MessageParser<Issue>(() => new Issue());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Issue> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::VRP.InvokeScriptResult.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Issue() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Issue(Issue other) : this() {
          assetId_ = other.assetId_;
          name_ = other.name_;
          description_ = other.description_;
          image_ = other.image_;
          amount_ = other.amount_;
          decimals_ = other.decimals_;
          reissuable_ = other.reissuable_;
          script_ = other.script_;
          nonce_ = other.nonce_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Issue Clone() {
          return new Issue(this);
        }

        /// <summary>Field number for the "asset_id" field.</summary>
        public const int AssetIdFieldNumber = 1;
        private pb::ByteString assetId_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString AssetId {
          get { return assetId_; }
          set {
            assetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "description" field.</summary>
        public const int DescriptionFieldNumber = 3;
        private string description_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Description {
          get { return description_; }
          set {
            description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "image" field.</summary>
        public const int ImageFieldNumber = 4;
        private string image_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Image {
          get { return image_; }
          set {
            image_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "amount" field.</summary>
        public const int AmountFieldNumber = 5;
        private long amount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        /// <summary>Field number for the "decimals" field.</summary>
        public const int DecimalsFieldNumber = 6;
        private int decimals_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Decimals {
          get { return decimals_; }
          set {
            decimals_ = value;
          }
        }

        /// <summary>Field number for the "reissuable" field.</summary>
        public const int ReissuableFieldNumber = 7;
        private bool reissuable_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Reissuable {
          get { return reissuable_; }
          set {
            reissuable_ = value;
          }
        }

        /// <summary>Field number for the "script" field.</summary>
        public const int ScriptFieldNumber = 8;
        private pb::ByteString script_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Script {
          get { return script_; }
          set {
            script_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "nonce" field.</summary>
        public const int NonceFieldNumber = 9;
        private long nonce_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Nonce {
          get { return nonce_; }
          set {
            nonce_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Issue);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Issue other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AssetId != other.AssetId) return false;
          if (Name != other.Name) return false;
          if (Description != other.Description) return false;
          if (Image != other.Image) return false;
          if (Amount != other.Amount) return false;
          if (Decimals != other.Decimals) return false;
          if (Reissuable != other.Reissuable) return false;
          if (Script != other.Script) return false;
          if (Nonce != other.Nonce) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (AssetId.Length != 0) hash ^= AssetId.GetHashCode();
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (Description.Length != 0) hash ^= Description.GetHashCode();
          if (Image.Length != 0) hash ^= Image.GetHashCode();
          if (Amount != 0L) hash ^= Amount.GetHashCode();
          if (Decimals != 0) hash ^= Decimals.GetHashCode();
          if (Reissuable != false) hash ^= Reissuable.GetHashCode();
          if (Script.Length != 0) hash ^= Script.GetHashCode();
          if (Nonce != 0L) hash ^= Nonce.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (AssetId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteBytes(AssetId);
          }
          if (Name.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Name);
          }
          if (Description.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Description);
          }
          if (Image.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(Image);
          }
          if (Amount != 0L) {
            output.WriteRawTag(40);
            output.WriteInt64(Amount);
          }
          if (Decimals != 0) {
            output.WriteRawTag(48);
            output.WriteInt32(Decimals);
          }
          if (Reissuable != false) {
            output.WriteRawTag(56);
            output.WriteBool(Reissuable);
          }
          if (Script.Length != 0) {
            output.WriteRawTag(66);
            output.WriteBytes(Script);
          }
          if (Nonce != 0L) {
            output.WriteRawTag(72);
            output.WriteInt64(Nonce);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (AssetId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(AssetId);
          }
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (Description.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
          }
          if (Image.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Image);
          }
          if (Amount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
          }
          if (Decimals != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Decimals);
          }
          if (Reissuable != false) {
            size += 1 + 1;
          }
          if (Script.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Script);
          }
          if (Nonce != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Nonce);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Issue other) {
          if (other == null) {
            return;
          }
          if (other.AssetId.Length != 0) {
            AssetId = other.AssetId;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.Description.Length != 0) {
            Description = other.Description;
          }
          if (other.Image.Length != 0) {
            Image = other.Image;
          }
          if (other.Amount != 0L) {
            Amount = other.Amount;
          }
          if (other.Decimals != 0) {
            Decimals = other.Decimals;
          }
          if (other.Reissuable != false) {
            Reissuable = other.Reissuable;
          }
          if (other.Script.Length != 0) {
            Script = other.Script;
          }
          if (other.Nonce != 0L) {
            Nonce = other.Nonce;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                AssetId = input.ReadBytes();
                break;
              }
              case 18: {
                Name = input.ReadString();
                break;
              }
              case 26: {
                Description = input.ReadString();
                break;
              }
              case 34: {
                Image = input.ReadString();
                break;
              }
              case 40: {
                Amount = input.ReadInt64();
                break;
              }
              case 48: {
                Decimals = input.ReadInt32();
                break;
              }
              case 56: {
                Reissuable = input.ReadBool();
                break;
              }
              case 66: {
                Script = input.ReadBytes();
                break;
              }
              case 72: {
                Nonce = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Reissue : pb::IMessage<Reissue> {
        private static readonly pb::MessageParser<Reissue> _parser = new pb::MessageParser<Reissue>(() => new Reissue());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Reissue> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::VRP.InvokeScriptResult.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Reissue() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Reissue(Reissue other) : this() {
          assetId_ = other.assetId_;
          amount_ = other.amount_;
          isReissuable_ = other.isReissuable_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Reissue Clone() {
          return new Reissue(this);
        }

        /// <summary>Field number for the "asset_id" field.</summary>
        public const int AssetIdFieldNumber = 1;
        private pb::ByteString assetId_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString AssetId {
          get { return assetId_; }
          set {
            assetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "amount" field.</summary>
        public const int AmountFieldNumber = 2;
        private long amount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        /// <summary>Field number for the "is_reissuable" field.</summary>
        public const int IsReissuableFieldNumber = 3;
        private bool isReissuable_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsReissuable {
          get { return isReissuable_; }
          set {
            isReissuable_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Reissue);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Reissue other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AssetId != other.AssetId) return false;
          if (Amount != other.Amount) return false;
          if (IsReissuable != other.IsReissuable) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (AssetId.Length != 0) hash ^= AssetId.GetHashCode();
          if (Amount != 0L) hash ^= Amount.GetHashCode();
          if (IsReissuable != false) hash ^= IsReissuable.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (AssetId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteBytes(AssetId);
          }
          if (Amount != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(Amount);
          }
          if (IsReissuable != false) {
            output.WriteRawTag(24);
            output.WriteBool(IsReissuable);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (AssetId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(AssetId);
          }
          if (Amount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
          }
          if (IsReissuable != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Reissue other) {
          if (other == null) {
            return;
          }
          if (other.AssetId.Length != 0) {
            AssetId = other.AssetId;
          }
          if (other.Amount != 0L) {
            Amount = other.Amount;
          }
          if (other.IsReissuable != false) {
            IsReissuable = other.IsReissuable;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                AssetId = input.ReadBytes();
                break;
              }
              case 16: {
                Amount = input.ReadInt64();
                break;
              }
              case 24: {
                IsReissuable = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Burn : pb::IMessage<Burn> {
        private static readonly pb::MessageParser<Burn> _parser = new pb::MessageParser<Burn>(() => new Burn());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Burn> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::VRP.InvokeScriptResult.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Burn() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Burn(Burn other) : this() {
          assetId_ = other.assetId_;
          amount_ = other.amount_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Burn Clone() {
          return new Burn(this);
        }

        /// <summary>Field number for the "asset_id" field.</summary>
        public const int AssetIdFieldNumber = 1;
        private pb::ByteString assetId_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString AssetId {
          get { return assetId_; }
          set {
            assetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "amount" field.</summary>
        public const int AmountFieldNumber = 2;
        private long amount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Burn);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Burn other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AssetId != other.AssetId) return false;
          if (Amount != other.Amount) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (AssetId.Length != 0) hash ^= AssetId.GetHashCode();
          if (Amount != 0L) hash ^= Amount.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (AssetId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteBytes(AssetId);
          }
          if (Amount != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(Amount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (AssetId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(AssetId);
          }
          if (Amount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Burn other) {
          if (other == null) {
            return;
          }
          if (other.AssetId.Length != 0) {
            AssetId = other.AssetId;
          }
          if (other.Amount != 0L) {
            Amount = other.Amount;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                AssetId = input.ReadBytes();
                break;
              }
              case 16: {
                Amount = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class SponsorFee : pb::IMessage<SponsorFee> {
        private static readonly pb::MessageParser<SponsorFee> _parser = new pb::MessageParser<SponsorFee>(() => new SponsorFee());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SponsorFee> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::VRP.InvokeScriptResult.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SponsorFee() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SponsorFee(SponsorFee other) : this() {
          minFee_ = other.minFee_ != null ? other.minFee_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SponsorFee Clone() {
          return new SponsorFee(this);
        }

        /// <summary>Field number for the "min_fee" field.</summary>
        public const int MinFeeFieldNumber = 1;
        private global::VRP.Amount minFee_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::VRP.Amount MinFee {
          get { return minFee_; }
          set {
            minFee_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SponsorFee);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SponsorFee other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(MinFee, other.MinFee)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (minFee_ != null) hash ^= MinFee.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (minFee_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(MinFee);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (minFee_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(MinFee);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SponsorFee other) {
          if (other == null) {
            return;
          }
          if (other.minFee_ != null) {
            if (minFee_ == null) {
              MinFee = new global::VRP.Amount();
            }
            MinFee.MergeFrom(other.MinFee);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (minFee_ == null) {
                  MinFee = new global::VRP.Amount();
                }
                input.ReadMessage(MinFee);
                break;
              }
            }
          }
        }

      }

      public sealed partial class Lease : pb::IMessage<Lease> {
        private static readonly pb::MessageParser<Lease> _parser = new pb::MessageParser<Lease>(() => new Lease());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Lease> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::VRP.InvokeScriptResult.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Lease() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Lease(Lease other) : this() {
          recipient_ = other.recipient_ != null ? other.recipient_.Clone() : null;
          amount_ = other.amount_;
          nonce_ = other.nonce_;
          leaseId_ = other.leaseId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Lease Clone() {
          return new Lease(this);
        }

        /// <summary>Field number for the "recipient" field.</summary>
        public const int RecipientFieldNumber = 1;
        private global::VRP.Recipient recipient_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::VRP.Recipient Recipient {
          get { return recipient_; }
          set {
            recipient_ = value;
          }
        }

        /// <summary>Field number for the "amount" field.</summary>
        public const int AmountFieldNumber = 2;
        private long amount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        /// <summary>Field number for the "nonce" field.</summary>
        public const int NonceFieldNumber = 3;
        private long nonce_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Nonce {
          get { return nonce_; }
          set {
            nonce_ = value;
          }
        }

        /// <summary>Field number for the "lease_id" field.</summary>
        public const int LeaseIdFieldNumber = 4;
        private pb::ByteString leaseId_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString LeaseId {
          get { return leaseId_; }
          set {
            leaseId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Lease);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Lease other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Recipient, other.Recipient)) return false;
          if (Amount != other.Amount) return false;
          if (Nonce != other.Nonce) return false;
          if (LeaseId != other.LeaseId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (recipient_ != null) hash ^= Recipient.GetHashCode();
          if (Amount != 0L) hash ^= Amount.GetHashCode();
          if (Nonce != 0L) hash ^= Nonce.GetHashCode();
          if (LeaseId.Length != 0) hash ^= LeaseId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (recipient_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Recipient);
          }
          if (Amount != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(Amount);
          }
          if (Nonce != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(Nonce);
          }
          if (LeaseId.Length != 0) {
            output.WriteRawTag(34);
            output.WriteBytes(LeaseId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (recipient_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Recipient);
          }
          if (Amount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
          }
          if (Nonce != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Nonce);
          }
          if (LeaseId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(LeaseId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Lease other) {
          if (other == null) {
            return;
          }
          if (other.recipient_ != null) {
            if (recipient_ == null) {
              Recipient = new global::VRP.Recipient();
            }
            Recipient.MergeFrom(other.Recipient);
          }
          if (other.Amount != 0L) {
            Amount = other.Amount;
          }
          if (other.Nonce != 0L) {
            Nonce = other.Nonce;
          }
          if (other.LeaseId.Length != 0) {
            LeaseId = other.LeaseId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (recipient_ == null) {
                  Recipient = new global::VRP.Recipient();
                }
                input.ReadMessage(Recipient);
                break;
              }
              case 16: {
                Amount = input.ReadInt64();
                break;
              }
              case 24: {
                Nonce = input.ReadInt64();
                break;
              }
              case 34: {
                LeaseId = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

      public sealed partial class LeaseCancel : pb::IMessage<LeaseCancel> {
        private static readonly pb::MessageParser<LeaseCancel> _parser = new pb::MessageParser<LeaseCancel>(() => new LeaseCancel());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LeaseCancel> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::VRP.InvokeScriptResult.Descriptor.NestedTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LeaseCancel() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LeaseCancel(LeaseCancel other) : this() {
          leaseId_ = other.leaseId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LeaseCancel Clone() {
          return new LeaseCancel(this);
        }

        /// <summary>Field number for the "lease_id" field.</summary>
        public const int LeaseIdFieldNumber = 1;
        private pb::ByteString leaseId_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString LeaseId {
          get { return leaseId_; }
          set {
            leaseId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as LeaseCancel);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LeaseCancel other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (LeaseId != other.LeaseId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (LeaseId.Length != 0) hash ^= LeaseId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (LeaseId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteBytes(LeaseId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (LeaseId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(LeaseId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LeaseCancel other) {
          if (other == null) {
            return;
          }
          if (other.LeaseId.Length != 0) {
            LeaseId = other.LeaseId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                LeaseId = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ErrorMessage : pb::IMessage<ErrorMessage> {
        private static readonly pb::MessageParser<ErrorMessage> _parser = new pb::MessageParser<ErrorMessage>(() => new ErrorMessage());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ErrorMessage> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::VRP.InvokeScriptResult.Descriptor.NestedTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ErrorMessage() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ErrorMessage(ErrorMessage other) : this() {
          code_ = other.code_;
          text_ = other.text_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ErrorMessage Clone() {
          return new ErrorMessage(this);
        }

        /// <summary>Field number for the "code" field.</summary>
        public const int CodeFieldNumber = 1;
        private int code_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Code {
          get { return code_; }
          set {
            code_ = value;
          }
        }

        /// <summary>Field number for the "text" field.</summary>
        public const int TextFieldNumber = 2;
        private string text_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Text {
          get { return text_; }
          set {
            text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ErrorMessage);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ErrorMessage other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Code != other.Code) return false;
          if (Text != other.Text) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Code != 0) hash ^= Code.GetHashCode();
          if (Text.Length != 0) hash ^= Text.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Code != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Code);
          }
          if (Text.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Text);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Code != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
          }
          if (Text.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ErrorMessage other) {
          if (other == null) {
            return;
          }
          if (other.Code != 0) {
            Code = other.Code;
          }
          if (other.Text.Length != 0) {
            Text = other.Text;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Code = input.ReadInt32();
                break;
              }
              case 18: {
                Text = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Call : pb::IMessage<Call> {
        private static readonly pb::MessageParser<Call> _parser = new pb::MessageParser<Call>(() => new Call());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Call> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::VRP.InvokeScriptResult.Descriptor.NestedTypes[9]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Call() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Call(Call other) : this() {
          function_ = other.function_;
          argsBytes_ = other.argsBytes_.Clone();
          args_ = other.args_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Call Clone() {
          return new Call(this);
        }

        /// <summary>Field number for the "function" field.</summary>
        public const int FunctionFieldNumber = 1;
        private string function_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Function {
          get { return function_; }
          set {
            function_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "args_bytes" field.</summary>
        public const int ArgsBytesFieldNumber = 2;
        private static readonly pb::FieldCodec<pb::ByteString> _repeated_argsBytes_codec
            = pb::FieldCodec.ForBytes(18);
        private readonly pbc::RepeatedField<pb::ByteString> argsBytes_ = new pbc::RepeatedField<pb::ByteString>();
        [global::System.ObsoleteAttribute]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<pb::ByteString> ArgsBytes {
          get { return argsBytes_; }
        }

        /// <summary>Field number for the "args" field.</summary>
        public const int ArgsFieldNumber = 3;
        private static readonly pb::FieldCodec<global::VRP.InvokeScriptResult.Types.Call.Types.Argument> _repeated_args_codec
            = pb::FieldCodec.ForMessage(26, global::VRP.InvokeScriptResult.Types.Call.Types.Argument.Parser);
        private readonly pbc::RepeatedField<global::VRP.InvokeScriptResult.Types.Call.Types.Argument> args_ = new pbc::RepeatedField<global::VRP.InvokeScriptResult.Types.Call.Types.Argument>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::VRP.InvokeScriptResult.Types.Call.Types.Argument> Args {
          get { return args_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Call);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Call other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Function != other.Function) return false;
          if(!argsBytes_.Equals(other.argsBytes_)) return false;
          if(!args_.Equals(other.args_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Function.Length != 0) hash ^= Function.GetHashCode();
          hash ^= argsBytes_.GetHashCode();
          hash ^= args_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Function.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Function);
          }
          argsBytes_.WriteTo(output, _repeated_argsBytes_codec);
          args_.WriteTo(output, _repeated_args_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Function.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Function);
          }
          size += argsBytes_.CalculateSize(_repeated_argsBytes_codec);
          size += args_.CalculateSize(_repeated_args_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Call other) {
          if (other == null) {
            return;
          }
          if (other.Function.Length != 0) {
            Function = other.Function;
          }
          argsBytes_.Add(other.argsBytes_);
          args_.Add(other.args_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Function = input.ReadString();
                break;
              }
              case 18: {
                argsBytes_.AddEntriesFrom(input, _repeated_argsBytes_codec);
                break;
              }
              case 26: {
                args_.AddEntriesFrom(input, _repeated_args_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Call message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class Argument : pb::IMessage<Argument> {
            private static readonly pb::MessageParser<Argument> _parser = new pb::MessageParser<Argument>(() => new Argument());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Argument> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::VRP.InvokeScriptResult.Types.Call.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Argument() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Argument(Argument other) : this() {
              switch (other.ValueCase) {
                case ValueOneofCase.IntegerValue:
                  IntegerValue = other.IntegerValue;
                  break;
                case ValueOneofCase.BinaryValue:
                  BinaryValue = other.BinaryValue;
                  break;
                case ValueOneofCase.StringValue:
                  StringValue = other.StringValue;
                  break;
                case ValueOneofCase.BooleanValue:
                  BooleanValue = other.BooleanValue;
                  break;
                case ValueOneofCase.CaseObj:
                  CaseObj = other.CaseObj;
                  break;
                case ValueOneofCase.List:
                  List = other.List.Clone();
                  break;
              }

              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Argument Clone() {
              return new Argument(this);
            }

            /// <summary>Field number for the "integer_value" field.</summary>
            public const int IntegerValueFieldNumber = 1;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long IntegerValue {
              get { return valueCase_ == ValueOneofCase.IntegerValue ? (long) value_ : 0L; }
              set {
                value_ = value;
                valueCase_ = ValueOneofCase.IntegerValue;
              }
            }

            /// <summary>Field number for the "binary_value" field.</summary>
            public const int BinaryValueFieldNumber = 2;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pb::ByteString BinaryValue {
              get { return valueCase_ == ValueOneofCase.BinaryValue ? (pb::ByteString) value_ : pb::ByteString.Empty; }
              set {
                value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                valueCase_ = ValueOneofCase.BinaryValue;
              }
            }

            /// <summary>Field number for the "string_value" field.</summary>
            public const int StringValueFieldNumber = 3;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string StringValue {
              get { return valueCase_ == ValueOneofCase.StringValue ? (string) value_ : ""; }
              set {
                value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                valueCase_ = ValueOneofCase.StringValue;
              }
            }

            /// <summary>Field number for the "boolean_value" field.</summary>
            public const int BooleanValueFieldNumber = 4;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool BooleanValue {
              get { return valueCase_ == ValueOneofCase.BooleanValue ? (bool) value_ : false; }
              set {
                value_ = value;
                valueCase_ = ValueOneofCase.BooleanValue;
              }
            }

            /// <summary>Field number for the "case_obj" field.</summary>
            public const int CaseObjFieldNumber = 5;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pb::ByteString CaseObj {
              get { return valueCase_ == ValueOneofCase.CaseObj ? (pb::ByteString) value_ : pb::ByteString.Empty; }
              set {
                value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                valueCase_ = ValueOneofCase.CaseObj;
              }
            }

            /// <summary>Field number for the "list" field.</summary>
            public const int ListFieldNumber = 10;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::VRP.InvokeScriptResult.Types.Call.Types.Argument.Types.List List {
              get { return valueCase_ == ValueOneofCase.List ? (global::VRP.InvokeScriptResult.Types.Call.Types.Argument.Types.List) value_ : null; }
              set {
                value_ = value;
                valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.List;
              }
            }

            private object value_;
            /// <summary>Enum of possible cases for the "value" oneof.</summary>
            public enum ValueOneofCase {
              None = 0,
              IntegerValue = 1,
              BinaryValue = 2,
              StringValue = 3,
              BooleanValue = 4,
              CaseObj = 5,
              List = 10,
            }
            private ValueOneofCase valueCase_ = ValueOneofCase.None;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ValueOneofCase ValueCase {
              get { return valueCase_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearValue() {
              valueCase_ = ValueOneofCase.None;
              value_ = null;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Argument);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Argument other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (IntegerValue != other.IntegerValue) return false;
              if (BinaryValue != other.BinaryValue) return false;
              if (StringValue != other.StringValue) return false;
              if (BooleanValue != other.BooleanValue) return false;
              if (CaseObj != other.CaseObj) return false;
              if (!object.Equals(List, other.List)) return false;
              if (ValueCase != other.ValueCase) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (valueCase_ == ValueOneofCase.IntegerValue) hash ^= IntegerValue.GetHashCode();
              if (valueCase_ == ValueOneofCase.BinaryValue) hash ^= BinaryValue.GetHashCode();
              if (valueCase_ == ValueOneofCase.StringValue) hash ^= StringValue.GetHashCode();
              if (valueCase_ == ValueOneofCase.BooleanValue) hash ^= BooleanValue.GetHashCode();
              if (valueCase_ == ValueOneofCase.CaseObj) hash ^= CaseObj.GetHashCode();
              if (valueCase_ == ValueOneofCase.List) hash ^= List.GetHashCode();
              hash ^= (int) valueCase_;
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (valueCase_ == ValueOneofCase.IntegerValue) {
                output.WriteRawTag(8);
                output.WriteInt64(IntegerValue);
              }
              if (valueCase_ == ValueOneofCase.BinaryValue) {
                output.WriteRawTag(18);
                output.WriteBytes(BinaryValue);
              }
              if (valueCase_ == ValueOneofCase.StringValue) {
                output.WriteRawTag(26);
                output.WriteString(StringValue);
              }
              if (valueCase_ == ValueOneofCase.BooleanValue) {
                output.WriteRawTag(32);
                output.WriteBool(BooleanValue);
              }
              if (valueCase_ == ValueOneofCase.CaseObj) {
                output.WriteRawTag(42);
                output.WriteBytes(CaseObj);
              }
              if (valueCase_ == ValueOneofCase.List) {
                output.WriteRawTag(82);
                output.WriteMessage(List);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (valueCase_ == ValueOneofCase.IntegerValue) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(IntegerValue);
              }
              if (valueCase_ == ValueOneofCase.BinaryValue) {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(BinaryValue);
              }
              if (valueCase_ == ValueOneofCase.StringValue) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(StringValue);
              }
              if (valueCase_ == ValueOneofCase.BooleanValue) {
                size += 1 + 1;
              }
              if (valueCase_ == ValueOneofCase.CaseObj) {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(CaseObj);
              }
              if (valueCase_ == ValueOneofCase.List) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(List);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Argument other) {
              if (other == null) {
                return;
              }
              switch (other.ValueCase) {
                case ValueOneofCase.IntegerValue:
                  IntegerValue = other.IntegerValue;
                  break;
                case ValueOneofCase.BinaryValue:
                  BinaryValue = other.BinaryValue;
                  break;
                case ValueOneofCase.StringValue:
                  StringValue = other.StringValue;
                  break;
                case ValueOneofCase.BooleanValue:
                  BooleanValue = other.BooleanValue;
                  break;
                case ValueOneofCase.CaseObj:
                  CaseObj = other.CaseObj;
                  break;
                case ValueOneofCase.List:
                  if (List == null) {
                    List = new global::VRP.InvokeScriptResult.Types.Call.Types.Argument.Types.List();
                  }
                  List.MergeFrom(other.List);
                  break;
              }

              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    IntegerValue = input.ReadInt64();
                    break;
                  }
                  case 18: {
                    BinaryValue = input.ReadBytes();
                    break;
                  }
                  case 26: {
                    StringValue = input.ReadString();
                    break;
                  }
                  case 32: {
                    BooleanValue = input.ReadBool();
                    break;
                  }
                  case 42: {
                    CaseObj = input.ReadBytes();
                    break;
                  }
                  case 82: {
                    global::VRP.InvokeScriptResult.Types.Call.Types.Argument.Types.List subBuilder = new global::VRP.InvokeScriptResult.Types.Call.Types.Argument.Types.List();
                    if (valueCase_ == ValueOneofCase.List) {
                      subBuilder.MergeFrom(List);
                    }
                    input.ReadMessage(subBuilder);
                    List = subBuilder;
                    break;
                  }
                }
              }
            }

            #region Nested types
            /// <summary>Container for nested types declared in the Argument message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              public sealed partial class List : pb::IMessage<List> {
                private static readonly pb::MessageParser<List> _parser = new pb::MessageParser<List>(() => new List());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<List> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::VRP.InvokeScriptResult.Types.Call.Types.Argument.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public List() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public List(List other) : this() {
                  items_ = other.items_.Clone();
                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public List Clone() {
                  return new List(this);
                }

                /// <summary>Field number for the "items" field.</summary>
                public const int ItemsFieldNumber = 1;
                private static readonly pb::FieldCodec<global::VRP.InvokeScriptResult.Types.Call.Types.Argument> _repeated_items_codec
                    = pb::FieldCodec.ForMessage(10, global::VRP.InvokeScriptResult.Types.Call.Types.Argument.Parser);
                private readonly pbc::RepeatedField<global::VRP.InvokeScriptResult.Types.Call.Types.Argument> items_ = new pbc::RepeatedField<global::VRP.InvokeScriptResult.Types.Call.Types.Argument>();
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pbc::RepeatedField<global::VRP.InvokeScriptResult.Types.Call.Types.Argument> Items {
                  get { return items_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as List);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(List other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if(!items_.Equals(other.items_)) return false;
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  hash ^= items_.GetHashCode();
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                  items_.WriteTo(output, _repeated_items_codec);
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  size += items_.CalculateSize(_repeated_items_codec);
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(List other) {
                  if (other == null) {
                    return;
                  }
                  items_.Add(other.items_);
                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                      case 10: {
                        items_.AddEntriesFrom(input, _repeated_items_codec);
                        break;
                      }
                    }
                  }
                }

              }

            }
            #endregion

          }

        }
        #endregion

      }

      public sealed partial class Invocation : pb::IMessage<Invocation> {
        private static readonly pb::MessageParser<Invocation> _parser = new pb::MessageParser<Invocation>(() => new Invocation());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Invocation> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::VRP.InvokeScriptResult.Descriptor.NestedTypes[10]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Invocation() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Invocation(Invocation other) : this() {
          dApp_ = other.dApp_;
          call_ = other.call_ != null ? other.call_.Clone() : null;
          payments_ = other.payments_.Clone();
          stateChanges_ = other.stateChanges_ != null ? other.stateChanges_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Invocation Clone() {
          return new Invocation(this);
        }

        /// <summary>Field number for the "dApp" field.</summary>
        public const int DAppFieldNumber = 1;
        private pb::ByteString dApp_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString DApp {
          get { return dApp_; }
          set {
            dApp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "call" field.</summary>
        public const int CallFieldNumber = 2;
        private global::VRP.InvokeScriptResult.Types.Call call_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::VRP.InvokeScriptResult.Types.Call Call {
          get { return call_; }
          set {
            call_ = value;
          }
        }

        /// <summary>Field number for the "payments" field.</summary>
        public const int PaymentsFieldNumber = 3;
        private static readonly pb::FieldCodec<global::VRP.Amount> _repeated_payments_codec
            = pb::FieldCodec.ForMessage(26, global::VRP.Amount.Parser);
        private readonly pbc::RepeatedField<global::VRP.Amount> payments_ = new pbc::RepeatedField<global::VRP.Amount>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::VRP.Amount> Payments {
          get { return payments_; }
        }

        /// <summary>Field number for the "stateChanges" field.</summary>
        public const int StateChangesFieldNumber = 4;
        private global::VRP.InvokeScriptResult stateChanges_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::VRP.InvokeScriptResult StateChanges {
          get { return stateChanges_; }
          set {
            stateChanges_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Invocation);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Invocation other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (DApp != other.DApp) return false;
          if (!object.Equals(Call, other.Call)) return false;
          if(!payments_.Equals(other.payments_)) return false;
          if (!object.Equals(StateChanges, other.StateChanges)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (DApp.Length != 0) hash ^= DApp.GetHashCode();
          if (call_ != null) hash ^= Call.GetHashCode();
          hash ^= payments_.GetHashCode();
          if (stateChanges_ != null) hash ^= StateChanges.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (DApp.Length != 0) {
            output.WriteRawTag(10);
            output.WriteBytes(DApp);
          }
          if (call_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Call);
          }
          payments_.WriteTo(output, _repeated_payments_codec);
          if (stateChanges_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(StateChanges);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (DApp.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(DApp);
          }
          if (call_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Call);
          }
          size += payments_.CalculateSize(_repeated_payments_codec);
          if (stateChanges_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(StateChanges);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Invocation other) {
          if (other == null) {
            return;
          }
          if (other.DApp.Length != 0) {
            DApp = other.DApp;
          }
          if (other.call_ != null) {
            if (call_ == null) {
              Call = new global::VRP.InvokeScriptResult.Types.Call();
            }
            Call.MergeFrom(other.Call);
          }
          payments_.Add(other.payments_);
          if (other.stateChanges_ != null) {
            if (stateChanges_ == null) {
              StateChanges = new global::VRP.InvokeScriptResult();
            }
            StateChanges.MergeFrom(other.StateChanges);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                DApp = input.ReadBytes();
                break;
              }
              case 18: {
                if (call_ == null) {
                  Call = new global::VRP.InvokeScriptResult.Types.Call();
                }
                input.ReadMessage(Call);
                break;
              }
              case 26: {
                payments_.AddEntriesFrom(input, _repeated_payments_codec);
                break;
              }
              case 34: {
                if (stateChanges_ == null) {
                  StateChanges = new global::VRP.InvokeScriptResult();
                }
                input.ReadMessage(StateChanges);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
