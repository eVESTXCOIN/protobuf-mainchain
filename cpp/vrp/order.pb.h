// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vrp/order.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vrp_2forder_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vrp_2forder_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021007 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "vrp/amount.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vrp_2forder_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vrp_2forder_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vrp_2forder_2eproto;
namespace vrp {
class AssetPair;
struct AssetPairDefaultTypeInternal;
extern AssetPairDefaultTypeInternal _AssetPair_default_instance_;
class Order;
struct OrderDefaultTypeInternal;
extern OrderDefaultTypeInternal _Order_default_instance_;
}  // namespace vrp
PROTOBUF_NAMESPACE_OPEN
template<> ::vrp::AssetPair* Arena::CreateMaybeMessage<::vrp::AssetPair>(Arena*);
template<> ::vrp::Order* Arena::CreateMaybeMessage<::vrp::Order>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace vrp {

enum Order_Side : int {
  Order_Side_BUY = 0,
  Order_Side_SELL = 1,
  Order_Side_Order_Side_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Order_Side_Order_Side_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Order_Side_IsValid(int value);
constexpr Order_Side Order_Side_Side_MIN = Order_Side_BUY;
constexpr Order_Side Order_Side_Side_MAX = Order_Side_SELL;
constexpr int Order_Side_Side_ARRAYSIZE = Order_Side_Side_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Order_Side_descriptor();
template<typename T>
inline const std::string& Order_Side_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Order_Side>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Order_Side_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Order_Side_descriptor(), enum_t_value);
}
inline bool Order_Side_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Order_Side* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Order_Side>(
    Order_Side_descriptor(), name, value);
}
enum Order_PriceMode : int {
  Order_PriceMode_DEFAULT = 0,
  Order_PriceMode_FIXED_DECIMALS = 1,
  Order_PriceMode_ASSET_DECIMALS = 2,
  Order_PriceMode_Order_PriceMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Order_PriceMode_Order_PriceMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Order_PriceMode_IsValid(int value);
constexpr Order_PriceMode Order_PriceMode_PriceMode_MIN = Order_PriceMode_DEFAULT;
constexpr Order_PriceMode Order_PriceMode_PriceMode_MAX = Order_PriceMode_ASSET_DECIMALS;
constexpr int Order_PriceMode_PriceMode_ARRAYSIZE = Order_PriceMode_PriceMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Order_PriceMode_descriptor();
template<typename T>
inline const std::string& Order_PriceMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Order_PriceMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Order_PriceMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Order_PriceMode_descriptor(), enum_t_value);
}
inline bool Order_PriceMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Order_PriceMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Order_PriceMode>(
    Order_PriceMode_descriptor(), name, value);
}
// ===================================================================

class AssetPair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vrp.AssetPair) */ {
 public:
  inline AssetPair() : AssetPair(nullptr) {}
  ~AssetPair() override;
  explicit PROTOBUF_CONSTEXPR AssetPair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AssetPair(const AssetPair& from);
  AssetPair(AssetPair&& from) noexcept
    : AssetPair() {
    *this = ::std::move(from);
  }

  inline AssetPair& operator=(const AssetPair& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssetPair& operator=(AssetPair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AssetPair& default_instance() {
    return *internal_default_instance();
  }
  static inline const AssetPair* internal_default_instance() {
    return reinterpret_cast<const AssetPair*>(
               &_AssetPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AssetPair& a, AssetPair& b) {
    a.Swap(&b);
  }
  inline void Swap(AssetPair* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssetPair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AssetPair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AssetPair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AssetPair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AssetPair& from) {
    AssetPair::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssetPair* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vrp.AssetPair";
  }
  protected:
  explicit AssetPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountAssetIdFieldNumber = 1,
    kPriceAssetIdFieldNumber = 2,
  };
  // bytes amount_asset_id = 1;
  void clear_amount_asset_id();
  const std::string& amount_asset_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_amount_asset_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_amount_asset_id();
  PROTOBUF_NODISCARD std::string* release_amount_asset_id();
  void set_allocated_amount_asset_id(std::string* amount_asset_id);
  private:
  const std::string& _internal_amount_asset_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount_asset_id(const std::string& value);
  std::string* _internal_mutable_amount_asset_id();
  public:

  // bytes price_asset_id = 2;
  void clear_price_asset_id();
  const std::string& price_asset_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_price_asset_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_price_asset_id();
  PROTOBUF_NODISCARD std::string* release_price_asset_id();
  void set_allocated_price_asset_id(std::string* price_asset_id);
  private:
  const std::string& _internal_price_asset_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_price_asset_id(const std::string& value);
  std::string* _internal_mutable_price_asset_id();
  public:

  // @@protoc_insertion_point(class_scope:vrp.AssetPair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_asset_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr price_asset_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vrp_2forder_2eproto;
};
// -------------------------------------------------------------------

class Order final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vrp.Order) */ {
 public:
  inline Order() : Order(nullptr) {}
  ~Order() override;
  explicit PROTOBUF_CONSTEXPR Order(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Order(const Order& from);
  Order(Order&& from) noexcept
    : Order() {
    *this = ::std::move(from);
  }

  inline Order& operator=(const Order& from) {
    CopyFrom(from);
    return *this;
  }
  inline Order& operator=(Order&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Order& default_instance() {
    return *internal_default_instance();
  }
  enum SenderCase {
    kSenderPublicKey = 2,
    kEip712Signature = 13,
    SENDER_NOT_SET = 0,
  };

  static inline const Order* internal_default_instance() {
    return reinterpret_cast<const Order*>(
               &_Order_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Order& a, Order& b) {
    a.Swap(&b);
  }
  inline void Swap(Order* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Order* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Order* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Order>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Order& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Order& from) {
    Order::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Order* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vrp.Order";
  }
  protected:
  explicit Order(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Order_Side Side;
  static constexpr Side BUY =
    Order_Side_BUY;
  static constexpr Side SELL =
    Order_Side_SELL;
  static inline bool Side_IsValid(int value) {
    return Order_Side_IsValid(value);
  }
  static constexpr Side Side_MIN =
    Order_Side_Side_MIN;
  static constexpr Side Side_MAX =
    Order_Side_Side_MAX;
  static constexpr int Side_ARRAYSIZE =
    Order_Side_Side_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Side_descriptor() {
    return Order_Side_descriptor();
  }
  template<typename T>
  static inline const std::string& Side_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Side>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Side_Name.");
    return Order_Side_Name(enum_t_value);
  }
  static inline bool Side_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Side* value) {
    return Order_Side_Parse(name, value);
  }

  typedef Order_PriceMode PriceMode;
  static constexpr PriceMode DEFAULT =
    Order_PriceMode_DEFAULT;
  static constexpr PriceMode FIXED_DECIMALS =
    Order_PriceMode_FIXED_DECIMALS;
  static constexpr PriceMode ASSET_DECIMALS =
    Order_PriceMode_ASSET_DECIMALS;
  static inline bool PriceMode_IsValid(int value) {
    return Order_PriceMode_IsValid(value);
  }
  static constexpr PriceMode PriceMode_MIN =
    Order_PriceMode_PriceMode_MIN;
  static constexpr PriceMode PriceMode_MAX =
    Order_PriceMode_PriceMode_MAX;
  static constexpr int PriceMode_ARRAYSIZE =
    Order_PriceMode_PriceMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PriceMode_descriptor() {
    return Order_PriceMode_descriptor();
  }
  template<typename T>
  static inline const std::string& PriceMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PriceMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PriceMode_Name.");
    return Order_PriceMode_Name(enum_t_value);
  }
  static inline bool PriceMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PriceMode* value) {
    return Order_PriceMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kProofsFieldNumber = 12,
    kMatcherPublicKeyFieldNumber = 3,
    kAssetPairFieldNumber = 4,
    kMatcherFeeFieldNumber = 10,
    kChainIdFieldNumber = 1,
    kAmountFieldNumber = 6,
    kPriceFieldNumber = 7,
    kTimestampFieldNumber = 8,
    kOrderSideFieldNumber = 5,
    kVersionFieldNumber = 11,
    kExpirationFieldNumber = 9,
    kPriceModeFieldNumber = 14,
    kSenderPublicKeyFieldNumber = 2,
    kEip712SignatureFieldNumber = 13,
  };
  // repeated bytes proofs = 12;
  int proofs_size() const;
  private:
  int _internal_proofs_size() const;
  public:
  void clear_proofs();
  const std::string& proofs(int index) const;
  std::string* mutable_proofs(int index);
  void set_proofs(int index, const std::string& value);
  void set_proofs(int index, std::string&& value);
  void set_proofs(int index, const char* value);
  void set_proofs(int index, const void* value, size_t size);
  std::string* add_proofs();
  void add_proofs(const std::string& value);
  void add_proofs(std::string&& value);
  void add_proofs(const char* value);
  void add_proofs(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& proofs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_proofs();
  private:
  const std::string& _internal_proofs(int index) const;
  std::string* _internal_add_proofs();
  public:

  // bytes matcher_public_key = 3;
  void clear_matcher_public_key();
  const std::string& matcher_public_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_matcher_public_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_matcher_public_key();
  PROTOBUF_NODISCARD std::string* release_matcher_public_key();
  void set_allocated_matcher_public_key(std::string* matcher_public_key);
  private:
  const std::string& _internal_matcher_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_matcher_public_key(const std::string& value);
  std::string* _internal_mutable_matcher_public_key();
  public:

  // .vrp.AssetPair asset_pair = 4;
  bool has_asset_pair() const;
  private:
  bool _internal_has_asset_pair() const;
  public:
  void clear_asset_pair();
  const ::vrp::AssetPair& asset_pair() const;
  PROTOBUF_NODISCARD ::vrp::AssetPair* release_asset_pair();
  ::vrp::AssetPair* mutable_asset_pair();
  void set_allocated_asset_pair(::vrp::AssetPair* asset_pair);
  private:
  const ::vrp::AssetPair& _internal_asset_pair() const;
  ::vrp::AssetPair* _internal_mutable_asset_pair();
  public:
  void unsafe_arena_set_allocated_asset_pair(
      ::vrp::AssetPair* asset_pair);
  ::vrp::AssetPair* unsafe_arena_release_asset_pair();

  // .vrp.Amount matcher_fee = 10;
  bool has_matcher_fee() const;
  private:
  bool _internal_has_matcher_fee() const;
  public:
  void clear_matcher_fee();
  const ::vrp::Amount& matcher_fee() const;
  PROTOBUF_NODISCARD ::vrp::Amount* release_matcher_fee();
  ::vrp::Amount* mutable_matcher_fee();
  void set_allocated_matcher_fee(::vrp::Amount* matcher_fee);
  private:
  const ::vrp::Amount& _internal_matcher_fee() const;
  ::vrp::Amount* _internal_mutable_matcher_fee();
  public:
  void unsafe_arena_set_allocated_matcher_fee(
      ::vrp::Amount* matcher_fee);
  ::vrp::Amount* unsafe_arena_release_matcher_fee();

  // int64 chain_id = 1;
  void clear_chain_id();
  int64_t chain_id() const;
  void set_chain_id(int64_t value);
  private:
  int64_t _internal_chain_id() const;
  void _internal_set_chain_id(int64_t value);
  public:

  // int64 amount = 6;
  void clear_amount();
  int64_t amount() const;
  void set_amount(int64_t value);
  private:
  int64_t _internal_amount() const;
  void _internal_set_amount(int64_t value);
  public:

  // int64 price = 7;
  void clear_price();
  int64_t price() const;
  void set_price(int64_t value);
  private:
  int64_t _internal_price() const;
  void _internal_set_price(int64_t value);
  public:

  // int64 timestamp = 8;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // .vrp.Order.Side order_side = 5;
  void clear_order_side();
  ::vrp::Order_Side order_side() const;
  void set_order_side(::vrp::Order_Side value);
  private:
  ::vrp::Order_Side _internal_order_side() const;
  void _internal_set_order_side(::vrp::Order_Side value);
  public:

  // int32 version = 11;
  void clear_version();
  int32_t version() const;
  void set_version(int32_t value);
  private:
  int32_t _internal_version() const;
  void _internal_set_version(int32_t value);
  public:

  // int64 expiration = 9;
  void clear_expiration();
  int64_t expiration() const;
  void set_expiration(int64_t value);
  private:
  int64_t _internal_expiration() const;
  void _internal_set_expiration(int64_t value);
  public:

  // .vrp.Order.PriceMode price_mode = 14;
  void clear_price_mode();
  ::vrp::Order_PriceMode price_mode() const;
  void set_price_mode(::vrp::Order_PriceMode value);
  private:
  ::vrp::Order_PriceMode _internal_price_mode() const;
  void _internal_set_price_mode(::vrp::Order_PriceMode value);
  public:

  // bytes sender_public_key = 2;
  bool has_sender_public_key() const;
  private:
  bool _internal_has_sender_public_key() const;
  public:
  void clear_sender_public_key();
  const std::string& sender_public_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sender_public_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sender_public_key();
  PROTOBUF_NODISCARD std::string* release_sender_public_key();
  void set_allocated_sender_public_key(std::string* sender_public_key);
  private:
  const std::string& _internal_sender_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender_public_key(const std::string& value);
  std::string* _internal_mutable_sender_public_key();
  public:

  // bytes eip712_signature = 13;
  bool has_eip712_signature() const;
  private:
  bool _internal_has_eip712_signature() const;
  public:
  void clear_eip712_signature();
  const std::string& eip712_signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_eip712_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_eip712_signature();
  PROTOBUF_NODISCARD std::string* release_eip712_signature();
  void set_allocated_eip712_signature(std::string* eip712_signature);
  private:
  const std::string& _internal_eip712_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_eip712_signature(const std::string& value);
  std::string* _internal_mutable_eip712_signature();
  public:

  void clear_sender();
  SenderCase sender_case() const;
  // @@protoc_insertion_point(class_scope:vrp.Order)
 private:
  class _Internal;
  void set_has_sender_public_key();
  void set_has_eip712_signature();

  inline bool has_sender() const;
  inline void clear_has_sender();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> proofs_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr matcher_public_key_;
    ::vrp::AssetPair* asset_pair_;
    ::vrp::Amount* matcher_fee_;
    int64_t chain_id_;
    int64_t amount_;
    int64_t price_;
    int64_t timestamp_;
    int order_side_;
    int32_t version_;
    int64_t expiration_;
    int price_mode_;
    union SenderUnion {
      constexpr SenderUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_public_key_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr eip712_signature_;
    } sender_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vrp_2forder_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AssetPair

// bytes amount_asset_id = 1;
inline void AssetPair::clear_amount_asset_id() {
  _impl_.amount_asset_id_.ClearToEmpty();
}
inline const std::string& AssetPair::amount_asset_id() const {
  // @@protoc_insertion_point(field_get:vrp.AssetPair.amount_asset_id)
  return _internal_amount_asset_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AssetPair::set_amount_asset_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.amount_asset_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vrp.AssetPair.amount_asset_id)
}
inline std::string* AssetPair::mutable_amount_asset_id() {
  std::string* _s = _internal_mutable_amount_asset_id();
  // @@protoc_insertion_point(field_mutable:vrp.AssetPair.amount_asset_id)
  return _s;
}
inline const std::string& AssetPair::_internal_amount_asset_id() const {
  return _impl_.amount_asset_id_.Get();
}
inline void AssetPair::_internal_set_amount_asset_id(const std::string& value) {
  
  _impl_.amount_asset_id_.Set(value, GetArenaForAllocation());
}
inline std::string* AssetPair::_internal_mutable_amount_asset_id() {
  
  return _impl_.amount_asset_id_.Mutable(GetArenaForAllocation());
}
inline std::string* AssetPair::release_amount_asset_id() {
  // @@protoc_insertion_point(field_release:vrp.AssetPair.amount_asset_id)
  return _impl_.amount_asset_id_.Release();
}
inline void AssetPair::set_allocated_amount_asset_id(std::string* amount_asset_id) {
  if (amount_asset_id != nullptr) {
    
  } else {
    
  }
  _impl_.amount_asset_id_.SetAllocated(amount_asset_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.amount_asset_id_.IsDefault()) {
    _impl_.amount_asset_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vrp.AssetPair.amount_asset_id)
}

// bytes price_asset_id = 2;
inline void AssetPair::clear_price_asset_id() {
  _impl_.price_asset_id_.ClearToEmpty();
}
inline const std::string& AssetPair::price_asset_id() const {
  // @@protoc_insertion_point(field_get:vrp.AssetPair.price_asset_id)
  return _internal_price_asset_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AssetPair::set_price_asset_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.price_asset_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vrp.AssetPair.price_asset_id)
}
inline std::string* AssetPair::mutable_price_asset_id() {
  std::string* _s = _internal_mutable_price_asset_id();
  // @@protoc_insertion_point(field_mutable:vrp.AssetPair.price_asset_id)
  return _s;
}
inline const std::string& AssetPair::_internal_price_asset_id() const {
  return _impl_.price_asset_id_.Get();
}
inline void AssetPair::_internal_set_price_asset_id(const std::string& value) {
  
  _impl_.price_asset_id_.Set(value, GetArenaForAllocation());
}
inline std::string* AssetPair::_internal_mutable_price_asset_id() {
  
  return _impl_.price_asset_id_.Mutable(GetArenaForAllocation());
}
inline std::string* AssetPair::release_price_asset_id() {
  // @@protoc_insertion_point(field_release:vrp.AssetPair.price_asset_id)
  return _impl_.price_asset_id_.Release();
}
inline void AssetPair::set_allocated_price_asset_id(std::string* price_asset_id) {
  if (price_asset_id != nullptr) {
    
  } else {
    
  }
  _impl_.price_asset_id_.SetAllocated(price_asset_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.price_asset_id_.IsDefault()) {
    _impl_.price_asset_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vrp.AssetPair.price_asset_id)
}

// -------------------------------------------------------------------

// Order

// int64 chain_id = 1;
inline void Order::clear_chain_id() {
  _impl_.chain_id_ = int64_t{0};
}
inline int64_t Order::_internal_chain_id() const {
  return _impl_.chain_id_;
}
inline int64_t Order::chain_id() const {
  // @@protoc_insertion_point(field_get:vrp.Order.chain_id)
  return _internal_chain_id();
}
inline void Order::_internal_set_chain_id(int64_t value) {
  
  _impl_.chain_id_ = value;
}
inline void Order::set_chain_id(int64_t value) {
  _internal_set_chain_id(value);
  // @@protoc_insertion_point(field_set:vrp.Order.chain_id)
}

// bytes matcher_public_key = 3;
inline void Order::clear_matcher_public_key() {
  _impl_.matcher_public_key_.ClearToEmpty();
}
inline const std::string& Order::matcher_public_key() const {
  // @@protoc_insertion_point(field_get:vrp.Order.matcher_public_key)
  return _internal_matcher_public_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Order::set_matcher_public_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.matcher_public_key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vrp.Order.matcher_public_key)
}
inline std::string* Order::mutable_matcher_public_key() {
  std::string* _s = _internal_mutable_matcher_public_key();
  // @@protoc_insertion_point(field_mutable:vrp.Order.matcher_public_key)
  return _s;
}
inline const std::string& Order::_internal_matcher_public_key() const {
  return _impl_.matcher_public_key_.Get();
}
inline void Order::_internal_set_matcher_public_key(const std::string& value) {
  
  _impl_.matcher_public_key_.Set(value, GetArenaForAllocation());
}
inline std::string* Order::_internal_mutable_matcher_public_key() {
  
  return _impl_.matcher_public_key_.Mutable(GetArenaForAllocation());
}
inline std::string* Order::release_matcher_public_key() {
  // @@protoc_insertion_point(field_release:vrp.Order.matcher_public_key)
  return _impl_.matcher_public_key_.Release();
}
inline void Order::set_allocated_matcher_public_key(std::string* matcher_public_key) {
  if (matcher_public_key != nullptr) {
    
  } else {
    
  }
  _impl_.matcher_public_key_.SetAllocated(matcher_public_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.matcher_public_key_.IsDefault()) {
    _impl_.matcher_public_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vrp.Order.matcher_public_key)
}

// .vrp.AssetPair asset_pair = 4;
inline bool Order::_internal_has_asset_pair() const {
  return this != internal_default_instance() && _impl_.asset_pair_ != nullptr;
}
inline bool Order::has_asset_pair() const {
  return _internal_has_asset_pair();
}
inline void Order::clear_asset_pair() {
  if (GetArenaForAllocation() == nullptr && _impl_.asset_pair_ != nullptr) {
    delete _impl_.asset_pair_;
  }
  _impl_.asset_pair_ = nullptr;
}
inline const ::vrp::AssetPair& Order::_internal_asset_pair() const {
  const ::vrp::AssetPair* p = _impl_.asset_pair_;
  return p != nullptr ? *p : reinterpret_cast<const ::vrp::AssetPair&>(
      ::vrp::_AssetPair_default_instance_);
}
inline const ::vrp::AssetPair& Order::asset_pair() const {
  // @@protoc_insertion_point(field_get:vrp.Order.asset_pair)
  return _internal_asset_pair();
}
inline void Order::unsafe_arena_set_allocated_asset_pair(
    ::vrp::AssetPair* asset_pair) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.asset_pair_);
  }
  _impl_.asset_pair_ = asset_pair;
  if (asset_pair) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vrp.Order.asset_pair)
}
inline ::vrp::AssetPair* Order::release_asset_pair() {
  
  ::vrp::AssetPair* temp = _impl_.asset_pair_;
  _impl_.asset_pair_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vrp::AssetPair* Order::unsafe_arena_release_asset_pair() {
  // @@protoc_insertion_point(field_release:vrp.Order.asset_pair)
  
  ::vrp::AssetPair* temp = _impl_.asset_pair_;
  _impl_.asset_pair_ = nullptr;
  return temp;
}
inline ::vrp::AssetPair* Order::_internal_mutable_asset_pair() {
  
  if (_impl_.asset_pair_ == nullptr) {
    auto* p = CreateMaybeMessage<::vrp::AssetPair>(GetArenaForAllocation());
    _impl_.asset_pair_ = p;
  }
  return _impl_.asset_pair_;
}
inline ::vrp::AssetPair* Order::mutable_asset_pair() {
  ::vrp::AssetPair* _msg = _internal_mutable_asset_pair();
  // @@protoc_insertion_point(field_mutable:vrp.Order.asset_pair)
  return _msg;
}
inline void Order::set_allocated_asset_pair(::vrp::AssetPair* asset_pair) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.asset_pair_;
  }
  if (asset_pair) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(asset_pair);
    if (message_arena != submessage_arena) {
      asset_pair = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, asset_pair, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.asset_pair_ = asset_pair;
  // @@protoc_insertion_point(field_set_allocated:vrp.Order.asset_pair)
}

// .vrp.Order.Side order_side = 5;
inline void Order::clear_order_side() {
  _impl_.order_side_ = 0;
}
inline ::vrp::Order_Side Order::_internal_order_side() const {
  return static_cast< ::vrp::Order_Side >(_impl_.order_side_);
}
inline ::vrp::Order_Side Order::order_side() const {
  // @@protoc_insertion_point(field_get:vrp.Order.order_side)
  return _internal_order_side();
}
inline void Order::_internal_set_order_side(::vrp::Order_Side value) {
  
  _impl_.order_side_ = value;
}
inline void Order::set_order_side(::vrp::Order_Side value) {
  _internal_set_order_side(value);
  // @@protoc_insertion_point(field_set:vrp.Order.order_side)
}

// int64 amount = 6;
inline void Order::clear_amount() {
  _impl_.amount_ = int64_t{0};
}
inline int64_t Order::_internal_amount() const {
  return _impl_.amount_;
}
inline int64_t Order::amount() const {
  // @@protoc_insertion_point(field_get:vrp.Order.amount)
  return _internal_amount();
}
inline void Order::_internal_set_amount(int64_t value) {
  
  _impl_.amount_ = value;
}
inline void Order::set_amount(int64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:vrp.Order.amount)
}

// int64 price = 7;
inline void Order::clear_price() {
  _impl_.price_ = int64_t{0};
}
inline int64_t Order::_internal_price() const {
  return _impl_.price_;
}
inline int64_t Order::price() const {
  // @@protoc_insertion_point(field_get:vrp.Order.price)
  return _internal_price();
}
inline void Order::_internal_set_price(int64_t value) {
  
  _impl_.price_ = value;
}
inline void Order::set_price(int64_t value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:vrp.Order.price)
}

// int64 timestamp = 8;
inline void Order::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t Order::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t Order::timestamp() const {
  // @@protoc_insertion_point(field_get:vrp.Order.timestamp)
  return _internal_timestamp();
}
inline void Order::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void Order::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:vrp.Order.timestamp)
}

// int64 expiration = 9;
inline void Order::clear_expiration() {
  _impl_.expiration_ = int64_t{0};
}
inline int64_t Order::_internal_expiration() const {
  return _impl_.expiration_;
}
inline int64_t Order::expiration() const {
  // @@protoc_insertion_point(field_get:vrp.Order.expiration)
  return _internal_expiration();
}
inline void Order::_internal_set_expiration(int64_t value) {
  
  _impl_.expiration_ = value;
}
inline void Order::set_expiration(int64_t value) {
  _internal_set_expiration(value);
  // @@protoc_insertion_point(field_set:vrp.Order.expiration)
}

// .vrp.Amount matcher_fee = 10;
inline bool Order::_internal_has_matcher_fee() const {
  return this != internal_default_instance() && _impl_.matcher_fee_ != nullptr;
}
inline bool Order::has_matcher_fee() const {
  return _internal_has_matcher_fee();
}
inline const ::vrp::Amount& Order::_internal_matcher_fee() const {
  const ::vrp::Amount* p = _impl_.matcher_fee_;
  return p != nullptr ? *p : reinterpret_cast<const ::vrp::Amount&>(
      ::vrp::_Amount_default_instance_);
}
inline const ::vrp::Amount& Order::matcher_fee() const {
  // @@protoc_insertion_point(field_get:vrp.Order.matcher_fee)
  return _internal_matcher_fee();
}
inline void Order::unsafe_arena_set_allocated_matcher_fee(
    ::vrp::Amount* matcher_fee) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.matcher_fee_);
  }
  _impl_.matcher_fee_ = matcher_fee;
  if (matcher_fee) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vrp.Order.matcher_fee)
}
inline ::vrp::Amount* Order::release_matcher_fee() {
  
  ::vrp::Amount* temp = _impl_.matcher_fee_;
  _impl_.matcher_fee_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vrp::Amount* Order::unsafe_arena_release_matcher_fee() {
  // @@protoc_insertion_point(field_release:vrp.Order.matcher_fee)
  
  ::vrp::Amount* temp = _impl_.matcher_fee_;
  _impl_.matcher_fee_ = nullptr;
  return temp;
}
inline ::vrp::Amount* Order::_internal_mutable_matcher_fee() {
  
  if (_impl_.matcher_fee_ == nullptr) {
    auto* p = CreateMaybeMessage<::vrp::Amount>(GetArenaForAllocation());
    _impl_.matcher_fee_ = p;
  }
  return _impl_.matcher_fee_;
}
inline ::vrp::Amount* Order::mutable_matcher_fee() {
  ::vrp::Amount* _msg = _internal_mutable_matcher_fee();
  // @@protoc_insertion_point(field_mutable:vrp.Order.matcher_fee)
  return _msg;
}
inline void Order::set_allocated_matcher_fee(::vrp::Amount* matcher_fee) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.matcher_fee_);
  }
  if (matcher_fee) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(matcher_fee));
    if (message_arena != submessage_arena) {
      matcher_fee = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, matcher_fee, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.matcher_fee_ = matcher_fee;
  // @@protoc_insertion_point(field_set_allocated:vrp.Order.matcher_fee)
}

// int32 version = 11;
inline void Order::clear_version() {
  _impl_.version_ = 0;
}
inline int32_t Order::_internal_version() const {
  return _impl_.version_;
}
inline int32_t Order::version() const {
  // @@protoc_insertion_point(field_get:vrp.Order.version)
  return _internal_version();
}
inline void Order::_internal_set_version(int32_t value) {
  
  _impl_.version_ = value;
}
inline void Order::set_version(int32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:vrp.Order.version)
}

// repeated bytes proofs = 12;
inline int Order::_internal_proofs_size() const {
  return _impl_.proofs_.size();
}
inline int Order::proofs_size() const {
  return _internal_proofs_size();
}
inline void Order::clear_proofs() {
  _impl_.proofs_.Clear();
}
inline std::string* Order::add_proofs() {
  std::string* _s = _internal_add_proofs();
  // @@protoc_insertion_point(field_add_mutable:vrp.Order.proofs)
  return _s;
}
inline const std::string& Order::_internal_proofs(int index) const {
  return _impl_.proofs_.Get(index);
}
inline const std::string& Order::proofs(int index) const {
  // @@protoc_insertion_point(field_get:vrp.Order.proofs)
  return _internal_proofs(index);
}
inline std::string* Order::mutable_proofs(int index) {
  // @@protoc_insertion_point(field_mutable:vrp.Order.proofs)
  return _impl_.proofs_.Mutable(index);
}
inline void Order::set_proofs(int index, const std::string& value) {
  _impl_.proofs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:vrp.Order.proofs)
}
inline void Order::set_proofs(int index, std::string&& value) {
  _impl_.proofs_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:vrp.Order.proofs)
}
inline void Order::set_proofs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.proofs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:vrp.Order.proofs)
}
inline void Order::set_proofs(int index, const void* value, size_t size) {
  _impl_.proofs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:vrp.Order.proofs)
}
inline std::string* Order::_internal_add_proofs() {
  return _impl_.proofs_.Add();
}
inline void Order::add_proofs(const std::string& value) {
  _impl_.proofs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:vrp.Order.proofs)
}
inline void Order::add_proofs(std::string&& value) {
  _impl_.proofs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:vrp.Order.proofs)
}
inline void Order::add_proofs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.proofs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:vrp.Order.proofs)
}
inline void Order::add_proofs(const void* value, size_t size) {
  _impl_.proofs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:vrp.Order.proofs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Order::proofs() const {
  // @@protoc_insertion_point(field_list:vrp.Order.proofs)
  return _impl_.proofs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Order::mutable_proofs() {
  // @@protoc_insertion_point(field_mutable_list:vrp.Order.proofs)
  return &_impl_.proofs_;
}

// .vrp.Order.PriceMode price_mode = 14;
inline void Order::clear_price_mode() {
  _impl_.price_mode_ = 0;
}
inline ::vrp::Order_PriceMode Order::_internal_price_mode() const {
  return static_cast< ::vrp::Order_PriceMode >(_impl_.price_mode_);
}
inline ::vrp::Order_PriceMode Order::price_mode() const {
  // @@protoc_insertion_point(field_get:vrp.Order.price_mode)
  return _internal_price_mode();
}
inline void Order::_internal_set_price_mode(::vrp::Order_PriceMode value) {
  
  _impl_.price_mode_ = value;
}
inline void Order::set_price_mode(::vrp::Order_PriceMode value) {
  _internal_set_price_mode(value);
  // @@protoc_insertion_point(field_set:vrp.Order.price_mode)
}

// bytes sender_public_key = 2;
inline bool Order::_internal_has_sender_public_key() const {
  return sender_case() == kSenderPublicKey;
}
inline bool Order::has_sender_public_key() const {
  return _internal_has_sender_public_key();
}
inline void Order::set_has_sender_public_key() {
  _impl_._oneof_case_[0] = kSenderPublicKey;
}
inline void Order::clear_sender_public_key() {
  if (_internal_has_sender_public_key()) {
    _impl_.sender_.sender_public_key_.Destroy();
    clear_has_sender();
  }
}
inline const std::string& Order::sender_public_key() const {
  // @@protoc_insertion_point(field_get:vrp.Order.sender_public_key)
  return _internal_sender_public_key();
}
template <typename ArgT0, typename... ArgT>
inline void Order::set_sender_public_key(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_sender_public_key()) {
    clear_sender();
    set_has_sender_public_key();
    _impl_.sender_.sender_public_key_.InitDefault();
  }
  _impl_.sender_.sender_public_key_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vrp.Order.sender_public_key)
}
inline std::string* Order::mutable_sender_public_key() {
  std::string* _s = _internal_mutable_sender_public_key();
  // @@protoc_insertion_point(field_mutable:vrp.Order.sender_public_key)
  return _s;
}
inline const std::string& Order::_internal_sender_public_key() const {
  if (_internal_has_sender_public_key()) {
    return _impl_.sender_.sender_public_key_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Order::_internal_set_sender_public_key(const std::string& value) {
  if (!_internal_has_sender_public_key()) {
    clear_sender();
    set_has_sender_public_key();
    _impl_.sender_.sender_public_key_.InitDefault();
  }
  _impl_.sender_.sender_public_key_.Set(value, GetArenaForAllocation());
}
inline std::string* Order::_internal_mutable_sender_public_key() {
  if (!_internal_has_sender_public_key()) {
    clear_sender();
    set_has_sender_public_key();
    _impl_.sender_.sender_public_key_.InitDefault();
  }
  return _impl_.sender_.sender_public_key_.Mutable(      GetArenaForAllocation());
}
inline std::string* Order::release_sender_public_key() {
  // @@protoc_insertion_point(field_release:vrp.Order.sender_public_key)
  if (_internal_has_sender_public_key()) {
    clear_has_sender();
    return _impl_.sender_.sender_public_key_.Release();
  } else {
    return nullptr;
  }
}
inline void Order::set_allocated_sender_public_key(std::string* sender_public_key) {
  if (has_sender()) {
    clear_sender();
  }
  if (sender_public_key != nullptr) {
    set_has_sender_public_key();
    _impl_.sender_.sender_public_key_.InitAllocated(sender_public_key, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:vrp.Order.sender_public_key)
}

// bytes eip712_signature = 13;
inline bool Order::_internal_has_eip712_signature() const {
  return sender_case() == kEip712Signature;
}
inline bool Order::has_eip712_signature() const {
  return _internal_has_eip712_signature();
}
inline void Order::set_has_eip712_signature() {
  _impl_._oneof_case_[0] = kEip712Signature;
}
inline void Order::clear_eip712_signature() {
  if (_internal_has_eip712_signature()) {
    _impl_.sender_.eip712_signature_.Destroy();
    clear_has_sender();
  }
}
inline const std::string& Order::eip712_signature() const {
  // @@protoc_insertion_point(field_get:vrp.Order.eip712_signature)
  return _internal_eip712_signature();
}
template <typename ArgT0, typename... ArgT>
inline void Order::set_eip712_signature(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_eip712_signature()) {
    clear_sender();
    set_has_eip712_signature();
    _impl_.sender_.eip712_signature_.InitDefault();
  }
  _impl_.sender_.eip712_signature_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vrp.Order.eip712_signature)
}
inline std::string* Order::mutable_eip712_signature() {
  std::string* _s = _internal_mutable_eip712_signature();
  // @@protoc_insertion_point(field_mutable:vrp.Order.eip712_signature)
  return _s;
}
inline const std::string& Order::_internal_eip712_signature() const {
  if (_internal_has_eip712_signature()) {
    return _impl_.sender_.eip712_signature_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Order::_internal_set_eip712_signature(const std::string& value) {
  if (!_internal_has_eip712_signature()) {
    clear_sender();
    set_has_eip712_signature();
    _impl_.sender_.eip712_signature_.InitDefault();
  }
  _impl_.sender_.eip712_signature_.Set(value, GetArenaForAllocation());
}
inline std::string* Order::_internal_mutable_eip712_signature() {
  if (!_internal_has_eip712_signature()) {
    clear_sender();
    set_has_eip712_signature();
    _impl_.sender_.eip712_signature_.InitDefault();
  }
  return _impl_.sender_.eip712_signature_.Mutable(      GetArenaForAllocation());
}
inline std::string* Order::release_eip712_signature() {
  // @@protoc_insertion_point(field_release:vrp.Order.eip712_signature)
  if (_internal_has_eip712_signature()) {
    clear_has_sender();
    return _impl_.sender_.eip712_signature_.Release();
  } else {
    return nullptr;
  }
}
inline void Order::set_allocated_eip712_signature(std::string* eip712_signature) {
  if (has_sender()) {
    clear_sender();
  }
  if (eip712_signature != nullptr) {
    set_has_eip712_signature();
    _impl_.sender_.eip712_signature_.InitAllocated(eip712_signature, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:vrp.Order.eip712_signature)
}

inline bool Order::has_sender() const {
  return sender_case() != SENDER_NOT_SET;
}
inline void Order::clear_has_sender() {
  _impl_._oneof_case_[0] = SENDER_NOT_SET;
}
inline Order::SenderCase Order::sender_case() const {
  return Order::SenderCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace vrp

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::vrp::Order_Side> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vrp::Order_Side>() {
  return ::vrp::Order_Side_descriptor();
}
template <> struct is_proto_enum< ::vrp::Order_PriceMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vrp::Order_PriceMode>() {
  return ::vrp::Order_PriceMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vrp_2forder_2eproto
