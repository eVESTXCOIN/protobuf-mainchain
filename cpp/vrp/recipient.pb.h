// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vrp/recipient.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vrp_2frecipient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vrp_2frecipient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021007 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vrp_2frecipient_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vrp_2frecipient_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vrp_2frecipient_2eproto;
namespace vrp {
class Recipient;
struct RecipientDefaultTypeInternal;
extern RecipientDefaultTypeInternal _Recipient_default_instance_;
}  // namespace vrp
PROTOBUF_NAMESPACE_OPEN
template<> ::vrp::Recipient* Arena::CreateMaybeMessage<::vrp::Recipient>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace vrp {

// ===================================================================

class Recipient final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vrp.Recipient) */ {
 public:
  inline Recipient() : Recipient(nullptr) {}
  ~Recipient() override;
  explicit PROTOBUF_CONSTEXPR Recipient(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Recipient(const Recipient& from);
  Recipient(Recipient&& from) noexcept
    : Recipient() {
    *this = ::std::move(from);
  }

  inline Recipient& operator=(const Recipient& from) {
    CopyFrom(from);
    return *this;
  }
  inline Recipient& operator=(Recipient&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Recipient& default_instance() {
    return *internal_default_instance();
  }
  enum RecipientCase {
    kPublicKeyHash = 1,
    kAlias = 2,
    RECIPIENT_NOT_SET = 0,
  };

  static inline const Recipient* internal_default_instance() {
    return reinterpret_cast<const Recipient*>(
               &_Recipient_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Recipient& a, Recipient& b) {
    a.Swap(&b);
  }
  inline void Swap(Recipient* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Recipient* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Recipient* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Recipient>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Recipient& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Recipient& from) {
    Recipient::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Recipient* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vrp.Recipient";
  }
  protected:
  explicit Recipient(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeyHashFieldNumber = 1,
    kAliasFieldNumber = 2,
  };
  // bytes public_key_hash = 1;
  bool has_public_key_hash() const;
  private:
  bool _internal_has_public_key_hash() const;
  public:
  void clear_public_key_hash();
  const std::string& public_key_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_key_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_key_hash();
  PROTOBUF_NODISCARD std::string* release_public_key_hash();
  void set_allocated_public_key_hash(std::string* public_key_hash);
  private:
  const std::string& _internal_public_key_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_key_hash(const std::string& value);
  std::string* _internal_mutable_public_key_hash();
  public:

  // string alias = 2;
  bool has_alias() const;
  private:
  bool _internal_has_alias() const;
  public:
  void clear_alias();
  const std::string& alias() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_alias(ArgT0&& arg0, ArgT... args);
  std::string* mutable_alias();
  PROTOBUF_NODISCARD std::string* release_alias();
  void set_allocated_alias(std::string* alias);
  private:
  const std::string& _internal_alias() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alias(const std::string& value);
  std::string* _internal_mutable_alias();
  public:

  void clear_recipient();
  RecipientCase recipient_case() const;
  // @@protoc_insertion_point(class_scope:vrp.Recipient)
 private:
  class _Internal;
  void set_has_public_key_hash();
  void set_has_alias();

  inline bool has_recipient() const;
  inline void clear_has_recipient();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union RecipientUnion {
      constexpr RecipientUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_hash_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alias_;
    } recipient_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vrp_2frecipient_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Recipient

// bytes public_key_hash = 1;
inline bool Recipient::_internal_has_public_key_hash() const {
  return recipient_case() == kPublicKeyHash;
}
inline bool Recipient::has_public_key_hash() const {
  return _internal_has_public_key_hash();
}
inline void Recipient::set_has_public_key_hash() {
  _impl_._oneof_case_[0] = kPublicKeyHash;
}
inline void Recipient::clear_public_key_hash() {
  if (_internal_has_public_key_hash()) {
    _impl_.recipient_.public_key_hash_.Destroy();
    clear_has_recipient();
  }
}
inline const std::string& Recipient::public_key_hash() const {
  // @@protoc_insertion_point(field_get:vrp.Recipient.public_key_hash)
  return _internal_public_key_hash();
}
template <typename ArgT0, typename... ArgT>
inline void Recipient::set_public_key_hash(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_public_key_hash()) {
    clear_recipient();
    set_has_public_key_hash();
    _impl_.recipient_.public_key_hash_.InitDefault();
  }
  _impl_.recipient_.public_key_hash_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vrp.Recipient.public_key_hash)
}
inline std::string* Recipient::mutable_public_key_hash() {
  std::string* _s = _internal_mutable_public_key_hash();
  // @@protoc_insertion_point(field_mutable:vrp.Recipient.public_key_hash)
  return _s;
}
inline const std::string& Recipient::_internal_public_key_hash() const {
  if (_internal_has_public_key_hash()) {
    return _impl_.recipient_.public_key_hash_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Recipient::_internal_set_public_key_hash(const std::string& value) {
  if (!_internal_has_public_key_hash()) {
    clear_recipient();
    set_has_public_key_hash();
    _impl_.recipient_.public_key_hash_.InitDefault();
  }
  _impl_.recipient_.public_key_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* Recipient::_internal_mutable_public_key_hash() {
  if (!_internal_has_public_key_hash()) {
    clear_recipient();
    set_has_public_key_hash();
    _impl_.recipient_.public_key_hash_.InitDefault();
  }
  return _impl_.recipient_.public_key_hash_.Mutable(      GetArenaForAllocation());
}
inline std::string* Recipient::release_public_key_hash() {
  // @@protoc_insertion_point(field_release:vrp.Recipient.public_key_hash)
  if (_internal_has_public_key_hash()) {
    clear_has_recipient();
    return _impl_.recipient_.public_key_hash_.Release();
  } else {
    return nullptr;
  }
}
inline void Recipient::set_allocated_public_key_hash(std::string* public_key_hash) {
  if (has_recipient()) {
    clear_recipient();
  }
  if (public_key_hash != nullptr) {
    set_has_public_key_hash();
    _impl_.recipient_.public_key_hash_.InitAllocated(public_key_hash, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:vrp.Recipient.public_key_hash)
}

// string alias = 2;
inline bool Recipient::_internal_has_alias() const {
  return recipient_case() == kAlias;
}
inline bool Recipient::has_alias() const {
  return _internal_has_alias();
}
inline void Recipient::set_has_alias() {
  _impl_._oneof_case_[0] = kAlias;
}
inline void Recipient::clear_alias() {
  if (_internal_has_alias()) {
    _impl_.recipient_.alias_.Destroy();
    clear_has_recipient();
  }
}
inline const std::string& Recipient::alias() const {
  // @@protoc_insertion_point(field_get:vrp.Recipient.alias)
  return _internal_alias();
}
template <typename ArgT0, typename... ArgT>
inline void Recipient::set_alias(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_alias()) {
    clear_recipient();
    set_has_alias();
    _impl_.recipient_.alias_.InitDefault();
  }
  _impl_.recipient_.alias_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vrp.Recipient.alias)
}
inline std::string* Recipient::mutable_alias() {
  std::string* _s = _internal_mutable_alias();
  // @@protoc_insertion_point(field_mutable:vrp.Recipient.alias)
  return _s;
}
inline const std::string& Recipient::_internal_alias() const {
  if (_internal_has_alias()) {
    return _impl_.recipient_.alias_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Recipient::_internal_set_alias(const std::string& value) {
  if (!_internal_has_alias()) {
    clear_recipient();
    set_has_alias();
    _impl_.recipient_.alias_.InitDefault();
  }
  _impl_.recipient_.alias_.Set(value, GetArenaForAllocation());
}
inline std::string* Recipient::_internal_mutable_alias() {
  if (!_internal_has_alias()) {
    clear_recipient();
    set_has_alias();
    _impl_.recipient_.alias_.InitDefault();
  }
  return _impl_.recipient_.alias_.Mutable(      GetArenaForAllocation());
}
inline std::string* Recipient::release_alias() {
  // @@protoc_insertion_point(field_release:vrp.Recipient.alias)
  if (_internal_has_alias()) {
    clear_has_recipient();
    return _impl_.recipient_.alias_.Release();
  } else {
    return nullptr;
  }
}
inline void Recipient::set_allocated_alias(std::string* alias) {
  if (has_recipient()) {
    clear_recipient();
  }
  if (alias != nullptr) {
    set_has_alias();
    _impl_.recipient_.alias_.InitAllocated(alias, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:vrp.Recipient.alias)
}

inline bool Recipient::has_recipient() const {
  return recipient_case() != RECIPIENT_NOT_SET;
}
inline void Recipient::clear_has_recipient() {
  _impl_._oneof_case_[0] = RECIPIENT_NOT_SET;
}
inline Recipient::RecipientCase Recipient::recipient_case() const {
  return Recipient::RecipientCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace vrp

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vrp_2frecipient_2eproto
