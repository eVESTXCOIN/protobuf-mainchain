// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vrp/block.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vrp_2fblock_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vrp_2fblock_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021007 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "vrp/transaction.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vrp_2fblock_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vrp_2fblock_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vrp_2fblock_2eproto;
namespace vrp {
class Block;
struct BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
class Block_Header;
struct Block_HeaderDefaultTypeInternal;
extern Block_HeaderDefaultTypeInternal _Block_Header_default_instance_;
class MicroBlock;
struct MicroBlockDefaultTypeInternal;
extern MicroBlockDefaultTypeInternal _MicroBlock_default_instance_;
class SignedMicroBlock;
struct SignedMicroBlockDefaultTypeInternal;
extern SignedMicroBlockDefaultTypeInternal _SignedMicroBlock_default_instance_;
}  // namespace vrp
PROTOBUF_NAMESPACE_OPEN
template<> ::vrp::Block* Arena::CreateMaybeMessage<::vrp::Block>(Arena*);
template<> ::vrp::Block_Header* Arena::CreateMaybeMessage<::vrp::Block_Header>(Arena*);
template<> ::vrp::MicroBlock* Arena::CreateMaybeMessage<::vrp::MicroBlock>(Arena*);
template<> ::vrp::SignedMicroBlock* Arena::CreateMaybeMessage<::vrp::SignedMicroBlock>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace vrp {

// ===================================================================

class Block_Header final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vrp.Block.Header) */ {
 public:
  inline Block_Header() : Block_Header(nullptr) {}
  ~Block_Header() override;
  explicit PROTOBUF_CONSTEXPR Block_Header(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Block_Header(const Block_Header& from);
  Block_Header(Block_Header&& from) noexcept
    : Block_Header() {
    *this = ::std::move(from);
  }

  inline Block_Header& operator=(const Block_Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Block_Header& operator=(Block_Header&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Block_Header& default_instance() {
    return *internal_default_instance();
  }
  static inline const Block_Header* internal_default_instance() {
    return reinterpret_cast<const Block_Header*>(
               &_Block_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Block_Header& a, Block_Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Block_Header* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Block_Header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Block_Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Block_Header>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Block_Header& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Block_Header& from) {
    Block_Header::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block_Header* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vrp.Block.Header";
  }
  protected:
  explicit Block_Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeatureVotesFieldNumber = 5,
    kReferenceFieldNumber = 2,
    kGenerationSignatureFieldNumber = 4,
    kGeneratorFieldNumber = 8,
    kTransactionsRootFieldNumber = 11,
    kBaseTargetFieldNumber = 3,
    kChainIdFieldNumber = 1,
    kVersionFieldNumber = 7,
    kTimestampFieldNumber = 6,
    kRewardVoteFieldNumber = 9,
    kRewardBurnedFieldNumber = 10,
  };
  // repeated uint32 feature_votes = 5;
  int feature_votes_size() const;
  private:
  int _internal_feature_votes_size() const;
  public:
  void clear_feature_votes();
  private:
  uint32_t _internal_feature_votes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_feature_votes() const;
  void _internal_add_feature_votes(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_feature_votes();
  public:
  uint32_t feature_votes(int index) const;
  void set_feature_votes(int index, uint32_t value);
  void add_feature_votes(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      feature_votes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_feature_votes();

  // bytes reference = 2;
  void clear_reference();
  const std::string& reference() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reference(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reference();
  PROTOBUF_NODISCARD std::string* release_reference();
  void set_allocated_reference(std::string* reference);
  private:
  const std::string& _internal_reference() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reference(const std::string& value);
  std::string* _internal_mutable_reference();
  public:

  // bytes generation_signature = 4;
  void clear_generation_signature();
  const std::string& generation_signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_generation_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_generation_signature();
  PROTOBUF_NODISCARD std::string* release_generation_signature();
  void set_allocated_generation_signature(std::string* generation_signature);
  private:
  const std::string& _internal_generation_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_generation_signature(const std::string& value);
  std::string* _internal_mutable_generation_signature();
  public:

  // bytes generator = 8;
  void clear_generator();
  const std::string& generator() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_generator(ArgT0&& arg0, ArgT... args);
  std::string* mutable_generator();
  PROTOBUF_NODISCARD std::string* release_generator();
  void set_allocated_generator(std::string* generator);
  private:
  const std::string& _internal_generator() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_generator(const std::string& value);
  std::string* _internal_mutable_generator();
  public:

  // bytes transactions_root = 11;
  void clear_transactions_root();
  const std::string& transactions_root() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transactions_root(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transactions_root();
  PROTOBUF_NODISCARD std::string* release_transactions_root();
  void set_allocated_transactions_root(std::string* transactions_root);
  private:
  const std::string& _internal_transactions_root() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transactions_root(const std::string& value);
  std::string* _internal_mutable_transactions_root();
  public:

  // int64 base_target = 3;
  void clear_base_target();
  int64_t base_target() const;
  void set_base_target(int64_t value);
  private:
  int64_t _internal_base_target() const;
  void _internal_set_base_target(int64_t value);
  public:

  // int32 chain_id = 1;
  void clear_chain_id();
  int32_t chain_id() const;
  void set_chain_id(int32_t value);
  private:
  int32_t _internal_chain_id() const;
  void _internal_set_chain_id(int32_t value);
  public:

  // int32 version = 7;
  void clear_version();
  int32_t version() const;
  void set_version(int32_t value);
  private:
  int32_t _internal_version() const;
  void _internal_set_version(int32_t value);
  public:

  // int64 timestamp = 6;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // int64 reward_vote = 9;
  void clear_reward_vote();
  int64_t reward_vote() const;
  void set_reward_vote(int64_t value);
  private:
  int64_t _internal_reward_vote() const;
  void _internal_set_reward_vote(int64_t value);
  public:

  // int64 reward_burned = 10;
  void clear_reward_burned();
  int64_t reward_burned() const;
  void set_reward_burned(int64_t value);
  private:
  int64_t _internal_reward_burned() const;
  void _internal_set_reward_burned(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:vrp.Block.Header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > feature_votes_;
    mutable std::atomic<int> _feature_votes_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reference_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr generation_signature_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr generator_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transactions_root_;
    int64_t base_target_;
    int32_t chain_id_;
    int32_t version_;
    int64_t timestamp_;
    int64_t reward_vote_;
    int64_t reward_burned_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vrp_2fblock_2eproto;
};
// -------------------------------------------------------------------

class Block final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vrp.Block) */ {
 public:
  inline Block() : Block(nullptr) {}
  ~Block() override;
  explicit PROTOBUF_CONSTEXPR Block(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Block(const Block& from);
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  inline Block& operator=(Block&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Block& default_instance() {
    return *internal_default_instance();
  }
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }
  inline void Swap(Block* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Block* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Block* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Block>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Block& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Block& from) {
    Block::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vrp.Block";
  }
  protected:
  explicit Block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Block_Header Header;

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionsFieldNumber = 3,
    kSignatureFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .vrp.SignedTransaction transactions = 3;
  int transactions_size() const;
  private:
  int _internal_transactions_size() const;
  public:
  void clear_transactions();
  ::vrp::SignedTransaction* mutable_transactions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vrp::SignedTransaction >*
      mutable_transactions();
  private:
  const ::vrp::SignedTransaction& _internal_transactions(int index) const;
  ::vrp::SignedTransaction* _internal_add_transactions();
  public:
  const ::vrp::SignedTransaction& transactions(int index) const;
  ::vrp::SignedTransaction* add_transactions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vrp::SignedTransaction >&
      transactions() const;

  // bytes signature = 2;
  void clear_signature();
  const std::string& signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // .vrp.Block.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::vrp::Block_Header& header() const;
  PROTOBUF_NODISCARD ::vrp::Block_Header* release_header();
  ::vrp::Block_Header* mutable_header();
  void set_allocated_header(::vrp::Block_Header* header);
  private:
  const ::vrp::Block_Header& _internal_header() const;
  ::vrp::Block_Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::vrp::Block_Header* header);
  ::vrp::Block_Header* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:vrp.Block)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vrp::SignedTransaction > transactions_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
    ::vrp::Block_Header* header_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vrp_2fblock_2eproto;
};
// -------------------------------------------------------------------

class MicroBlock final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vrp.MicroBlock) */ {
 public:
  inline MicroBlock() : MicroBlock(nullptr) {}
  ~MicroBlock() override;
  explicit PROTOBUF_CONSTEXPR MicroBlock(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MicroBlock(const MicroBlock& from);
  MicroBlock(MicroBlock&& from) noexcept
    : MicroBlock() {
    *this = ::std::move(from);
  }

  inline MicroBlock& operator=(const MicroBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline MicroBlock& operator=(MicroBlock&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MicroBlock& default_instance() {
    return *internal_default_instance();
  }
  static inline const MicroBlock* internal_default_instance() {
    return reinterpret_cast<const MicroBlock*>(
               &_MicroBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MicroBlock& a, MicroBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(MicroBlock* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MicroBlock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MicroBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MicroBlock>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MicroBlock& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MicroBlock& from) {
    MicroBlock::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MicroBlock* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vrp.MicroBlock";
  }
  protected:
  explicit MicroBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionsFieldNumber = 5,
    kReferenceFieldNumber = 2,
    kUpdatedBlockSignatureFieldNumber = 3,
    kSenderPublicKeyFieldNumber = 4,
    kVersionFieldNumber = 1,
  };
  // repeated .vrp.SignedTransaction transactions = 5;
  int transactions_size() const;
  private:
  int _internal_transactions_size() const;
  public:
  void clear_transactions();
  ::vrp::SignedTransaction* mutable_transactions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vrp::SignedTransaction >*
      mutable_transactions();
  private:
  const ::vrp::SignedTransaction& _internal_transactions(int index) const;
  ::vrp::SignedTransaction* _internal_add_transactions();
  public:
  const ::vrp::SignedTransaction& transactions(int index) const;
  ::vrp::SignedTransaction* add_transactions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vrp::SignedTransaction >&
      transactions() const;

  // bytes reference = 2;
  void clear_reference();
  const std::string& reference() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reference(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reference();
  PROTOBUF_NODISCARD std::string* release_reference();
  void set_allocated_reference(std::string* reference);
  private:
  const std::string& _internal_reference() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reference(const std::string& value);
  std::string* _internal_mutable_reference();
  public:

  // bytes updated_block_signature = 3;
  void clear_updated_block_signature();
  const std::string& updated_block_signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_updated_block_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_updated_block_signature();
  PROTOBUF_NODISCARD std::string* release_updated_block_signature();
  void set_allocated_updated_block_signature(std::string* updated_block_signature);
  private:
  const std::string& _internal_updated_block_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_updated_block_signature(const std::string& value);
  std::string* _internal_mutable_updated_block_signature();
  public:

  // bytes sender_public_key = 4;
  void clear_sender_public_key();
  const std::string& sender_public_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sender_public_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sender_public_key();
  PROTOBUF_NODISCARD std::string* release_sender_public_key();
  void set_allocated_sender_public_key(std::string* sender_public_key);
  private:
  const std::string& _internal_sender_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender_public_key(const std::string& value);
  std::string* _internal_mutable_sender_public_key();
  public:

  // int32 version = 1;
  void clear_version();
  int32_t version() const;
  void set_version(int32_t value);
  private:
  int32_t _internal_version() const;
  void _internal_set_version(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:vrp.MicroBlock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vrp::SignedTransaction > transactions_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reference_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr updated_block_signature_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_public_key_;
    int32_t version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vrp_2fblock_2eproto;
};
// -------------------------------------------------------------------

class SignedMicroBlock final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vrp.SignedMicroBlock) */ {
 public:
  inline SignedMicroBlock() : SignedMicroBlock(nullptr) {}
  ~SignedMicroBlock() override;
  explicit PROTOBUF_CONSTEXPR SignedMicroBlock(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SignedMicroBlock(const SignedMicroBlock& from);
  SignedMicroBlock(SignedMicroBlock&& from) noexcept
    : SignedMicroBlock() {
    *this = ::std::move(from);
  }

  inline SignedMicroBlock& operator=(const SignedMicroBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignedMicroBlock& operator=(SignedMicroBlock&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SignedMicroBlock& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignedMicroBlock* internal_default_instance() {
    return reinterpret_cast<const SignedMicroBlock*>(
               &_SignedMicroBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SignedMicroBlock& a, SignedMicroBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(SignedMicroBlock* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignedMicroBlock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SignedMicroBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SignedMicroBlock>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SignedMicroBlock& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SignedMicroBlock& from) {
    SignedMicroBlock::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignedMicroBlock* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vrp.SignedMicroBlock";
  }
  protected:
  explicit SignedMicroBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureFieldNumber = 2,
    kTotalBlockIdFieldNumber = 3,
    kMicroBlockFieldNumber = 1,
  };
  // bytes signature = 2;
  void clear_signature();
  const std::string& signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // bytes total_block_id = 3;
  void clear_total_block_id();
  const std::string& total_block_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_total_block_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_total_block_id();
  PROTOBUF_NODISCARD std::string* release_total_block_id();
  void set_allocated_total_block_id(std::string* total_block_id);
  private:
  const std::string& _internal_total_block_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_total_block_id(const std::string& value);
  std::string* _internal_mutable_total_block_id();
  public:

  // .vrp.MicroBlock micro_block = 1;
  bool has_micro_block() const;
  private:
  bool _internal_has_micro_block() const;
  public:
  void clear_micro_block();
  const ::vrp::MicroBlock& micro_block() const;
  PROTOBUF_NODISCARD ::vrp::MicroBlock* release_micro_block();
  ::vrp::MicroBlock* mutable_micro_block();
  void set_allocated_micro_block(::vrp::MicroBlock* micro_block);
  private:
  const ::vrp::MicroBlock& _internal_micro_block() const;
  ::vrp::MicroBlock* _internal_mutable_micro_block();
  public:
  void unsafe_arena_set_allocated_micro_block(
      ::vrp::MicroBlock* micro_block);
  ::vrp::MicroBlock* unsafe_arena_release_micro_block();

  // @@protoc_insertion_point(class_scope:vrp.SignedMicroBlock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr total_block_id_;
    ::vrp::MicroBlock* micro_block_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vrp_2fblock_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Block_Header

// int32 chain_id = 1;
inline void Block_Header::clear_chain_id() {
  _impl_.chain_id_ = 0;
}
inline int32_t Block_Header::_internal_chain_id() const {
  return _impl_.chain_id_;
}
inline int32_t Block_Header::chain_id() const {
  // @@protoc_insertion_point(field_get:vrp.Block.Header.chain_id)
  return _internal_chain_id();
}
inline void Block_Header::_internal_set_chain_id(int32_t value) {
  
  _impl_.chain_id_ = value;
}
inline void Block_Header::set_chain_id(int32_t value) {
  _internal_set_chain_id(value);
  // @@protoc_insertion_point(field_set:vrp.Block.Header.chain_id)
}

// bytes reference = 2;
inline void Block_Header::clear_reference() {
  _impl_.reference_.ClearToEmpty();
}
inline const std::string& Block_Header::reference() const {
  // @@protoc_insertion_point(field_get:vrp.Block.Header.reference)
  return _internal_reference();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Block_Header::set_reference(ArgT0&& arg0, ArgT... args) {
 
 _impl_.reference_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vrp.Block.Header.reference)
}
inline std::string* Block_Header::mutable_reference() {
  std::string* _s = _internal_mutable_reference();
  // @@protoc_insertion_point(field_mutable:vrp.Block.Header.reference)
  return _s;
}
inline const std::string& Block_Header::_internal_reference() const {
  return _impl_.reference_.Get();
}
inline void Block_Header::_internal_set_reference(const std::string& value) {
  
  _impl_.reference_.Set(value, GetArenaForAllocation());
}
inline std::string* Block_Header::_internal_mutable_reference() {
  
  return _impl_.reference_.Mutable(GetArenaForAllocation());
}
inline std::string* Block_Header::release_reference() {
  // @@protoc_insertion_point(field_release:vrp.Block.Header.reference)
  return _impl_.reference_.Release();
}
inline void Block_Header::set_allocated_reference(std::string* reference) {
  if (reference != nullptr) {
    
  } else {
    
  }
  _impl_.reference_.SetAllocated(reference, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reference_.IsDefault()) {
    _impl_.reference_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vrp.Block.Header.reference)
}

// int64 base_target = 3;
inline void Block_Header::clear_base_target() {
  _impl_.base_target_ = int64_t{0};
}
inline int64_t Block_Header::_internal_base_target() const {
  return _impl_.base_target_;
}
inline int64_t Block_Header::base_target() const {
  // @@protoc_insertion_point(field_get:vrp.Block.Header.base_target)
  return _internal_base_target();
}
inline void Block_Header::_internal_set_base_target(int64_t value) {
  
  _impl_.base_target_ = value;
}
inline void Block_Header::set_base_target(int64_t value) {
  _internal_set_base_target(value);
  // @@protoc_insertion_point(field_set:vrp.Block.Header.base_target)
}

// bytes generation_signature = 4;
inline void Block_Header::clear_generation_signature() {
  _impl_.generation_signature_.ClearToEmpty();
}
inline const std::string& Block_Header::generation_signature() const {
  // @@protoc_insertion_point(field_get:vrp.Block.Header.generation_signature)
  return _internal_generation_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Block_Header::set_generation_signature(ArgT0&& arg0, ArgT... args) {
 
 _impl_.generation_signature_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vrp.Block.Header.generation_signature)
}
inline std::string* Block_Header::mutable_generation_signature() {
  std::string* _s = _internal_mutable_generation_signature();
  // @@protoc_insertion_point(field_mutable:vrp.Block.Header.generation_signature)
  return _s;
}
inline const std::string& Block_Header::_internal_generation_signature() const {
  return _impl_.generation_signature_.Get();
}
inline void Block_Header::_internal_set_generation_signature(const std::string& value) {
  
  _impl_.generation_signature_.Set(value, GetArenaForAllocation());
}
inline std::string* Block_Header::_internal_mutable_generation_signature() {
  
  return _impl_.generation_signature_.Mutable(GetArenaForAllocation());
}
inline std::string* Block_Header::release_generation_signature() {
  // @@protoc_insertion_point(field_release:vrp.Block.Header.generation_signature)
  return _impl_.generation_signature_.Release();
}
inline void Block_Header::set_allocated_generation_signature(std::string* generation_signature) {
  if (generation_signature != nullptr) {
    
  } else {
    
  }
  _impl_.generation_signature_.SetAllocated(generation_signature, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.generation_signature_.IsDefault()) {
    _impl_.generation_signature_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vrp.Block.Header.generation_signature)
}

// repeated uint32 feature_votes = 5;
inline int Block_Header::_internal_feature_votes_size() const {
  return _impl_.feature_votes_.size();
}
inline int Block_Header::feature_votes_size() const {
  return _internal_feature_votes_size();
}
inline void Block_Header::clear_feature_votes() {
  _impl_.feature_votes_.Clear();
}
inline uint32_t Block_Header::_internal_feature_votes(int index) const {
  return _impl_.feature_votes_.Get(index);
}
inline uint32_t Block_Header::feature_votes(int index) const {
  // @@protoc_insertion_point(field_get:vrp.Block.Header.feature_votes)
  return _internal_feature_votes(index);
}
inline void Block_Header::set_feature_votes(int index, uint32_t value) {
  _impl_.feature_votes_.Set(index, value);
  // @@protoc_insertion_point(field_set:vrp.Block.Header.feature_votes)
}
inline void Block_Header::_internal_add_feature_votes(uint32_t value) {
  _impl_.feature_votes_.Add(value);
}
inline void Block_Header::add_feature_votes(uint32_t value) {
  _internal_add_feature_votes(value);
  // @@protoc_insertion_point(field_add:vrp.Block.Header.feature_votes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Block_Header::_internal_feature_votes() const {
  return _impl_.feature_votes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Block_Header::feature_votes() const {
  // @@protoc_insertion_point(field_list:vrp.Block.Header.feature_votes)
  return _internal_feature_votes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Block_Header::_internal_mutable_feature_votes() {
  return &_impl_.feature_votes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Block_Header::mutable_feature_votes() {
  // @@protoc_insertion_point(field_mutable_list:vrp.Block.Header.feature_votes)
  return _internal_mutable_feature_votes();
}

// int64 timestamp = 6;
inline void Block_Header::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t Block_Header::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t Block_Header::timestamp() const {
  // @@protoc_insertion_point(field_get:vrp.Block.Header.timestamp)
  return _internal_timestamp();
}
inline void Block_Header::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void Block_Header::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:vrp.Block.Header.timestamp)
}

// int32 version = 7;
inline void Block_Header::clear_version() {
  _impl_.version_ = 0;
}
inline int32_t Block_Header::_internal_version() const {
  return _impl_.version_;
}
inline int32_t Block_Header::version() const {
  // @@protoc_insertion_point(field_get:vrp.Block.Header.version)
  return _internal_version();
}
inline void Block_Header::_internal_set_version(int32_t value) {
  
  _impl_.version_ = value;
}
inline void Block_Header::set_version(int32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:vrp.Block.Header.version)
}

// bytes generator = 8;
inline void Block_Header::clear_generator() {
  _impl_.generator_.ClearToEmpty();
}
inline const std::string& Block_Header::generator() const {
  // @@protoc_insertion_point(field_get:vrp.Block.Header.generator)
  return _internal_generator();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Block_Header::set_generator(ArgT0&& arg0, ArgT... args) {
 
 _impl_.generator_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vrp.Block.Header.generator)
}
inline std::string* Block_Header::mutable_generator() {
  std::string* _s = _internal_mutable_generator();
  // @@protoc_insertion_point(field_mutable:vrp.Block.Header.generator)
  return _s;
}
inline const std::string& Block_Header::_internal_generator() const {
  return _impl_.generator_.Get();
}
inline void Block_Header::_internal_set_generator(const std::string& value) {
  
  _impl_.generator_.Set(value, GetArenaForAllocation());
}
inline std::string* Block_Header::_internal_mutable_generator() {
  
  return _impl_.generator_.Mutable(GetArenaForAllocation());
}
inline std::string* Block_Header::release_generator() {
  // @@protoc_insertion_point(field_release:vrp.Block.Header.generator)
  return _impl_.generator_.Release();
}
inline void Block_Header::set_allocated_generator(std::string* generator) {
  if (generator != nullptr) {
    
  } else {
    
  }
  _impl_.generator_.SetAllocated(generator, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.generator_.IsDefault()) {
    _impl_.generator_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vrp.Block.Header.generator)
}

// int64 reward_vote = 9;
inline void Block_Header::clear_reward_vote() {
  _impl_.reward_vote_ = int64_t{0};
}
inline int64_t Block_Header::_internal_reward_vote() const {
  return _impl_.reward_vote_;
}
inline int64_t Block_Header::reward_vote() const {
  // @@protoc_insertion_point(field_get:vrp.Block.Header.reward_vote)
  return _internal_reward_vote();
}
inline void Block_Header::_internal_set_reward_vote(int64_t value) {
  
  _impl_.reward_vote_ = value;
}
inline void Block_Header::set_reward_vote(int64_t value) {
  _internal_set_reward_vote(value);
  // @@protoc_insertion_point(field_set:vrp.Block.Header.reward_vote)
}

// int64 reward_burned = 10;
inline void Block_Header::clear_reward_burned() {
  _impl_.reward_burned_ = int64_t{0};
}
inline int64_t Block_Header::_internal_reward_burned() const {
  return _impl_.reward_burned_;
}
inline int64_t Block_Header::reward_burned() const {
  // @@protoc_insertion_point(field_get:vrp.Block.Header.reward_burned)
  return _internal_reward_burned();
}
inline void Block_Header::_internal_set_reward_burned(int64_t value) {
  
  _impl_.reward_burned_ = value;
}
inline void Block_Header::set_reward_burned(int64_t value) {
  _internal_set_reward_burned(value);
  // @@protoc_insertion_point(field_set:vrp.Block.Header.reward_burned)
}

// bytes transactions_root = 11;
inline void Block_Header::clear_transactions_root() {
  _impl_.transactions_root_.ClearToEmpty();
}
inline const std::string& Block_Header::transactions_root() const {
  // @@protoc_insertion_point(field_get:vrp.Block.Header.transactions_root)
  return _internal_transactions_root();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Block_Header::set_transactions_root(ArgT0&& arg0, ArgT... args) {
 
 _impl_.transactions_root_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vrp.Block.Header.transactions_root)
}
inline std::string* Block_Header::mutable_transactions_root() {
  std::string* _s = _internal_mutable_transactions_root();
  // @@protoc_insertion_point(field_mutable:vrp.Block.Header.transactions_root)
  return _s;
}
inline const std::string& Block_Header::_internal_transactions_root() const {
  return _impl_.transactions_root_.Get();
}
inline void Block_Header::_internal_set_transactions_root(const std::string& value) {
  
  _impl_.transactions_root_.Set(value, GetArenaForAllocation());
}
inline std::string* Block_Header::_internal_mutable_transactions_root() {
  
  return _impl_.transactions_root_.Mutable(GetArenaForAllocation());
}
inline std::string* Block_Header::release_transactions_root() {
  // @@protoc_insertion_point(field_release:vrp.Block.Header.transactions_root)
  return _impl_.transactions_root_.Release();
}
inline void Block_Header::set_allocated_transactions_root(std::string* transactions_root) {
  if (transactions_root != nullptr) {
    
  } else {
    
  }
  _impl_.transactions_root_.SetAllocated(transactions_root, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.transactions_root_.IsDefault()) {
    _impl_.transactions_root_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vrp.Block.Header.transactions_root)
}

// -------------------------------------------------------------------

// Block

// .vrp.Block.Header header = 1;
inline bool Block::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool Block::has_header() const {
  return _internal_has_header();
}
inline void Block::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
inline const ::vrp::Block_Header& Block::_internal_header() const {
  const ::vrp::Block_Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::vrp::Block_Header&>(
      ::vrp::_Block_Header_default_instance_);
}
inline const ::vrp::Block_Header& Block::header() const {
  // @@protoc_insertion_point(field_get:vrp.Block.header)
  return _internal_header();
}
inline void Block::unsafe_arena_set_allocated_header(
    ::vrp::Block_Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vrp.Block.header)
}
inline ::vrp::Block_Header* Block::release_header() {
  
  ::vrp::Block_Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vrp::Block_Header* Block::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:vrp.Block.header)
  
  ::vrp::Block_Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::vrp::Block_Header* Block::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::vrp::Block_Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::vrp::Block_Header* Block::mutable_header() {
  ::vrp::Block_Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:vrp.Block.header)
  return _msg;
}
inline void Block::set_allocated_header(::vrp::Block_Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:vrp.Block.header)
}

// bytes signature = 2;
inline void Block::clear_signature() {
  _impl_.signature_.ClearToEmpty();
}
inline const std::string& Block::signature() const {
  // @@protoc_insertion_point(field_get:vrp.Block.signature)
  return _internal_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Block::set_signature(ArgT0&& arg0, ArgT... args) {
 
 _impl_.signature_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vrp.Block.signature)
}
inline std::string* Block::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:vrp.Block.signature)
  return _s;
}
inline const std::string& Block::_internal_signature() const {
  return _impl_.signature_.Get();
}
inline void Block::_internal_set_signature(const std::string& value) {
  
  _impl_.signature_.Set(value, GetArenaForAllocation());
}
inline std::string* Block::_internal_mutable_signature() {
  
  return _impl_.signature_.Mutable(GetArenaForAllocation());
}
inline std::string* Block::release_signature() {
  // @@protoc_insertion_point(field_release:vrp.Block.signature)
  return _impl_.signature_.Release();
}
inline void Block::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  _impl_.signature_.SetAllocated(signature, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.signature_.IsDefault()) {
    _impl_.signature_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vrp.Block.signature)
}

// repeated .vrp.SignedTransaction transactions = 3;
inline int Block::_internal_transactions_size() const {
  return _impl_.transactions_.size();
}
inline int Block::transactions_size() const {
  return _internal_transactions_size();
}
inline ::vrp::SignedTransaction* Block::mutable_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:vrp.Block.transactions)
  return _impl_.transactions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vrp::SignedTransaction >*
Block::mutable_transactions() {
  // @@protoc_insertion_point(field_mutable_list:vrp.Block.transactions)
  return &_impl_.transactions_;
}
inline const ::vrp::SignedTransaction& Block::_internal_transactions(int index) const {
  return _impl_.transactions_.Get(index);
}
inline const ::vrp::SignedTransaction& Block::transactions(int index) const {
  // @@protoc_insertion_point(field_get:vrp.Block.transactions)
  return _internal_transactions(index);
}
inline ::vrp::SignedTransaction* Block::_internal_add_transactions() {
  return _impl_.transactions_.Add();
}
inline ::vrp::SignedTransaction* Block::add_transactions() {
  ::vrp::SignedTransaction* _add = _internal_add_transactions();
  // @@protoc_insertion_point(field_add:vrp.Block.transactions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vrp::SignedTransaction >&
Block::transactions() const {
  // @@protoc_insertion_point(field_list:vrp.Block.transactions)
  return _impl_.transactions_;
}

// -------------------------------------------------------------------

// MicroBlock

// int32 version = 1;
inline void MicroBlock::clear_version() {
  _impl_.version_ = 0;
}
inline int32_t MicroBlock::_internal_version() const {
  return _impl_.version_;
}
inline int32_t MicroBlock::version() const {
  // @@protoc_insertion_point(field_get:vrp.MicroBlock.version)
  return _internal_version();
}
inline void MicroBlock::_internal_set_version(int32_t value) {
  
  _impl_.version_ = value;
}
inline void MicroBlock::set_version(int32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:vrp.MicroBlock.version)
}

// bytes reference = 2;
inline void MicroBlock::clear_reference() {
  _impl_.reference_.ClearToEmpty();
}
inline const std::string& MicroBlock::reference() const {
  // @@protoc_insertion_point(field_get:vrp.MicroBlock.reference)
  return _internal_reference();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MicroBlock::set_reference(ArgT0&& arg0, ArgT... args) {
 
 _impl_.reference_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vrp.MicroBlock.reference)
}
inline std::string* MicroBlock::mutable_reference() {
  std::string* _s = _internal_mutable_reference();
  // @@protoc_insertion_point(field_mutable:vrp.MicroBlock.reference)
  return _s;
}
inline const std::string& MicroBlock::_internal_reference() const {
  return _impl_.reference_.Get();
}
inline void MicroBlock::_internal_set_reference(const std::string& value) {
  
  _impl_.reference_.Set(value, GetArenaForAllocation());
}
inline std::string* MicroBlock::_internal_mutable_reference() {
  
  return _impl_.reference_.Mutable(GetArenaForAllocation());
}
inline std::string* MicroBlock::release_reference() {
  // @@protoc_insertion_point(field_release:vrp.MicroBlock.reference)
  return _impl_.reference_.Release();
}
inline void MicroBlock::set_allocated_reference(std::string* reference) {
  if (reference != nullptr) {
    
  } else {
    
  }
  _impl_.reference_.SetAllocated(reference, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reference_.IsDefault()) {
    _impl_.reference_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vrp.MicroBlock.reference)
}

// bytes updated_block_signature = 3;
inline void MicroBlock::clear_updated_block_signature() {
  _impl_.updated_block_signature_.ClearToEmpty();
}
inline const std::string& MicroBlock::updated_block_signature() const {
  // @@protoc_insertion_point(field_get:vrp.MicroBlock.updated_block_signature)
  return _internal_updated_block_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MicroBlock::set_updated_block_signature(ArgT0&& arg0, ArgT... args) {
 
 _impl_.updated_block_signature_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vrp.MicroBlock.updated_block_signature)
}
inline std::string* MicroBlock::mutable_updated_block_signature() {
  std::string* _s = _internal_mutable_updated_block_signature();
  // @@protoc_insertion_point(field_mutable:vrp.MicroBlock.updated_block_signature)
  return _s;
}
inline const std::string& MicroBlock::_internal_updated_block_signature() const {
  return _impl_.updated_block_signature_.Get();
}
inline void MicroBlock::_internal_set_updated_block_signature(const std::string& value) {
  
  _impl_.updated_block_signature_.Set(value, GetArenaForAllocation());
}
inline std::string* MicroBlock::_internal_mutable_updated_block_signature() {
  
  return _impl_.updated_block_signature_.Mutable(GetArenaForAllocation());
}
inline std::string* MicroBlock::release_updated_block_signature() {
  // @@protoc_insertion_point(field_release:vrp.MicroBlock.updated_block_signature)
  return _impl_.updated_block_signature_.Release();
}
inline void MicroBlock::set_allocated_updated_block_signature(std::string* updated_block_signature) {
  if (updated_block_signature != nullptr) {
    
  } else {
    
  }
  _impl_.updated_block_signature_.SetAllocated(updated_block_signature, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.updated_block_signature_.IsDefault()) {
    _impl_.updated_block_signature_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vrp.MicroBlock.updated_block_signature)
}

// bytes sender_public_key = 4;
inline void MicroBlock::clear_sender_public_key() {
  _impl_.sender_public_key_.ClearToEmpty();
}
inline const std::string& MicroBlock::sender_public_key() const {
  // @@protoc_insertion_point(field_get:vrp.MicroBlock.sender_public_key)
  return _internal_sender_public_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MicroBlock::set_sender_public_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sender_public_key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vrp.MicroBlock.sender_public_key)
}
inline std::string* MicroBlock::mutable_sender_public_key() {
  std::string* _s = _internal_mutable_sender_public_key();
  // @@protoc_insertion_point(field_mutable:vrp.MicroBlock.sender_public_key)
  return _s;
}
inline const std::string& MicroBlock::_internal_sender_public_key() const {
  return _impl_.sender_public_key_.Get();
}
inline void MicroBlock::_internal_set_sender_public_key(const std::string& value) {
  
  _impl_.sender_public_key_.Set(value, GetArenaForAllocation());
}
inline std::string* MicroBlock::_internal_mutable_sender_public_key() {
  
  return _impl_.sender_public_key_.Mutable(GetArenaForAllocation());
}
inline std::string* MicroBlock::release_sender_public_key() {
  // @@protoc_insertion_point(field_release:vrp.MicroBlock.sender_public_key)
  return _impl_.sender_public_key_.Release();
}
inline void MicroBlock::set_allocated_sender_public_key(std::string* sender_public_key) {
  if (sender_public_key != nullptr) {
    
  } else {
    
  }
  _impl_.sender_public_key_.SetAllocated(sender_public_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sender_public_key_.IsDefault()) {
    _impl_.sender_public_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vrp.MicroBlock.sender_public_key)
}

// repeated .vrp.SignedTransaction transactions = 5;
inline int MicroBlock::_internal_transactions_size() const {
  return _impl_.transactions_.size();
}
inline int MicroBlock::transactions_size() const {
  return _internal_transactions_size();
}
inline ::vrp::SignedTransaction* MicroBlock::mutable_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:vrp.MicroBlock.transactions)
  return _impl_.transactions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vrp::SignedTransaction >*
MicroBlock::mutable_transactions() {
  // @@protoc_insertion_point(field_mutable_list:vrp.MicroBlock.transactions)
  return &_impl_.transactions_;
}
inline const ::vrp::SignedTransaction& MicroBlock::_internal_transactions(int index) const {
  return _impl_.transactions_.Get(index);
}
inline const ::vrp::SignedTransaction& MicroBlock::transactions(int index) const {
  // @@protoc_insertion_point(field_get:vrp.MicroBlock.transactions)
  return _internal_transactions(index);
}
inline ::vrp::SignedTransaction* MicroBlock::_internal_add_transactions() {
  return _impl_.transactions_.Add();
}
inline ::vrp::SignedTransaction* MicroBlock::add_transactions() {
  ::vrp::SignedTransaction* _add = _internal_add_transactions();
  // @@protoc_insertion_point(field_add:vrp.MicroBlock.transactions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vrp::SignedTransaction >&
MicroBlock::transactions() const {
  // @@protoc_insertion_point(field_list:vrp.MicroBlock.transactions)
  return _impl_.transactions_;
}

// -------------------------------------------------------------------

// SignedMicroBlock

// .vrp.MicroBlock micro_block = 1;
inline bool SignedMicroBlock::_internal_has_micro_block() const {
  return this != internal_default_instance() && _impl_.micro_block_ != nullptr;
}
inline bool SignedMicroBlock::has_micro_block() const {
  return _internal_has_micro_block();
}
inline void SignedMicroBlock::clear_micro_block() {
  if (GetArenaForAllocation() == nullptr && _impl_.micro_block_ != nullptr) {
    delete _impl_.micro_block_;
  }
  _impl_.micro_block_ = nullptr;
}
inline const ::vrp::MicroBlock& SignedMicroBlock::_internal_micro_block() const {
  const ::vrp::MicroBlock* p = _impl_.micro_block_;
  return p != nullptr ? *p : reinterpret_cast<const ::vrp::MicroBlock&>(
      ::vrp::_MicroBlock_default_instance_);
}
inline const ::vrp::MicroBlock& SignedMicroBlock::micro_block() const {
  // @@protoc_insertion_point(field_get:vrp.SignedMicroBlock.micro_block)
  return _internal_micro_block();
}
inline void SignedMicroBlock::unsafe_arena_set_allocated_micro_block(
    ::vrp::MicroBlock* micro_block) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.micro_block_);
  }
  _impl_.micro_block_ = micro_block;
  if (micro_block) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vrp.SignedMicroBlock.micro_block)
}
inline ::vrp::MicroBlock* SignedMicroBlock::release_micro_block() {
  
  ::vrp::MicroBlock* temp = _impl_.micro_block_;
  _impl_.micro_block_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vrp::MicroBlock* SignedMicroBlock::unsafe_arena_release_micro_block() {
  // @@protoc_insertion_point(field_release:vrp.SignedMicroBlock.micro_block)
  
  ::vrp::MicroBlock* temp = _impl_.micro_block_;
  _impl_.micro_block_ = nullptr;
  return temp;
}
inline ::vrp::MicroBlock* SignedMicroBlock::_internal_mutable_micro_block() {
  
  if (_impl_.micro_block_ == nullptr) {
    auto* p = CreateMaybeMessage<::vrp::MicroBlock>(GetArenaForAllocation());
    _impl_.micro_block_ = p;
  }
  return _impl_.micro_block_;
}
inline ::vrp::MicroBlock* SignedMicroBlock::mutable_micro_block() {
  ::vrp::MicroBlock* _msg = _internal_mutable_micro_block();
  // @@protoc_insertion_point(field_mutable:vrp.SignedMicroBlock.micro_block)
  return _msg;
}
inline void SignedMicroBlock::set_allocated_micro_block(::vrp::MicroBlock* micro_block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.micro_block_;
  }
  if (micro_block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(micro_block);
    if (message_arena != submessage_arena) {
      micro_block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, micro_block, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.micro_block_ = micro_block;
  // @@protoc_insertion_point(field_set_allocated:vrp.SignedMicroBlock.micro_block)
}

// bytes signature = 2;
inline void SignedMicroBlock::clear_signature() {
  _impl_.signature_.ClearToEmpty();
}
inline const std::string& SignedMicroBlock::signature() const {
  // @@protoc_insertion_point(field_get:vrp.SignedMicroBlock.signature)
  return _internal_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SignedMicroBlock::set_signature(ArgT0&& arg0, ArgT... args) {
 
 _impl_.signature_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vrp.SignedMicroBlock.signature)
}
inline std::string* SignedMicroBlock::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:vrp.SignedMicroBlock.signature)
  return _s;
}
inline const std::string& SignedMicroBlock::_internal_signature() const {
  return _impl_.signature_.Get();
}
inline void SignedMicroBlock::_internal_set_signature(const std::string& value) {
  
  _impl_.signature_.Set(value, GetArenaForAllocation());
}
inline std::string* SignedMicroBlock::_internal_mutable_signature() {
  
  return _impl_.signature_.Mutable(GetArenaForAllocation());
}
inline std::string* SignedMicroBlock::release_signature() {
  // @@protoc_insertion_point(field_release:vrp.SignedMicroBlock.signature)
  return _impl_.signature_.Release();
}
inline void SignedMicroBlock::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  _impl_.signature_.SetAllocated(signature, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.signature_.IsDefault()) {
    _impl_.signature_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vrp.SignedMicroBlock.signature)
}

// bytes total_block_id = 3;
inline void SignedMicroBlock::clear_total_block_id() {
  _impl_.total_block_id_.ClearToEmpty();
}
inline const std::string& SignedMicroBlock::total_block_id() const {
  // @@protoc_insertion_point(field_get:vrp.SignedMicroBlock.total_block_id)
  return _internal_total_block_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SignedMicroBlock::set_total_block_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.total_block_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vrp.SignedMicroBlock.total_block_id)
}
inline std::string* SignedMicroBlock::mutable_total_block_id() {
  std::string* _s = _internal_mutable_total_block_id();
  // @@protoc_insertion_point(field_mutable:vrp.SignedMicroBlock.total_block_id)
  return _s;
}
inline const std::string& SignedMicroBlock::_internal_total_block_id() const {
  return _impl_.total_block_id_.Get();
}
inline void SignedMicroBlock::_internal_set_total_block_id(const std::string& value) {
  
  _impl_.total_block_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SignedMicroBlock::_internal_mutable_total_block_id() {
  
  return _impl_.total_block_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SignedMicroBlock::release_total_block_id() {
  // @@protoc_insertion_point(field_release:vrp.SignedMicroBlock.total_block_id)
  return _impl_.total_block_id_.Release();
}
inline void SignedMicroBlock::set_allocated_total_block_id(std::string* total_block_id) {
  if (total_block_id != nullptr) {
    
  } else {
    
  }
  _impl_.total_block_id_.SetAllocated(total_block_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.total_block_id_.IsDefault()) {
    _impl_.total_block_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vrp.SignedMicroBlock.total_block_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace vrp

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vrp_2fblock_2eproto
