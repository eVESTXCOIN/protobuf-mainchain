// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vrp/recipient.proto

#include "vrp/recipient.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace vrp {
PROTOBUF_CONSTEXPR Recipient::Recipient(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.recipient_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct RecipientDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecipientDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecipientDefaultTypeInternal() {}
  union {
    Recipient _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecipientDefaultTypeInternal _Recipient_default_instance_;
}  // namespace vrp
static ::_pb::Metadata file_level_metadata_vrp_2frecipient_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_vrp_2frecipient_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_vrp_2frecipient_2eproto = nullptr;

const uint32_t TableStruct_vrp_2frecipient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vrp::Recipient, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::vrp::Recipient, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::vrp::Recipient, _impl_.recipient_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::vrp::Recipient)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::vrp::_Recipient_default_instance_._instance,
};

const char descriptor_table_protodef_vrp_2frecipient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023vrp/recipient.proto\022\003vrp\"D\n\tRecipient\022"
  "\031\n\017public_key_hash\030\001 \001(\014H\000\022\017\n\005alias\030\002 \001("
  "\tH\000B\013\n\trecipientBX\n\034com.vrp.protobuf.tra"
  "nsactionZ2github.com/eVESTXCOIN/govrp/pk"
  "g/grpc/generated/vrp\252\002\003VRPb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_vrp_2frecipient_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_vrp_2frecipient_2eproto = {
    false, false, 194, descriptor_table_protodef_vrp_2frecipient_2eproto,
    "vrp/recipient.proto",
    &descriptor_table_vrp_2frecipient_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_vrp_2frecipient_2eproto::offsets,
    file_level_metadata_vrp_2frecipient_2eproto, file_level_enum_descriptors_vrp_2frecipient_2eproto,
    file_level_service_descriptors_vrp_2frecipient_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_vrp_2frecipient_2eproto_getter() {
  return &descriptor_table_vrp_2frecipient_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_vrp_2frecipient_2eproto(&descriptor_table_vrp_2frecipient_2eproto);
namespace vrp {

// ===================================================================

class Recipient::_Internal {
 public:
};

Recipient::Recipient(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vrp.Recipient)
}
Recipient::Recipient(const Recipient& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Recipient* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.recipient_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_recipient();
  switch (from.recipient_case()) {
    case kPublicKeyHash: {
      _this->_internal_set_public_key_hash(from._internal_public_key_hash());
      break;
    }
    case kAlias: {
      _this->_internal_set_alias(from._internal_alias());
      break;
    }
    case RECIPIENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vrp.Recipient)
}

inline void Recipient::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.recipient_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_recipient();
}

Recipient::~Recipient() {
  // @@protoc_insertion_point(destructor:vrp.Recipient)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Recipient::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_recipient()) {
    clear_recipient();
  }
}

void Recipient::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Recipient::clear_recipient() {
// @@protoc_insertion_point(one_of_clear_start:vrp.Recipient)
  switch (recipient_case()) {
    case kPublicKeyHash: {
      _impl_.recipient_.public_key_hash_.Destroy();
      break;
    }
    case kAlias: {
      _impl_.recipient_.alias_.Destroy();
      break;
    }
    case RECIPIENT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = RECIPIENT_NOT_SET;
}


void Recipient::Clear() {
// @@protoc_insertion_point(message_clear_start:vrp.Recipient)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_recipient();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Recipient::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes public_key_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_public_key_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string alias = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_alias();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vrp.Recipient.alias"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Recipient::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vrp.Recipient)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes public_key_hash = 1;
  if (_internal_has_public_key_hash()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_public_key_hash(), target);
  }

  // string alias = 2;
  if (_internal_has_alias()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alias().data(), static_cast<int>(this->_internal_alias().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vrp.Recipient.alias");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_alias(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vrp.Recipient)
  return target;
}

size_t Recipient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vrp.Recipient)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (recipient_case()) {
    // bytes public_key_hash = 1;
    case kPublicKeyHash: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_public_key_hash());
      break;
    }
    // string alias = 2;
    case kAlias: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_alias());
      break;
    }
    case RECIPIENT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Recipient::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Recipient::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Recipient::GetClassData() const { return &_class_data_; }


void Recipient::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Recipient*>(&to_msg);
  auto& from = static_cast<const Recipient&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vrp.Recipient)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.recipient_case()) {
    case kPublicKeyHash: {
      _this->_internal_set_public_key_hash(from._internal_public_key_hash());
      break;
    }
    case kAlias: {
      _this->_internal_set_alias(from._internal_alias());
      break;
    }
    case RECIPIENT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Recipient::CopyFrom(const Recipient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vrp.Recipient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Recipient::IsInitialized() const {
  return true;
}

void Recipient::InternalSwap(Recipient* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.recipient_, other->_impl_.recipient_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Recipient::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_vrp_2frecipient_2eproto_getter, &descriptor_table_vrp_2frecipient_2eproto_once,
      file_level_metadata_vrp_2frecipient_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace vrp
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vrp::Recipient*
Arena::CreateMaybeMessage< ::vrp::Recipient >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vrp::Recipient >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
