// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vrp/transaction.proto

#include "vrp/transaction.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_vrp_2famount_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Amount_vrp_2famount_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vrp_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BurnTransactionData_vrp_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vrp_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateAliasTransactionData_vrp_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vrp_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DataTransactionData_vrp_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vrp_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DataTransactionData_DataEntry_vrp_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vrp_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExchangeTransactionData_vrp_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vrp_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenesisTransactionData_vrp_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vrp_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InvokeScriptTransactionData_vrp_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vrp_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IssueTransactionData_vrp_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vrp_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LeaseCancelTransactionData_vrp_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vrp_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LeaseTransactionData_vrp_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vrp_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MassTransferTransactionData_vrp_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vrp_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MassTransferTransactionData_Transfer_vrp_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vrp_2forder_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Order_vrp_2forder_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vrp_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PaymentTransactionData_vrp_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vrp_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrivatePaymentTransactionData_vrp_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vrp_2frecipient_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Recipient_vrp_2frecipient_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vrp_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReissueTransactionData_vrp_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vrp_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetAssetScriptTransactionData_vrp_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vrp_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetScriptTransactionData_vrp_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vrp_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SponsorFeeTransactionData_vrp_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vrp_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<19> scc_info_Transaction_vrp_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vrp_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TransferTransactionData_vrp_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vrp_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateAssetInfoTransactionData_vrp_2ftransaction_2eproto;
namespace vrp {
class SignedTransactionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignedTransaction> _instance;
  const ::vrp::Transaction* vrp_transaction_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ethereum_transaction_;
} _SignedTransaction_default_instance_;
class TransactionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transaction> _instance;
  const ::vrp::GenesisTransactionData* genesis_;
  const ::vrp::PaymentTransactionData* payment_;
  const ::vrp::IssueTransactionData* issue_;
  const ::vrp::TransferTransactionData* transfer_;
  const ::vrp::ReissueTransactionData* reissue_;
  const ::vrp::BurnTransactionData* burn_;
  const ::vrp::ExchangeTransactionData* exchange_;
  const ::vrp::LeaseTransactionData* lease_;
  const ::vrp::LeaseCancelTransactionData* lease_cancel_;
  const ::vrp::CreateAliasTransactionData* create_alias_;
  const ::vrp::MassTransferTransactionData* mass_transfer_;
  const ::vrp::DataTransactionData* data_transaction_;
  const ::vrp::SetScriptTransactionData* set_script_;
  const ::vrp::SponsorFeeTransactionData* sponsor_fee_;
  const ::vrp::SetAssetScriptTransactionData* set_asset_script_;
  const ::vrp::InvokeScriptTransactionData* invoke_script_;
  const ::vrp::UpdateAssetInfoTransactionData* update_asset_info_;
  const ::vrp::PrivatePaymentTransactionData* anonymous_tx_;
} _Transaction_default_instance_;
class GenesisTransactionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenesisTransactionData> _instance;
} _GenesisTransactionData_default_instance_;
class PaymentTransactionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PaymentTransactionData> _instance;
} _PaymentTransactionData_default_instance_;
class TransferTransactionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransferTransactionData> _instance;
} _TransferTransactionData_default_instance_;
class CreateAliasTransactionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateAliasTransactionData> _instance;
} _CreateAliasTransactionData_default_instance_;
class DataTransactionData_DataEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataTransactionData_DataEntry> _instance;
  ::PROTOBUF_NAMESPACE_ID::int64 int_value_;
  bool bool_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr binary_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
} _DataTransactionData_DataEntry_default_instance_;
class DataTransactionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataTransactionData> _instance;
} _DataTransactionData_default_instance_;
class MassTransferTransactionData_TransferDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MassTransferTransactionData_Transfer> _instance;
} _MassTransferTransactionData_Transfer_default_instance_;
class MassTransferTransactionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MassTransferTransactionData> _instance;
} _MassTransferTransactionData_default_instance_;
class LeaseTransactionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LeaseTransactionData> _instance;
} _LeaseTransactionData_default_instance_;
class LeaseCancelTransactionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LeaseCancelTransactionData> _instance;
} _LeaseCancelTransactionData_default_instance_;
class BurnTransactionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BurnTransactionData> _instance;
} _BurnTransactionData_default_instance_;
class IssueTransactionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IssueTransactionData> _instance;
} _IssueTransactionData_default_instance_;
class ReissueTransactionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReissueTransactionData> _instance;
} _ReissueTransactionData_default_instance_;
class SetAssetScriptTransactionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetAssetScriptTransactionData> _instance;
} _SetAssetScriptTransactionData_default_instance_;
class SetScriptTransactionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetScriptTransactionData> _instance;
} _SetScriptTransactionData_default_instance_;
class ExchangeTransactionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExchangeTransactionData> _instance;
} _ExchangeTransactionData_default_instance_;
class SponsorFeeTransactionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SponsorFeeTransactionData> _instance;
} _SponsorFeeTransactionData_default_instance_;
class InvokeScriptTransactionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InvokeScriptTransactionData> _instance;
} _InvokeScriptTransactionData_default_instance_;
class UpdateAssetInfoTransactionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateAssetInfoTransactionData> _instance;
} _UpdateAssetInfoTransactionData_default_instance_;
class InvokeExpressionTransactionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InvokeExpressionTransactionData> _instance;
} _InvokeExpressionTransactionData_default_instance_;
class PrivatePaymentTransactionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrivatePaymentTransactionData> _instance;
} _PrivatePaymentTransactionData_default_instance_;
}  // namespace vrp
static void InitDefaultsscc_info_BurnTransactionData_vrp_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vrp::_BurnTransactionData_default_instance_;
    new (ptr) ::vrp::BurnTransactionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vrp::BurnTransactionData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BurnTransactionData_vrp_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BurnTransactionData_vrp_2ftransaction_2eproto}, {
      &scc_info_Amount_vrp_2famount_2eproto.base,}};

static void InitDefaultsscc_info_CreateAliasTransactionData_vrp_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vrp::_CreateAliasTransactionData_default_instance_;
    new (ptr) ::vrp::CreateAliasTransactionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vrp::CreateAliasTransactionData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateAliasTransactionData_vrp_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateAliasTransactionData_vrp_2ftransaction_2eproto}, {}};

static void InitDefaultsscc_info_DataTransactionData_vrp_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vrp::_DataTransactionData_default_instance_;
    new (ptr) ::vrp::DataTransactionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vrp::DataTransactionData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DataTransactionData_vrp_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DataTransactionData_vrp_2ftransaction_2eproto}, {
      &scc_info_DataTransactionData_DataEntry_vrp_2ftransaction_2eproto.base,}};

static void InitDefaultsscc_info_DataTransactionData_DataEntry_vrp_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vrp::_DataTransactionData_DataEntry_default_instance_;
    new (ptr) ::vrp::DataTransactionData_DataEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vrp::DataTransactionData_DataEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DataTransactionData_DataEntry_vrp_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DataTransactionData_DataEntry_vrp_2ftransaction_2eproto}, {}};

static void InitDefaultsscc_info_ExchangeTransactionData_vrp_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vrp::_ExchangeTransactionData_default_instance_;
    new (ptr) ::vrp::ExchangeTransactionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vrp::ExchangeTransactionData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExchangeTransactionData_vrp_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ExchangeTransactionData_vrp_2ftransaction_2eproto}, {
      &scc_info_Order_vrp_2forder_2eproto.base,}};

static void InitDefaultsscc_info_GenesisTransactionData_vrp_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vrp::_GenesisTransactionData_default_instance_;
    new (ptr) ::vrp::GenesisTransactionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vrp::GenesisTransactionData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenesisTransactionData_vrp_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GenesisTransactionData_vrp_2ftransaction_2eproto}, {}};

static void InitDefaultsscc_info_InvokeExpressionTransactionData_vrp_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vrp::_InvokeExpressionTransactionData_default_instance_;
    new (ptr) ::vrp::InvokeExpressionTransactionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vrp::InvokeExpressionTransactionData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InvokeExpressionTransactionData_vrp_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InvokeExpressionTransactionData_vrp_2ftransaction_2eproto}, {}};

static void InitDefaultsscc_info_InvokeScriptTransactionData_vrp_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vrp::_InvokeScriptTransactionData_default_instance_;
    new (ptr) ::vrp::InvokeScriptTransactionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vrp::InvokeScriptTransactionData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InvokeScriptTransactionData_vrp_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_InvokeScriptTransactionData_vrp_2ftransaction_2eproto}, {
      &scc_info_Recipient_vrp_2frecipient_2eproto.base,
      &scc_info_Amount_vrp_2famount_2eproto.base,}};

static void InitDefaultsscc_info_IssueTransactionData_vrp_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vrp::_IssueTransactionData_default_instance_;
    new (ptr) ::vrp::IssueTransactionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vrp::IssueTransactionData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IssueTransactionData_vrp_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IssueTransactionData_vrp_2ftransaction_2eproto}, {}};

static void InitDefaultsscc_info_LeaseCancelTransactionData_vrp_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vrp::_LeaseCancelTransactionData_default_instance_;
    new (ptr) ::vrp::LeaseCancelTransactionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vrp::LeaseCancelTransactionData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LeaseCancelTransactionData_vrp_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LeaseCancelTransactionData_vrp_2ftransaction_2eproto}, {}};

static void InitDefaultsscc_info_LeaseTransactionData_vrp_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vrp::_LeaseTransactionData_default_instance_;
    new (ptr) ::vrp::LeaseTransactionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vrp::LeaseTransactionData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LeaseTransactionData_vrp_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LeaseTransactionData_vrp_2ftransaction_2eproto}, {
      &scc_info_Recipient_vrp_2frecipient_2eproto.base,}};

static void InitDefaultsscc_info_MassTransferTransactionData_vrp_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vrp::_MassTransferTransactionData_default_instance_;
    new (ptr) ::vrp::MassTransferTransactionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vrp::MassTransferTransactionData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MassTransferTransactionData_vrp_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MassTransferTransactionData_vrp_2ftransaction_2eproto}, {
      &scc_info_MassTransferTransactionData_Transfer_vrp_2ftransaction_2eproto.base,}};

static void InitDefaultsscc_info_MassTransferTransactionData_Transfer_vrp_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vrp::_MassTransferTransactionData_Transfer_default_instance_;
    new (ptr) ::vrp::MassTransferTransactionData_Transfer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vrp::MassTransferTransactionData_Transfer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MassTransferTransactionData_Transfer_vrp_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MassTransferTransactionData_Transfer_vrp_2ftransaction_2eproto}, {
      &scc_info_Recipient_vrp_2frecipient_2eproto.base,}};

static void InitDefaultsscc_info_PaymentTransactionData_vrp_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vrp::_PaymentTransactionData_default_instance_;
    new (ptr) ::vrp::PaymentTransactionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vrp::PaymentTransactionData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PaymentTransactionData_vrp_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PaymentTransactionData_vrp_2ftransaction_2eproto}, {}};

static void InitDefaultsscc_info_PrivatePaymentTransactionData_vrp_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vrp::_PrivatePaymentTransactionData_default_instance_;
    new (ptr) ::vrp::PrivatePaymentTransactionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vrp::PrivatePaymentTransactionData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrivatePaymentTransactionData_vrp_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PrivatePaymentTransactionData_vrp_2ftransaction_2eproto}, {}};

static void InitDefaultsscc_info_ReissueTransactionData_vrp_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vrp::_ReissueTransactionData_default_instance_;
    new (ptr) ::vrp::ReissueTransactionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vrp::ReissueTransactionData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReissueTransactionData_vrp_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReissueTransactionData_vrp_2ftransaction_2eproto}, {
      &scc_info_Amount_vrp_2famount_2eproto.base,}};

static void InitDefaultsscc_info_SetAssetScriptTransactionData_vrp_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vrp::_SetAssetScriptTransactionData_default_instance_;
    new (ptr) ::vrp::SetAssetScriptTransactionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vrp::SetAssetScriptTransactionData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetAssetScriptTransactionData_vrp_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetAssetScriptTransactionData_vrp_2ftransaction_2eproto}, {}};

static void InitDefaultsscc_info_SetScriptTransactionData_vrp_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vrp::_SetScriptTransactionData_default_instance_;
    new (ptr) ::vrp::SetScriptTransactionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vrp::SetScriptTransactionData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetScriptTransactionData_vrp_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetScriptTransactionData_vrp_2ftransaction_2eproto}, {}};

static void InitDefaultsscc_info_SignedTransaction_vrp_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vrp::_SignedTransaction_default_instance_;
    new (ptr) ::vrp::SignedTransaction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vrp::SignedTransaction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SignedTransaction_vrp_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SignedTransaction_vrp_2ftransaction_2eproto}, {
      &scc_info_Transaction_vrp_2ftransaction_2eproto.base,}};

static void InitDefaultsscc_info_SponsorFeeTransactionData_vrp_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vrp::_SponsorFeeTransactionData_default_instance_;
    new (ptr) ::vrp::SponsorFeeTransactionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vrp::SponsorFeeTransactionData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SponsorFeeTransactionData_vrp_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SponsorFeeTransactionData_vrp_2ftransaction_2eproto}, {
      &scc_info_Amount_vrp_2famount_2eproto.base,}};

static void InitDefaultsscc_info_Transaction_vrp_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vrp::_Transaction_default_instance_;
    new (ptr) ::vrp::Transaction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vrp::Transaction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<19> scc_info_Transaction_vrp_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 19, 0, InitDefaultsscc_info_Transaction_vrp_2ftransaction_2eproto}, {
      &scc_info_Amount_vrp_2famount_2eproto.base,
      &scc_info_GenesisTransactionData_vrp_2ftransaction_2eproto.base,
      &scc_info_PaymentTransactionData_vrp_2ftransaction_2eproto.base,
      &scc_info_IssueTransactionData_vrp_2ftransaction_2eproto.base,
      &scc_info_TransferTransactionData_vrp_2ftransaction_2eproto.base,
      &scc_info_ReissueTransactionData_vrp_2ftransaction_2eproto.base,
      &scc_info_BurnTransactionData_vrp_2ftransaction_2eproto.base,
      &scc_info_ExchangeTransactionData_vrp_2ftransaction_2eproto.base,
      &scc_info_LeaseTransactionData_vrp_2ftransaction_2eproto.base,
      &scc_info_LeaseCancelTransactionData_vrp_2ftransaction_2eproto.base,
      &scc_info_CreateAliasTransactionData_vrp_2ftransaction_2eproto.base,
      &scc_info_MassTransferTransactionData_vrp_2ftransaction_2eproto.base,
      &scc_info_DataTransactionData_vrp_2ftransaction_2eproto.base,
      &scc_info_SetScriptTransactionData_vrp_2ftransaction_2eproto.base,
      &scc_info_SponsorFeeTransactionData_vrp_2ftransaction_2eproto.base,
      &scc_info_SetAssetScriptTransactionData_vrp_2ftransaction_2eproto.base,
      &scc_info_InvokeScriptTransactionData_vrp_2ftransaction_2eproto.base,
      &scc_info_UpdateAssetInfoTransactionData_vrp_2ftransaction_2eproto.base,
      &scc_info_PrivatePaymentTransactionData_vrp_2ftransaction_2eproto.base,}};

static void InitDefaultsscc_info_TransferTransactionData_vrp_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vrp::_TransferTransactionData_default_instance_;
    new (ptr) ::vrp::TransferTransactionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vrp::TransferTransactionData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TransferTransactionData_vrp_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TransferTransactionData_vrp_2ftransaction_2eproto}, {
      &scc_info_Recipient_vrp_2frecipient_2eproto.base,
      &scc_info_Amount_vrp_2famount_2eproto.base,}};

static void InitDefaultsscc_info_UpdateAssetInfoTransactionData_vrp_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vrp::_UpdateAssetInfoTransactionData_default_instance_;
    new (ptr) ::vrp::UpdateAssetInfoTransactionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vrp::UpdateAssetInfoTransactionData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateAssetInfoTransactionData_vrp_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdateAssetInfoTransactionData_vrp_2ftransaction_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_vrp_2ftransaction_2eproto[23];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_vrp_2ftransaction_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_vrp_2ftransaction_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_vrp_2ftransaction_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vrp::SignedTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::vrp::SignedTransaction, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::vrp::SignedTransactionDefaultTypeInternal, vrp_transaction_),
  offsetof(::vrp::SignedTransactionDefaultTypeInternal, ethereum_transaction_),
  PROTOBUF_FIELD_OFFSET(::vrp::SignedTransaction, proofs_),
  PROTOBUF_FIELD_OFFSET(::vrp::SignedTransaction, transaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vrp::Transaction, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::vrp::Transaction, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vrp::Transaction, chain_id_),
  PROTOBUF_FIELD_OFFSET(::vrp::Transaction, sender_public_key_),
  PROTOBUF_FIELD_OFFSET(::vrp::Transaction, fee_),
  PROTOBUF_FIELD_OFFSET(::vrp::Transaction, timestamp_),
  PROTOBUF_FIELD_OFFSET(::vrp::Transaction, version_),
  offsetof(::vrp::TransactionDefaultTypeInternal, genesis_),
  offsetof(::vrp::TransactionDefaultTypeInternal, payment_),
  offsetof(::vrp::TransactionDefaultTypeInternal, issue_),
  offsetof(::vrp::TransactionDefaultTypeInternal, transfer_),
  offsetof(::vrp::TransactionDefaultTypeInternal, reissue_),
  offsetof(::vrp::TransactionDefaultTypeInternal, burn_),
  offsetof(::vrp::TransactionDefaultTypeInternal, exchange_),
  offsetof(::vrp::TransactionDefaultTypeInternal, lease_),
  offsetof(::vrp::TransactionDefaultTypeInternal, lease_cancel_),
  offsetof(::vrp::TransactionDefaultTypeInternal, create_alias_),
  offsetof(::vrp::TransactionDefaultTypeInternal, mass_transfer_),
  offsetof(::vrp::TransactionDefaultTypeInternal, data_transaction_),
  offsetof(::vrp::TransactionDefaultTypeInternal, set_script_),
  offsetof(::vrp::TransactionDefaultTypeInternal, sponsor_fee_),
  offsetof(::vrp::TransactionDefaultTypeInternal, set_asset_script_),
  offsetof(::vrp::TransactionDefaultTypeInternal, invoke_script_),
  offsetof(::vrp::TransactionDefaultTypeInternal, update_asset_info_),
  offsetof(::vrp::TransactionDefaultTypeInternal, anonymous_tx_),
  PROTOBUF_FIELD_OFFSET(::vrp::Transaction, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vrp::GenesisTransactionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vrp::GenesisTransactionData, recipient_address_),
  PROTOBUF_FIELD_OFFSET(::vrp::GenesisTransactionData, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vrp::PaymentTransactionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vrp::PaymentTransactionData, recipient_address_),
  PROTOBUF_FIELD_OFFSET(::vrp::PaymentTransactionData, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vrp::TransferTransactionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vrp::TransferTransactionData, recipient_),
  PROTOBUF_FIELD_OFFSET(::vrp::TransferTransactionData, amount_),
  PROTOBUF_FIELD_OFFSET(::vrp::TransferTransactionData, attachment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vrp::CreateAliasTransactionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vrp::CreateAliasTransactionData, alias_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vrp::DataTransactionData_DataEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::vrp::DataTransactionData_DataEntry, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vrp::DataTransactionData_DataEntry, key_),
  offsetof(::vrp::DataTransactionData_DataEntryDefaultTypeInternal, int_value_),
  offsetof(::vrp::DataTransactionData_DataEntryDefaultTypeInternal, bool_value_),
  offsetof(::vrp::DataTransactionData_DataEntryDefaultTypeInternal, binary_value_),
  offsetof(::vrp::DataTransactionData_DataEntryDefaultTypeInternal, string_value_),
  PROTOBUF_FIELD_OFFSET(::vrp::DataTransactionData_DataEntry, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vrp::DataTransactionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vrp::DataTransactionData, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vrp::MassTransferTransactionData_Transfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vrp::MassTransferTransactionData_Transfer, recipient_),
  PROTOBUF_FIELD_OFFSET(::vrp::MassTransferTransactionData_Transfer, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vrp::MassTransferTransactionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vrp::MassTransferTransactionData, asset_id_),
  PROTOBUF_FIELD_OFFSET(::vrp::MassTransferTransactionData, transfers_),
  PROTOBUF_FIELD_OFFSET(::vrp::MassTransferTransactionData, attachment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vrp::LeaseTransactionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vrp::LeaseTransactionData, recipient_),
  PROTOBUF_FIELD_OFFSET(::vrp::LeaseTransactionData, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vrp::LeaseCancelTransactionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vrp::LeaseCancelTransactionData, lease_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vrp::BurnTransactionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vrp::BurnTransactionData, asset_amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vrp::IssueTransactionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vrp::IssueTransactionData, name_),
  PROTOBUF_FIELD_OFFSET(::vrp::IssueTransactionData, description_),
  PROTOBUF_FIELD_OFFSET(::vrp::IssueTransactionData, amount_),
  PROTOBUF_FIELD_OFFSET(::vrp::IssueTransactionData, decimals_),
  PROTOBUF_FIELD_OFFSET(::vrp::IssueTransactionData, reissuable_),
  PROTOBUF_FIELD_OFFSET(::vrp::IssueTransactionData, script_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vrp::ReissueTransactionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vrp::ReissueTransactionData, asset_amount_),
  PROTOBUF_FIELD_OFFSET(::vrp::ReissueTransactionData, reissuable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vrp::SetAssetScriptTransactionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vrp::SetAssetScriptTransactionData, asset_id_),
  PROTOBUF_FIELD_OFFSET(::vrp::SetAssetScriptTransactionData, script_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vrp::SetScriptTransactionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vrp::SetScriptTransactionData, script_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vrp::ExchangeTransactionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vrp::ExchangeTransactionData, amount_),
  PROTOBUF_FIELD_OFFSET(::vrp::ExchangeTransactionData, price_),
  PROTOBUF_FIELD_OFFSET(::vrp::ExchangeTransactionData, buy_matcher_fee_),
  PROTOBUF_FIELD_OFFSET(::vrp::ExchangeTransactionData, sell_matcher_fee_),
  PROTOBUF_FIELD_OFFSET(::vrp::ExchangeTransactionData, orders_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vrp::SponsorFeeTransactionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vrp::SponsorFeeTransactionData, min_fee_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vrp::InvokeScriptTransactionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vrp::InvokeScriptTransactionData, d_app_),
  PROTOBUF_FIELD_OFFSET(::vrp::InvokeScriptTransactionData, function_call_),
  PROTOBUF_FIELD_OFFSET(::vrp::InvokeScriptTransactionData, payments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vrp::UpdateAssetInfoTransactionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vrp::UpdateAssetInfoTransactionData, asset_id_),
  PROTOBUF_FIELD_OFFSET(::vrp::UpdateAssetInfoTransactionData, name_),
  PROTOBUF_FIELD_OFFSET(::vrp::UpdateAssetInfoTransactionData, description_),
  PROTOBUF_FIELD_OFFSET(::vrp::UpdateAssetInfoTransactionData, image_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vrp::InvokeExpressionTransactionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vrp::InvokeExpressionTransactionData, expression_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vrp::PrivatePaymentTransactionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vrp::PrivatePaymentTransactionData, recipient_address_),
  PROTOBUF_FIELD_OFFSET(::vrp::PrivatePaymentTransactionData, amount_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::vrp::SignedTransaction)},
  { 9, -1, sizeof(::vrp::Transaction)},
  { 38, -1, sizeof(::vrp::GenesisTransactionData)},
  { 45, -1, sizeof(::vrp::PaymentTransactionData)},
  { 52, -1, sizeof(::vrp::TransferTransactionData)},
  { 60, -1, sizeof(::vrp::CreateAliasTransactionData)},
  { 66, -1, sizeof(::vrp::DataTransactionData_DataEntry)},
  { 77, -1, sizeof(::vrp::DataTransactionData)},
  { 83, -1, sizeof(::vrp::MassTransferTransactionData_Transfer)},
  { 90, -1, sizeof(::vrp::MassTransferTransactionData)},
  { 98, -1, sizeof(::vrp::LeaseTransactionData)},
  { 105, -1, sizeof(::vrp::LeaseCancelTransactionData)},
  { 111, -1, sizeof(::vrp::BurnTransactionData)},
  { 117, -1, sizeof(::vrp::IssueTransactionData)},
  { 128, -1, sizeof(::vrp::ReissueTransactionData)},
  { 135, -1, sizeof(::vrp::SetAssetScriptTransactionData)},
  { 142, -1, sizeof(::vrp::SetScriptTransactionData)},
  { 148, -1, sizeof(::vrp::ExchangeTransactionData)},
  { 158, -1, sizeof(::vrp::SponsorFeeTransactionData)},
  { 164, -1, sizeof(::vrp::InvokeScriptTransactionData)},
  { 172, -1, sizeof(::vrp::UpdateAssetInfoTransactionData)},
  { 181, -1, sizeof(::vrp::InvokeExpressionTransactionData)},
  { 187, -1, sizeof(::vrp::PrivatePaymentTransactionData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vrp::_SignedTransaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vrp::_Transaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vrp::_GenesisTransactionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vrp::_PaymentTransactionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vrp::_TransferTransactionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vrp::_CreateAliasTransactionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vrp::_DataTransactionData_DataEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vrp::_DataTransactionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vrp::_MassTransferTransactionData_Transfer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vrp::_MassTransferTransactionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vrp::_LeaseTransactionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vrp::_LeaseCancelTransactionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vrp::_BurnTransactionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vrp::_IssueTransactionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vrp::_ReissueTransactionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vrp::_SetAssetScriptTransactionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vrp::_SetScriptTransactionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vrp::_ExchangeTransactionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vrp::_SponsorFeeTransactionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vrp::_InvokeScriptTransactionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vrp::_UpdateAssetInfoTransactionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vrp::_InvokeExpressionTransactionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vrp::_PrivatePaymentTransactionData_default_instance_),
};

const char descriptor_table_protodef_vrp_2ftransaction_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025vrp/transaction.proto\022\003vrp\032\020vrp/amount"
  ".proto\032\023vrp/recipient.proto\032\017vrp/order.p"
  "roto\"\177\n\021SignedTransaction\022+\n\017vrp_transac"
  "tion\030\001 \001(\0132\020.vrp.TransactionH\000\022\036\n\024ethere"
  "um_transaction\030\003 \001(\014H\000\022\016\n\006proofs\030\002 \003(\014B\r"
  "\n\013transaction\"\276\010\n\013Transaction\022\020\n\010chain_i"
  "d\030\001 \001(\005\022\031\n\021sender_public_key\030\002 \001(\014\022\030\n\003fe"
  "e\030\003 \001(\0132\013.vrp.Amount\022\021\n\ttimestamp\030\004 \001(\003\022"
  "\017\n\007version\030\005 \001(\005\022.\n\007genesis\030e \001(\0132\033.vrp."
  "GenesisTransactionDataH\000\022.\n\007payment\030f \001("
  "\0132\033.vrp.PaymentTransactionDataH\000\022*\n\005issu"
  "e\030g \001(\0132\031.vrp.IssueTransactionDataH\000\0220\n\010"
  "transfer\030h \001(\0132\034.vrp.TransferTransaction"
  "DataH\000\022.\n\007reissue\030i \001(\0132\033.vrp.ReissueTra"
  "nsactionDataH\000\022(\n\004burn\030j \001(\0132\030.vrp.BurnT"
  "ransactionDataH\000\0220\n\010exchange\030k \001(\0132\034.vrp"
  ".ExchangeTransactionDataH\000\022*\n\005lease\030l \001("
  "\0132\031.vrp.LeaseTransactionDataH\000\0227\n\014lease_"
  "cancel\030m \001(\0132\037.vrp.LeaseCancelTransactio"
  "nDataH\000\0227\n\014create_alias\030n \001(\0132\037.vrp.Crea"
  "teAliasTransactionDataH\000\0229\n\rmass_transfe"
  "r\030o \001(\0132 .vrp.MassTransferTransactionDat"
  "aH\000\0224\n\020data_transaction\030p \001(\0132\030.vrp.Data"
  "TransactionDataH\000\0223\n\nset_script\030q \001(\0132\035."
  "vrp.SetScriptTransactionDataH\000\0225\n\013sponso"
  "r_fee\030r \001(\0132\036.vrp.SponsorFeeTransactionD"
  "ataH\000\022>\n\020set_asset_script\030s \001(\0132\".vrp.Se"
  "tAssetScriptTransactionDataH\000\0229\n\rinvoke_"
  "script\030t \001(\0132 .vrp.InvokeScriptTransacti"
  "onDataH\000\022@\n\021update_asset_info\030u \001(\0132#.vr"
  "p.UpdateAssetInfoTransactionDataH\000\022:\n\014an"
  "onymous_tx\030v \001(\0132\".vrp.PrivatePaymentTra"
  "nsactionDataH\000B\006\n\004data\"C\n\026GenesisTransac"
  "tionData\022\031\n\021recipient_address\030\001 \001(\014\022\016\n\006a"
  "mount\030\002 \001(\003\"C\n\026PaymentTransactionData\022\031\n"
  "\021recipient_address\030\001 \001(\014\022\016\n\006amount\030\002 \001(\003"
  "\"m\n\027TransferTransactionData\022!\n\trecipient"
  "\030\001 \001(\0132\016.vrp.Recipient\022\033\n\006amount\030\002 \001(\0132\013"
  ".vrp.Amount\022\022\n\nattachment\030\003 \001(\014\"+\n\032Creat"
  "eAliasTransactionData\022\r\n\005alias\030\001 \001(\t\"\305\001\n"
  "\023DataTransactionData\0220\n\004data\030\001 \003(\0132\".vrp"
  ".DataTransactionData.DataEntry\032|\n\tDataEn"
  "try\022\013\n\003key\030\001 \001(\t\022\023\n\tint_value\030\n \001(\003H\000\022\024\n"
  "\nbool_value\030\013 \001(\010H\000\022\026\n\014binary_value\030\014 \001("
  "\014H\000\022\026\n\014string_value\030\r \001(\tH\000B\007\n\005value\"\300\001\n"
  "\033MassTransferTransactionData\022\020\n\010asset_id"
  "\030\001 \001(\014\022<\n\ttransfers\030\002 \003(\0132).vrp.MassTran"
  "sferTransactionData.Transfer\022\022\n\nattachme"
  "nt\030\003 \001(\014\032=\n\010Transfer\022!\n\trecipient\030\001 \001(\0132"
  "\016.vrp.Recipient\022\016\n\006amount\030\002 \001(\003\"I\n\024Lease"
  "TransactionData\022!\n\trecipient\030\001 \001(\0132\016.vrp"
  ".Recipient\022\016\n\006amount\030\002 \001(\003\".\n\032LeaseCance"
  "lTransactionData\022\020\n\010lease_id\030\001 \001(\014\"8\n\023Bu"
  "rnTransactionData\022!\n\014asset_amount\030\001 \001(\0132"
  "\013.vrp.Amount\"\177\n\024IssueTransactionData\022\014\n\004"
  "name\030\001 \001(\t\022\023\n\013description\030\002 \001(\t\022\016\n\006amoun"
  "t\030\003 \001(\003\022\020\n\010decimals\030\004 \001(\005\022\022\n\nreissuable\030"
  "\005 \001(\010\022\016\n\006script\030\006 \001(\014\"O\n\026ReissueTransact"
  "ionData\022!\n\014asset_amount\030\001 \001(\0132\013.vrp.Amou"
  "nt\022\022\n\nreissuable\030\002 \001(\010\"A\n\035SetAssetScript"
  "TransactionData\022\020\n\010asset_id\030\001 \001(\014\022\016\n\006scr"
  "ipt\030\002 \001(\014\"*\n\030SetScriptTransactionData\022\016\n"
  "\006script\030\001 \001(\014\"\207\001\n\027ExchangeTransactionDat"
  "a\022\016\n\006amount\030\001 \001(\003\022\r\n\005price\030\002 \001(\003\022\027\n\017buy_"
  "matcher_fee\030\003 \001(\003\022\030\n\020sell_matcher_fee\030\004 "
  "\001(\003\022\032\n\006orders\030\005 \003(\0132\n.vrp.Order\"9\n\031Spons"
  "orFeeTransactionData\022\034\n\007min_fee\030\001 \001(\0132\013."
  "vrp.Amount\"r\n\033InvokeScriptTransactionDat"
  "a\022\035\n\005d_app\030\001 \001(\0132\016.vrp.Recipient\022\025\n\rfunc"
  "tion_call\030\002 \001(\014\022\035\n\010payments\030\003 \003(\0132\013.vrp."
  "Amount\"d\n\036UpdateAssetInfoTransactionData"
  "\022\020\n\010asset_id\030\001 \001(\014\022\014\n\004name\030\002 \001(\t\022\023\n\013desc"
  "ription\030\003 \001(\t\022\r\n\005image\030\004 \001(\t\"5\n\037InvokeEx"
  "pressionTransactionData\022\022\n\nexpression\030\001 "
  "\001(\014\"J\n\035PrivatePaymentTransactionData\022\031\n\021"
  "recipient_address\030\001 \001(\014\022\016\n\006amount\030\002 \001(\003B"
  "T\n\034com.vrp.protobuf.transactionZ.github."
  "com/eVESTXCOIN/govrp/grpc/generated/vrp\252"
  "\002\003VRPb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_vrp_2ftransaction_2eproto_deps[3] = {
  &::descriptor_table_vrp_2famount_2eproto,
  &::descriptor_table_vrp_2forder_2eproto,
  &::descriptor_table_vrp_2frecipient_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_vrp_2ftransaction_2eproto_sccs[23] = {
  &scc_info_BurnTransactionData_vrp_2ftransaction_2eproto.base,
  &scc_info_CreateAliasTransactionData_vrp_2ftransaction_2eproto.base,
  &scc_info_DataTransactionData_vrp_2ftransaction_2eproto.base,
  &scc_info_DataTransactionData_DataEntry_vrp_2ftransaction_2eproto.base,
  &scc_info_ExchangeTransactionData_vrp_2ftransaction_2eproto.base,
  &scc_info_GenesisTransactionData_vrp_2ftransaction_2eproto.base,
  &scc_info_InvokeExpressionTransactionData_vrp_2ftransaction_2eproto.base,
  &scc_info_InvokeScriptTransactionData_vrp_2ftransaction_2eproto.base,
  &scc_info_IssueTransactionData_vrp_2ftransaction_2eproto.base,
  &scc_info_LeaseCancelTransactionData_vrp_2ftransaction_2eproto.base,
  &scc_info_LeaseTransactionData_vrp_2ftransaction_2eproto.base,
  &scc_info_MassTransferTransactionData_vrp_2ftransaction_2eproto.base,
  &scc_info_MassTransferTransactionData_Transfer_vrp_2ftransaction_2eproto.base,
  &scc_info_PaymentTransactionData_vrp_2ftransaction_2eproto.base,
  &scc_info_PrivatePaymentTransactionData_vrp_2ftransaction_2eproto.base,
  &scc_info_ReissueTransactionData_vrp_2ftransaction_2eproto.base,
  &scc_info_SetAssetScriptTransactionData_vrp_2ftransaction_2eproto.base,
  &scc_info_SetScriptTransactionData_vrp_2ftransaction_2eproto.base,
  &scc_info_SignedTransaction_vrp_2ftransaction_2eproto.base,
  &scc_info_SponsorFeeTransactionData_vrp_2ftransaction_2eproto.base,
  &scc_info_Transaction_vrp_2ftransaction_2eproto.base,
  &scc_info_TransferTransactionData_vrp_2ftransaction_2eproto.base,
  &scc_info_UpdateAssetInfoTransactionData_vrp_2ftransaction_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_vrp_2ftransaction_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vrp_2ftransaction_2eproto = {
  false, false, descriptor_table_protodef_vrp_2ftransaction_2eproto, "vrp/transaction.proto", 3133,
  &descriptor_table_vrp_2ftransaction_2eproto_once, descriptor_table_vrp_2ftransaction_2eproto_sccs, descriptor_table_vrp_2ftransaction_2eproto_deps, 23, 3,
  schemas, file_default_instances, TableStruct_vrp_2ftransaction_2eproto::offsets,
  file_level_metadata_vrp_2ftransaction_2eproto, 23, file_level_enum_descriptors_vrp_2ftransaction_2eproto, file_level_service_descriptors_vrp_2ftransaction_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_vrp_2ftransaction_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_vrp_2ftransaction_2eproto)), true);
namespace vrp {

// ===================================================================

void SignedTransaction::InitAsDefaultInstance() {
  ::vrp::_SignedTransaction_default_instance_.vrp_transaction_ = const_cast< ::vrp::Transaction*>(
      ::vrp::Transaction::internal_default_instance());
  ::vrp::_SignedTransaction_default_instance_.ethereum_transaction_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class SignedTransaction::_Internal {
 public:
  static const ::vrp::Transaction& vrp_transaction(const SignedTransaction* msg);
};

const ::vrp::Transaction&
SignedTransaction::_Internal::vrp_transaction(const SignedTransaction* msg) {
  return *msg->transaction_.vrp_transaction_;
}
void SignedTransaction::set_allocated_vrp_transaction(::vrp::Transaction* vrp_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_transaction();
  if (vrp_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(vrp_transaction);
    if (message_arena != submessage_arena) {
      vrp_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vrp_transaction, submessage_arena);
    }
    set_has_vrp_transaction();
    transaction_.vrp_transaction_ = vrp_transaction;
  }
  // @@protoc_insertion_point(field_set_allocated:vrp.SignedTransaction.vrp_transaction)
}
SignedTransaction::SignedTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  proofs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vrp.SignedTransaction)
}
SignedTransaction::SignedTransaction(const SignedTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      proofs_(from.proofs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_transaction();
  switch (from.transaction_case()) {
    case kVrpTransaction: {
      _internal_mutable_vrp_transaction()->::vrp::Transaction::MergeFrom(from._internal_vrp_transaction());
      break;
    }
    case kEthereumTransaction: {
      _internal_set_ethereum_transaction(from._internal_ethereum_transaction());
      break;
    }
    case TRANSACTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vrp.SignedTransaction)
}

void SignedTransaction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SignedTransaction_vrp_2ftransaction_2eproto.base);
  clear_has_transaction();
}

SignedTransaction::~SignedTransaction() {
  // @@protoc_insertion_point(destructor:vrp.SignedTransaction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SignedTransaction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_transaction()) {
    clear_transaction();
  }
}

void SignedTransaction::ArenaDtor(void* object) {
  SignedTransaction* _this = reinterpret_cast< SignedTransaction* >(object);
  (void)_this;
}
void SignedTransaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignedTransaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignedTransaction& SignedTransaction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignedTransaction_vrp_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void SignedTransaction::clear_transaction() {
// @@protoc_insertion_point(one_of_clear_start:vrp.SignedTransaction)
  switch (transaction_case()) {
    case kVrpTransaction: {
      if (GetArena() == nullptr) {
        delete transaction_.vrp_transaction_;
      }
      break;
    }
    case kEthereumTransaction: {
      transaction_.ethereum_transaction_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case TRANSACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TRANSACTION_NOT_SET;
}


void SignedTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:vrp.SignedTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proofs_.Clear();
  clear_transaction();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignedTransaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vrp.Transaction vrp_transaction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vrp_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes proofs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_proofs();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes ethereum_transaction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ethereum_transaction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignedTransaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vrp.SignedTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vrp.Transaction vrp_transaction = 1;
  if (_internal_has_vrp_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::vrp_transaction(this), target, stream);
  }

  // repeated bytes proofs = 2;
  for (int i = 0, n = this->_internal_proofs_size(); i < n; i++) {
    const auto& s = this->_internal_proofs(i);
    target = stream->WriteBytes(2, s, target);
  }

  // bytes ethereum_transaction = 3;
  if (_internal_has_ethereum_transaction()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_ethereum_transaction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vrp.SignedTransaction)
  return target;
}

size_t SignedTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vrp.SignedTransaction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes proofs = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(proofs_.size());
  for (int i = 0, n = proofs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      proofs_.Get(i));
  }

  switch (transaction_case()) {
    // .vrp.Transaction vrp_transaction = 1;
    case kVrpTransaction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_.vrp_transaction_);
      break;
    }
    // bytes ethereum_transaction = 3;
    case kEthereumTransaction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_ethereum_transaction());
      break;
    }
    case TRANSACTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignedTransaction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vrp.SignedTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  const SignedTransaction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignedTransaction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vrp.SignedTransaction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vrp.SignedTransaction)
    MergeFrom(*source);
  }
}

void SignedTransaction::MergeFrom(const SignedTransaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vrp.SignedTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  proofs_.MergeFrom(from.proofs_);
  switch (from.transaction_case()) {
    case kVrpTransaction: {
      _internal_mutable_vrp_transaction()->::vrp::Transaction::MergeFrom(from._internal_vrp_transaction());
      break;
    }
    case kEthereumTransaction: {
      _internal_set_ethereum_transaction(from._internal_ethereum_transaction());
      break;
    }
    case TRANSACTION_NOT_SET: {
      break;
    }
  }
}

void SignedTransaction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vrp.SignedTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignedTransaction::CopyFrom(const SignedTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vrp.SignedTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignedTransaction::IsInitialized() const {
  return true;
}

void SignedTransaction::InternalSwap(SignedTransaction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  proofs_.InternalSwap(&other->proofs_);
  swap(transaction_, other->transaction_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignedTransaction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Transaction::InitAsDefaultInstance() {
  ::vrp::_Transaction_default_instance_._instance.get_mutable()->fee_ = const_cast< ::vrp::Amount*>(
      ::vrp::Amount::internal_default_instance());
  ::vrp::_Transaction_default_instance_.genesis_ = const_cast< ::vrp::GenesisTransactionData*>(
      ::vrp::GenesisTransactionData::internal_default_instance());
  ::vrp::_Transaction_default_instance_.payment_ = const_cast< ::vrp::PaymentTransactionData*>(
      ::vrp::PaymentTransactionData::internal_default_instance());
  ::vrp::_Transaction_default_instance_.issue_ = const_cast< ::vrp::IssueTransactionData*>(
      ::vrp::IssueTransactionData::internal_default_instance());
  ::vrp::_Transaction_default_instance_.transfer_ = const_cast< ::vrp::TransferTransactionData*>(
      ::vrp::TransferTransactionData::internal_default_instance());
  ::vrp::_Transaction_default_instance_.reissue_ = const_cast< ::vrp::ReissueTransactionData*>(
      ::vrp::ReissueTransactionData::internal_default_instance());
  ::vrp::_Transaction_default_instance_.burn_ = const_cast< ::vrp::BurnTransactionData*>(
      ::vrp::BurnTransactionData::internal_default_instance());
  ::vrp::_Transaction_default_instance_.exchange_ = const_cast< ::vrp::ExchangeTransactionData*>(
      ::vrp::ExchangeTransactionData::internal_default_instance());
  ::vrp::_Transaction_default_instance_.lease_ = const_cast< ::vrp::LeaseTransactionData*>(
      ::vrp::LeaseTransactionData::internal_default_instance());
  ::vrp::_Transaction_default_instance_.lease_cancel_ = const_cast< ::vrp::LeaseCancelTransactionData*>(
      ::vrp::LeaseCancelTransactionData::internal_default_instance());
  ::vrp::_Transaction_default_instance_.create_alias_ = const_cast< ::vrp::CreateAliasTransactionData*>(
      ::vrp::CreateAliasTransactionData::internal_default_instance());
  ::vrp::_Transaction_default_instance_.mass_transfer_ = const_cast< ::vrp::MassTransferTransactionData*>(
      ::vrp::MassTransferTransactionData::internal_default_instance());
  ::vrp::_Transaction_default_instance_.data_transaction_ = const_cast< ::vrp::DataTransactionData*>(
      ::vrp::DataTransactionData::internal_default_instance());
  ::vrp::_Transaction_default_instance_.set_script_ = const_cast< ::vrp::SetScriptTransactionData*>(
      ::vrp::SetScriptTransactionData::internal_default_instance());
  ::vrp::_Transaction_default_instance_.sponsor_fee_ = const_cast< ::vrp::SponsorFeeTransactionData*>(
      ::vrp::SponsorFeeTransactionData::internal_default_instance());
  ::vrp::_Transaction_default_instance_.set_asset_script_ = const_cast< ::vrp::SetAssetScriptTransactionData*>(
      ::vrp::SetAssetScriptTransactionData::internal_default_instance());
  ::vrp::_Transaction_default_instance_.invoke_script_ = const_cast< ::vrp::InvokeScriptTransactionData*>(
      ::vrp::InvokeScriptTransactionData::internal_default_instance());
  ::vrp::_Transaction_default_instance_.update_asset_info_ = const_cast< ::vrp::UpdateAssetInfoTransactionData*>(
      ::vrp::UpdateAssetInfoTransactionData::internal_default_instance());
  ::vrp::_Transaction_default_instance_.anonymous_tx_ = const_cast< ::vrp::PrivatePaymentTransactionData*>(
      ::vrp::PrivatePaymentTransactionData::internal_default_instance());
}
class Transaction::_Internal {
 public:
  static const ::vrp::Amount& fee(const Transaction* msg);
  static const ::vrp::GenesisTransactionData& genesis(const Transaction* msg);
  static const ::vrp::PaymentTransactionData& payment(const Transaction* msg);
  static const ::vrp::IssueTransactionData& issue(const Transaction* msg);
  static const ::vrp::TransferTransactionData& transfer(const Transaction* msg);
  static const ::vrp::ReissueTransactionData& reissue(const Transaction* msg);
  static const ::vrp::BurnTransactionData& burn(const Transaction* msg);
  static const ::vrp::ExchangeTransactionData& exchange(const Transaction* msg);
  static const ::vrp::LeaseTransactionData& lease(const Transaction* msg);
  static const ::vrp::LeaseCancelTransactionData& lease_cancel(const Transaction* msg);
  static const ::vrp::CreateAliasTransactionData& create_alias(const Transaction* msg);
  static const ::vrp::MassTransferTransactionData& mass_transfer(const Transaction* msg);
  static const ::vrp::DataTransactionData& data_transaction(const Transaction* msg);
  static const ::vrp::SetScriptTransactionData& set_script(const Transaction* msg);
  static const ::vrp::SponsorFeeTransactionData& sponsor_fee(const Transaction* msg);
  static const ::vrp::SetAssetScriptTransactionData& set_asset_script(const Transaction* msg);
  static const ::vrp::InvokeScriptTransactionData& invoke_script(const Transaction* msg);
  static const ::vrp::UpdateAssetInfoTransactionData& update_asset_info(const Transaction* msg);
  static const ::vrp::PrivatePaymentTransactionData& anonymous_tx(const Transaction* msg);
};

const ::vrp::Amount&
Transaction::_Internal::fee(const Transaction* msg) {
  return *msg->fee_;
}
const ::vrp::GenesisTransactionData&
Transaction::_Internal::genesis(const Transaction* msg) {
  return *msg->data_.genesis_;
}
const ::vrp::PaymentTransactionData&
Transaction::_Internal::payment(const Transaction* msg) {
  return *msg->data_.payment_;
}
const ::vrp::IssueTransactionData&
Transaction::_Internal::issue(const Transaction* msg) {
  return *msg->data_.issue_;
}
const ::vrp::TransferTransactionData&
Transaction::_Internal::transfer(const Transaction* msg) {
  return *msg->data_.transfer_;
}
const ::vrp::ReissueTransactionData&
Transaction::_Internal::reissue(const Transaction* msg) {
  return *msg->data_.reissue_;
}
const ::vrp::BurnTransactionData&
Transaction::_Internal::burn(const Transaction* msg) {
  return *msg->data_.burn_;
}
const ::vrp::ExchangeTransactionData&
Transaction::_Internal::exchange(const Transaction* msg) {
  return *msg->data_.exchange_;
}
const ::vrp::LeaseTransactionData&
Transaction::_Internal::lease(const Transaction* msg) {
  return *msg->data_.lease_;
}
const ::vrp::LeaseCancelTransactionData&
Transaction::_Internal::lease_cancel(const Transaction* msg) {
  return *msg->data_.lease_cancel_;
}
const ::vrp::CreateAliasTransactionData&
Transaction::_Internal::create_alias(const Transaction* msg) {
  return *msg->data_.create_alias_;
}
const ::vrp::MassTransferTransactionData&
Transaction::_Internal::mass_transfer(const Transaction* msg) {
  return *msg->data_.mass_transfer_;
}
const ::vrp::DataTransactionData&
Transaction::_Internal::data_transaction(const Transaction* msg) {
  return *msg->data_.data_transaction_;
}
const ::vrp::SetScriptTransactionData&
Transaction::_Internal::set_script(const Transaction* msg) {
  return *msg->data_.set_script_;
}
const ::vrp::SponsorFeeTransactionData&
Transaction::_Internal::sponsor_fee(const Transaction* msg) {
  return *msg->data_.sponsor_fee_;
}
const ::vrp::SetAssetScriptTransactionData&
Transaction::_Internal::set_asset_script(const Transaction* msg) {
  return *msg->data_.set_asset_script_;
}
const ::vrp::InvokeScriptTransactionData&
Transaction::_Internal::invoke_script(const Transaction* msg) {
  return *msg->data_.invoke_script_;
}
const ::vrp::UpdateAssetInfoTransactionData&
Transaction::_Internal::update_asset_info(const Transaction* msg) {
  return *msg->data_.update_asset_info_;
}
const ::vrp::PrivatePaymentTransactionData&
Transaction::_Internal::anonymous_tx(const Transaction* msg) {
  return *msg->data_.anonymous_tx_;
}
void Transaction::clear_fee() {
  if (GetArena() == nullptr && fee_ != nullptr) {
    delete fee_;
  }
  fee_ = nullptr;
}
void Transaction::set_allocated_genesis(::vrp::GenesisTransactionData* genesis) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (genesis) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(genesis);
    if (message_arena != submessage_arena) {
      genesis = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, genesis, submessage_arena);
    }
    set_has_genesis();
    data_.genesis_ = genesis;
  }
  // @@protoc_insertion_point(field_set_allocated:vrp.Transaction.genesis)
}
void Transaction::set_allocated_payment(::vrp::PaymentTransactionData* payment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (payment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(payment);
    if (message_arena != submessage_arena) {
      payment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payment, submessage_arena);
    }
    set_has_payment();
    data_.payment_ = payment;
  }
  // @@protoc_insertion_point(field_set_allocated:vrp.Transaction.payment)
}
void Transaction::set_allocated_issue(::vrp::IssueTransactionData* issue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (issue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(issue);
    if (message_arena != submessage_arena) {
      issue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, issue, submessage_arena);
    }
    set_has_issue();
    data_.issue_ = issue;
  }
  // @@protoc_insertion_point(field_set_allocated:vrp.Transaction.issue)
}
void Transaction::set_allocated_transfer(::vrp::TransferTransactionData* transfer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (transfer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transfer);
    if (message_arena != submessage_arena) {
      transfer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transfer, submessage_arena);
    }
    set_has_transfer();
    data_.transfer_ = transfer;
  }
  // @@protoc_insertion_point(field_set_allocated:vrp.Transaction.transfer)
}
void Transaction::set_allocated_reissue(::vrp::ReissueTransactionData* reissue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (reissue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reissue);
    if (message_arena != submessage_arena) {
      reissue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reissue, submessage_arena);
    }
    set_has_reissue();
    data_.reissue_ = reissue;
  }
  // @@protoc_insertion_point(field_set_allocated:vrp.Transaction.reissue)
}
void Transaction::set_allocated_burn(::vrp::BurnTransactionData* burn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (burn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(burn);
    if (message_arena != submessage_arena) {
      burn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, burn, submessage_arena);
    }
    set_has_burn();
    data_.burn_ = burn;
  }
  // @@protoc_insertion_point(field_set_allocated:vrp.Transaction.burn)
}
void Transaction::set_allocated_exchange(::vrp::ExchangeTransactionData* exchange) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (exchange) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(exchange);
    if (message_arena != submessage_arena) {
      exchange = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exchange, submessage_arena);
    }
    set_has_exchange();
    data_.exchange_ = exchange;
  }
  // @@protoc_insertion_point(field_set_allocated:vrp.Transaction.exchange)
}
void Transaction::set_allocated_lease(::vrp::LeaseTransactionData* lease) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (lease) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lease);
    if (message_arena != submessage_arena) {
      lease = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lease, submessage_arena);
    }
    set_has_lease();
    data_.lease_ = lease;
  }
  // @@protoc_insertion_point(field_set_allocated:vrp.Transaction.lease)
}
void Transaction::set_allocated_lease_cancel(::vrp::LeaseCancelTransactionData* lease_cancel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (lease_cancel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lease_cancel);
    if (message_arena != submessage_arena) {
      lease_cancel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lease_cancel, submessage_arena);
    }
    set_has_lease_cancel();
    data_.lease_cancel_ = lease_cancel;
  }
  // @@protoc_insertion_point(field_set_allocated:vrp.Transaction.lease_cancel)
}
void Transaction::set_allocated_create_alias(::vrp::CreateAliasTransactionData* create_alias) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (create_alias) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(create_alias);
    if (message_arena != submessage_arena) {
      create_alias = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_alias, submessage_arena);
    }
    set_has_create_alias();
    data_.create_alias_ = create_alias;
  }
  // @@protoc_insertion_point(field_set_allocated:vrp.Transaction.create_alias)
}
void Transaction::set_allocated_mass_transfer(::vrp::MassTransferTransactionData* mass_transfer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (mass_transfer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mass_transfer);
    if (message_arena != submessage_arena) {
      mass_transfer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mass_transfer, submessage_arena);
    }
    set_has_mass_transfer();
    data_.mass_transfer_ = mass_transfer;
  }
  // @@protoc_insertion_point(field_set_allocated:vrp.Transaction.mass_transfer)
}
void Transaction::set_allocated_data_transaction(::vrp::DataTransactionData* data_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (data_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data_transaction);
    if (message_arena != submessage_arena) {
      data_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_transaction, submessage_arena);
    }
    set_has_data_transaction();
    data_.data_transaction_ = data_transaction;
  }
  // @@protoc_insertion_point(field_set_allocated:vrp.Transaction.data_transaction)
}
void Transaction::set_allocated_set_script(::vrp::SetScriptTransactionData* set_script) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (set_script) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(set_script);
    if (message_arena != submessage_arena) {
      set_script = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_script, submessage_arena);
    }
    set_has_set_script();
    data_.set_script_ = set_script;
  }
  // @@protoc_insertion_point(field_set_allocated:vrp.Transaction.set_script)
}
void Transaction::set_allocated_sponsor_fee(::vrp::SponsorFeeTransactionData* sponsor_fee) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (sponsor_fee) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sponsor_fee);
    if (message_arena != submessage_arena) {
      sponsor_fee = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sponsor_fee, submessage_arena);
    }
    set_has_sponsor_fee();
    data_.sponsor_fee_ = sponsor_fee;
  }
  // @@protoc_insertion_point(field_set_allocated:vrp.Transaction.sponsor_fee)
}
void Transaction::set_allocated_set_asset_script(::vrp::SetAssetScriptTransactionData* set_asset_script) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (set_asset_script) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(set_asset_script);
    if (message_arena != submessage_arena) {
      set_asset_script = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_asset_script, submessage_arena);
    }
    set_has_set_asset_script();
    data_.set_asset_script_ = set_asset_script;
  }
  // @@protoc_insertion_point(field_set_allocated:vrp.Transaction.set_asset_script)
}
void Transaction::set_allocated_invoke_script(::vrp::InvokeScriptTransactionData* invoke_script) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (invoke_script) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(invoke_script);
    if (message_arena != submessage_arena) {
      invoke_script = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, invoke_script, submessage_arena);
    }
    set_has_invoke_script();
    data_.invoke_script_ = invoke_script;
  }
  // @@protoc_insertion_point(field_set_allocated:vrp.Transaction.invoke_script)
}
void Transaction::set_allocated_update_asset_info(::vrp::UpdateAssetInfoTransactionData* update_asset_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (update_asset_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(update_asset_info);
    if (message_arena != submessage_arena) {
      update_asset_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_asset_info, submessage_arena);
    }
    set_has_update_asset_info();
    data_.update_asset_info_ = update_asset_info;
  }
  // @@protoc_insertion_point(field_set_allocated:vrp.Transaction.update_asset_info)
}
void Transaction::set_allocated_anonymous_tx(::vrp::PrivatePaymentTransactionData* anonymous_tx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (anonymous_tx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(anonymous_tx);
    if (message_arena != submessage_arena) {
      anonymous_tx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anonymous_tx, submessage_arena);
    }
    set_has_anonymous_tx();
    data_.anonymous_tx_ = anonymous_tx;
  }
  // @@protoc_insertion_point(field_set_allocated:vrp.Transaction.anonymous_tx)
}
Transaction::Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vrp.Transaction)
}
Transaction::Transaction(const Transaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sender_public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sender_public_key().empty()) {
    sender_public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sender_public_key(),
      GetArena());
  }
  if (from._internal_has_fee()) {
    fee_ = new ::vrp::Amount(*from.fee_);
  } else {
    fee_ = nullptr;
  }
  ::memcpy(&chain_id_, &from.chain_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&chain_id_)) + sizeof(timestamp_));
  clear_has_data();
  switch (from.data_case()) {
    case kGenesis: {
      _internal_mutable_genesis()->::vrp::GenesisTransactionData::MergeFrom(from._internal_genesis());
      break;
    }
    case kPayment: {
      _internal_mutable_payment()->::vrp::PaymentTransactionData::MergeFrom(from._internal_payment());
      break;
    }
    case kIssue: {
      _internal_mutable_issue()->::vrp::IssueTransactionData::MergeFrom(from._internal_issue());
      break;
    }
    case kTransfer: {
      _internal_mutable_transfer()->::vrp::TransferTransactionData::MergeFrom(from._internal_transfer());
      break;
    }
    case kReissue: {
      _internal_mutable_reissue()->::vrp::ReissueTransactionData::MergeFrom(from._internal_reissue());
      break;
    }
    case kBurn: {
      _internal_mutable_burn()->::vrp::BurnTransactionData::MergeFrom(from._internal_burn());
      break;
    }
    case kExchange: {
      _internal_mutable_exchange()->::vrp::ExchangeTransactionData::MergeFrom(from._internal_exchange());
      break;
    }
    case kLease: {
      _internal_mutable_lease()->::vrp::LeaseTransactionData::MergeFrom(from._internal_lease());
      break;
    }
    case kLeaseCancel: {
      _internal_mutable_lease_cancel()->::vrp::LeaseCancelTransactionData::MergeFrom(from._internal_lease_cancel());
      break;
    }
    case kCreateAlias: {
      _internal_mutable_create_alias()->::vrp::CreateAliasTransactionData::MergeFrom(from._internal_create_alias());
      break;
    }
    case kMassTransfer: {
      _internal_mutable_mass_transfer()->::vrp::MassTransferTransactionData::MergeFrom(from._internal_mass_transfer());
      break;
    }
    case kDataTransaction: {
      _internal_mutable_data_transaction()->::vrp::DataTransactionData::MergeFrom(from._internal_data_transaction());
      break;
    }
    case kSetScript: {
      _internal_mutable_set_script()->::vrp::SetScriptTransactionData::MergeFrom(from._internal_set_script());
      break;
    }
    case kSponsorFee: {
      _internal_mutable_sponsor_fee()->::vrp::SponsorFeeTransactionData::MergeFrom(from._internal_sponsor_fee());
      break;
    }
    case kSetAssetScript: {
      _internal_mutable_set_asset_script()->::vrp::SetAssetScriptTransactionData::MergeFrom(from._internal_set_asset_script());
      break;
    }
    case kInvokeScript: {
      _internal_mutable_invoke_script()->::vrp::InvokeScriptTransactionData::MergeFrom(from._internal_invoke_script());
      break;
    }
    case kUpdateAssetInfo: {
      _internal_mutable_update_asset_info()->::vrp::UpdateAssetInfoTransactionData::MergeFrom(from._internal_update_asset_info());
      break;
    }
    case kAnonymousTx: {
      _internal_mutable_anonymous_tx()->::vrp::PrivatePaymentTransactionData::MergeFrom(from._internal_anonymous_tx());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vrp.Transaction)
}

void Transaction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Transaction_vrp_2ftransaction_2eproto.base);
  sender_public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&fee_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&fee_)) + sizeof(timestamp_));
  clear_has_data();
}

Transaction::~Transaction() {
  // @@protoc_insertion_point(destructor:vrp.Transaction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Transaction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sender_public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete fee_;
  if (has_data()) {
    clear_data();
  }
}

void Transaction::ArenaDtor(void* object) {
  Transaction* _this = reinterpret_cast< Transaction* >(object);
  (void)_this;
}
void Transaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transaction& Transaction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transaction_vrp_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void Transaction::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:vrp.Transaction)
  switch (data_case()) {
    case kGenesis: {
      if (GetArena() == nullptr) {
        delete data_.genesis_;
      }
      break;
    }
    case kPayment: {
      if (GetArena() == nullptr) {
        delete data_.payment_;
      }
      break;
    }
    case kIssue: {
      if (GetArena() == nullptr) {
        delete data_.issue_;
      }
      break;
    }
    case kTransfer: {
      if (GetArena() == nullptr) {
        delete data_.transfer_;
      }
      break;
    }
    case kReissue: {
      if (GetArena() == nullptr) {
        delete data_.reissue_;
      }
      break;
    }
    case kBurn: {
      if (GetArena() == nullptr) {
        delete data_.burn_;
      }
      break;
    }
    case kExchange: {
      if (GetArena() == nullptr) {
        delete data_.exchange_;
      }
      break;
    }
    case kLease: {
      if (GetArena() == nullptr) {
        delete data_.lease_;
      }
      break;
    }
    case kLeaseCancel: {
      if (GetArena() == nullptr) {
        delete data_.lease_cancel_;
      }
      break;
    }
    case kCreateAlias: {
      if (GetArena() == nullptr) {
        delete data_.create_alias_;
      }
      break;
    }
    case kMassTransfer: {
      if (GetArena() == nullptr) {
        delete data_.mass_transfer_;
      }
      break;
    }
    case kDataTransaction: {
      if (GetArena() == nullptr) {
        delete data_.data_transaction_;
      }
      break;
    }
    case kSetScript: {
      if (GetArena() == nullptr) {
        delete data_.set_script_;
      }
      break;
    }
    case kSponsorFee: {
      if (GetArena() == nullptr) {
        delete data_.sponsor_fee_;
      }
      break;
    }
    case kSetAssetScript: {
      if (GetArena() == nullptr) {
        delete data_.set_asset_script_;
      }
      break;
    }
    case kInvokeScript: {
      if (GetArena() == nullptr) {
        delete data_.invoke_script_;
      }
      break;
    }
    case kUpdateAssetInfo: {
      if (GetArena() == nullptr) {
        delete data_.update_asset_info_;
      }
      break;
    }
    case kAnonymousTx: {
      if (GetArena() == nullptr) {
        delete data_.anonymous_tx_;
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void Transaction::Clear() {
// @@protoc_insertion_point(message_clear_start:vrp.Transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sender_public_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && fee_ != nullptr) {
    delete fee_;
  }
  fee_ = nullptr;
  ::memset(&chain_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&chain_id_)) + sizeof(timestamp_));
  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chain_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chain_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sender_public_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sender_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vrp.Amount fee = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_fee(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vrp.GenesisTransactionData genesis = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_genesis(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vrp.PaymentTransactionData payment = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_payment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vrp.IssueTransactionData issue = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_issue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vrp.TransferTransactionData transfer = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_transfer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vrp.ReissueTransactionData reissue = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_reissue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vrp.BurnTransactionData burn = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_burn(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vrp.ExchangeTransactionData exchange = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_exchange(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vrp.LeaseTransactionData lease = 108;
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_lease(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vrp.LeaseCancelTransactionData lease_cancel = 109;
      case 109:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_lease_cancel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vrp.CreateAliasTransactionData create_alias = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_alias(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vrp.MassTransferTransactionData mass_transfer = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_mass_transfer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vrp.DataTransactionData data_transaction = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vrp.SetScriptTransactionData set_script = 113;
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_script(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vrp.SponsorFeeTransactionData sponsor_fee = 114;
      case 114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_sponsor_fee(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vrp.SetAssetScriptTransactionData set_asset_script = 115;
      case 115:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_asset_script(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vrp.InvokeScriptTransactionData invoke_script = 116;
      case 116:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_invoke_script(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vrp.UpdateAssetInfoTransactionData update_asset_info = 117;
      case 117:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_asset_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vrp.PrivatePaymentTransactionData anonymous_tx = 118;
      case 118:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_anonymous_tx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vrp.Transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chain_id = 1;
  if (this->chain_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chain_id(), target);
  }

  // bytes sender_public_key = 2;
  if (this->sender_public_key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_sender_public_key(), target);
  }

  // .vrp.Amount fee = 3;
  if (this->has_fee()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::fee(this), target, stream);
  }

  // int64 timestamp = 4;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_timestamp(), target);
  }

  // int32 version = 5;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_version(), target);
  }

  // .vrp.GenesisTransactionData genesis = 101;
  if (_internal_has_genesis()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        101, _Internal::genesis(this), target, stream);
  }

  // .vrp.PaymentTransactionData payment = 102;
  if (_internal_has_payment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        102, _Internal::payment(this), target, stream);
  }

  // .vrp.IssueTransactionData issue = 103;
  if (_internal_has_issue()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        103, _Internal::issue(this), target, stream);
  }

  // .vrp.TransferTransactionData transfer = 104;
  if (_internal_has_transfer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        104, _Internal::transfer(this), target, stream);
  }

  // .vrp.ReissueTransactionData reissue = 105;
  if (_internal_has_reissue()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        105, _Internal::reissue(this), target, stream);
  }

  // .vrp.BurnTransactionData burn = 106;
  if (_internal_has_burn()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        106, _Internal::burn(this), target, stream);
  }

  // .vrp.ExchangeTransactionData exchange = 107;
  if (_internal_has_exchange()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        107, _Internal::exchange(this), target, stream);
  }

  // .vrp.LeaseTransactionData lease = 108;
  if (_internal_has_lease()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        108, _Internal::lease(this), target, stream);
  }

  // .vrp.LeaseCancelTransactionData lease_cancel = 109;
  if (_internal_has_lease_cancel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        109, _Internal::lease_cancel(this), target, stream);
  }

  // .vrp.CreateAliasTransactionData create_alias = 110;
  if (_internal_has_create_alias()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        110, _Internal::create_alias(this), target, stream);
  }

  // .vrp.MassTransferTransactionData mass_transfer = 111;
  if (_internal_has_mass_transfer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        111, _Internal::mass_transfer(this), target, stream);
  }

  // .vrp.DataTransactionData data_transaction = 112;
  if (_internal_has_data_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        112, _Internal::data_transaction(this), target, stream);
  }

  // .vrp.SetScriptTransactionData set_script = 113;
  if (_internal_has_set_script()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        113, _Internal::set_script(this), target, stream);
  }

  // .vrp.SponsorFeeTransactionData sponsor_fee = 114;
  if (_internal_has_sponsor_fee()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        114, _Internal::sponsor_fee(this), target, stream);
  }

  // .vrp.SetAssetScriptTransactionData set_asset_script = 115;
  if (_internal_has_set_asset_script()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        115, _Internal::set_asset_script(this), target, stream);
  }

  // .vrp.InvokeScriptTransactionData invoke_script = 116;
  if (_internal_has_invoke_script()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        116, _Internal::invoke_script(this), target, stream);
  }

  // .vrp.UpdateAssetInfoTransactionData update_asset_info = 117;
  if (_internal_has_update_asset_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        117, _Internal::update_asset_info(this), target, stream);
  }

  // .vrp.PrivatePaymentTransactionData anonymous_tx = 118;
  if (_internal_has_anonymous_tx()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        118, _Internal::anonymous_tx(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vrp.Transaction)
  return target;
}

size_t Transaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vrp.Transaction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sender_public_key = 2;
  if (this->sender_public_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sender_public_key());
  }

  // .vrp.Amount fee = 3;
  if (this->has_fee()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fee_);
  }

  // int32 chain_id = 1;
  if (this->chain_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chain_id());
  }

  // int32 version = 5;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_version());
  }

  // int64 timestamp = 4;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  switch (data_case()) {
    // .vrp.GenesisTransactionData genesis = 101;
    case kGenesis: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.genesis_);
      break;
    }
    // .vrp.PaymentTransactionData payment = 102;
    case kPayment: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.payment_);
      break;
    }
    // .vrp.IssueTransactionData issue = 103;
    case kIssue: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.issue_);
      break;
    }
    // .vrp.TransferTransactionData transfer = 104;
    case kTransfer: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.transfer_);
      break;
    }
    // .vrp.ReissueTransactionData reissue = 105;
    case kReissue: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.reissue_);
      break;
    }
    // .vrp.BurnTransactionData burn = 106;
    case kBurn: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.burn_);
      break;
    }
    // .vrp.ExchangeTransactionData exchange = 107;
    case kExchange: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.exchange_);
      break;
    }
    // .vrp.LeaseTransactionData lease = 108;
    case kLease: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.lease_);
      break;
    }
    // .vrp.LeaseCancelTransactionData lease_cancel = 109;
    case kLeaseCancel: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.lease_cancel_);
      break;
    }
    // .vrp.CreateAliasTransactionData create_alias = 110;
    case kCreateAlias: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.create_alias_);
      break;
    }
    // .vrp.MassTransferTransactionData mass_transfer = 111;
    case kMassTransfer: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.mass_transfer_);
      break;
    }
    // .vrp.DataTransactionData data_transaction = 112;
    case kDataTransaction: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.data_transaction_);
      break;
    }
    // .vrp.SetScriptTransactionData set_script = 113;
    case kSetScript: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.set_script_);
      break;
    }
    // .vrp.SponsorFeeTransactionData sponsor_fee = 114;
    case kSponsorFee: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.sponsor_fee_);
      break;
    }
    // .vrp.SetAssetScriptTransactionData set_asset_script = 115;
    case kSetAssetScript: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.set_asset_script_);
      break;
    }
    // .vrp.InvokeScriptTransactionData invoke_script = 116;
    case kInvokeScript: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.invoke_script_);
      break;
    }
    // .vrp.UpdateAssetInfoTransactionData update_asset_info = 117;
    case kUpdateAssetInfo: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.update_asset_info_);
      break;
    }
    // .vrp.PrivatePaymentTransactionData anonymous_tx = 118;
    case kAnonymousTx: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.anonymous_tx_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transaction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vrp.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  const Transaction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transaction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vrp.Transaction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vrp.Transaction)
    MergeFrom(*source);
  }
}

void Transaction::MergeFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vrp.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sender_public_key().size() > 0) {
    _internal_set_sender_public_key(from._internal_sender_public_key());
  }
  if (from.has_fee()) {
    _internal_mutable_fee()->::vrp::Amount::MergeFrom(from._internal_fee());
  }
  if (from.chain_id() != 0) {
    _internal_set_chain_id(from._internal_chain_id());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  switch (from.data_case()) {
    case kGenesis: {
      _internal_mutable_genesis()->::vrp::GenesisTransactionData::MergeFrom(from._internal_genesis());
      break;
    }
    case kPayment: {
      _internal_mutable_payment()->::vrp::PaymentTransactionData::MergeFrom(from._internal_payment());
      break;
    }
    case kIssue: {
      _internal_mutable_issue()->::vrp::IssueTransactionData::MergeFrom(from._internal_issue());
      break;
    }
    case kTransfer: {
      _internal_mutable_transfer()->::vrp::TransferTransactionData::MergeFrom(from._internal_transfer());
      break;
    }
    case kReissue: {
      _internal_mutable_reissue()->::vrp::ReissueTransactionData::MergeFrom(from._internal_reissue());
      break;
    }
    case kBurn: {
      _internal_mutable_burn()->::vrp::BurnTransactionData::MergeFrom(from._internal_burn());
      break;
    }
    case kExchange: {
      _internal_mutable_exchange()->::vrp::ExchangeTransactionData::MergeFrom(from._internal_exchange());
      break;
    }
    case kLease: {
      _internal_mutable_lease()->::vrp::LeaseTransactionData::MergeFrom(from._internal_lease());
      break;
    }
    case kLeaseCancel: {
      _internal_mutable_lease_cancel()->::vrp::LeaseCancelTransactionData::MergeFrom(from._internal_lease_cancel());
      break;
    }
    case kCreateAlias: {
      _internal_mutable_create_alias()->::vrp::CreateAliasTransactionData::MergeFrom(from._internal_create_alias());
      break;
    }
    case kMassTransfer: {
      _internal_mutable_mass_transfer()->::vrp::MassTransferTransactionData::MergeFrom(from._internal_mass_transfer());
      break;
    }
    case kDataTransaction: {
      _internal_mutable_data_transaction()->::vrp::DataTransactionData::MergeFrom(from._internal_data_transaction());
      break;
    }
    case kSetScript: {
      _internal_mutable_set_script()->::vrp::SetScriptTransactionData::MergeFrom(from._internal_set_script());
      break;
    }
    case kSponsorFee: {
      _internal_mutable_sponsor_fee()->::vrp::SponsorFeeTransactionData::MergeFrom(from._internal_sponsor_fee());
      break;
    }
    case kSetAssetScript: {
      _internal_mutable_set_asset_script()->::vrp::SetAssetScriptTransactionData::MergeFrom(from._internal_set_asset_script());
      break;
    }
    case kInvokeScript: {
      _internal_mutable_invoke_script()->::vrp::InvokeScriptTransactionData::MergeFrom(from._internal_invoke_script());
      break;
    }
    case kUpdateAssetInfo: {
      _internal_mutable_update_asset_info()->::vrp::UpdateAssetInfoTransactionData::MergeFrom(from._internal_update_asset_info());
      break;
    }
    case kAnonymousTx: {
      _internal_mutable_anonymous_tx()->::vrp::PrivatePaymentTransactionData::MergeFrom(from._internal_anonymous_tx());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
}

void Transaction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vrp.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction::CopyFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vrp.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction::IsInitialized() const {
  return true;
}

void Transaction::InternalSwap(Transaction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sender_public_key_.Swap(&other->sender_public_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transaction, timestamp_)
      + sizeof(Transaction::timestamp_)
      - PROTOBUF_FIELD_OFFSET(Transaction, fee_)>(
          reinterpret_cast<char*>(&fee_),
          reinterpret_cast<char*>(&other->fee_));
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GenesisTransactionData::InitAsDefaultInstance() {
}
class GenesisTransactionData::_Internal {
 public:
};

GenesisTransactionData::GenesisTransactionData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vrp.GenesisTransactionData)
}
GenesisTransactionData::GenesisTransactionData(const GenesisTransactionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recipient_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recipient_address().empty()) {
    recipient_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_recipient_address(),
      GetArena());
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:vrp.GenesisTransactionData)
}

void GenesisTransactionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GenesisTransactionData_vrp_2ftransaction_2eproto.base);
  recipient_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_ = PROTOBUF_LONGLONG(0);
}

GenesisTransactionData::~GenesisTransactionData() {
  // @@protoc_insertion_point(destructor:vrp.GenesisTransactionData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GenesisTransactionData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  recipient_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GenesisTransactionData::ArenaDtor(void* object) {
  GenesisTransactionData* _this = reinterpret_cast< GenesisTransactionData* >(object);
  (void)_this;
}
void GenesisTransactionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenesisTransactionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenesisTransactionData& GenesisTransactionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenesisTransactionData_vrp_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void GenesisTransactionData::Clear() {
// @@protoc_insertion_point(message_clear_start:vrp.GenesisTransactionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recipient_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  amount_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenesisTransactionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes recipient_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_recipient_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenesisTransactionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vrp.GenesisTransactionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes recipient_address = 1;
  if (this->recipient_address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_recipient_address(), target);
  }

  // int64 amount = 2;
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vrp.GenesisTransactionData)
  return target;
}

size_t GenesisTransactionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vrp.GenesisTransactionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes recipient_address = 1;
  if (this->recipient_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_recipient_address());
  }

  // int64 amount = 2;
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenesisTransactionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vrp.GenesisTransactionData)
  GOOGLE_DCHECK_NE(&from, this);
  const GenesisTransactionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenesisTransactionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vrp.GenesisTransactionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vrp.GenesisTransactionData)
    MergeFrom(*source);
  }
}

void GenesisTransactionData::MergeFrom(const GenesisTransactionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vrp.GenesisTransactionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.recipient_address().size() > 0) {
    _internal_set_recipient_address(from._internal_recipient_address());
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
}

void GenesisTransactionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vrp.GenesisTransactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenesisTransactionData::CopyFrom(const GenesisTransactionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vrp.GenesisTransactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenesisTransactionData::IsInitialized() const {
  return true;
}

void GenesisTransactionData::InternalSwap(GenesisTransactionData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  recipient_address_.Swap(&other->recipient_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenesisTransactionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PaymentTransactionData::InitAsDefaultInstance() {
}
class PaymentTransactionData::_Internal {
 public:
};

PaymentTransactionData::PaymentTransactionData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vrp.PaymentTransactionData)
}
PaymentTransactionData::PaymentTransactionData(const PaymentTransactionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recipient_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recipient_address().empty()) {
    recipient_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_recipient_address(),
      GetArena());
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:vrp.PaymentTransactionData)
}

void PaymentTransactionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PaymentTransactionData_vrp_2ftransaction_2eproto.base);
  recipient_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_ = PROTOBUF_LONGLONG(0);
}

PaymentTransactionData::~PaymentTransactionData() {
  // @@protoc_insertion_point(destructor:vrp.PaymentTransactionData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PaymentTransactionData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  recipient_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PaymentTransactionData::ArenaDtor(void* object) {
  PaymentTransactionData* _this = reinterpret_cast< PaymentTransactionData* >(object);
  (void)_this;
}
void PaymentTransactionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PaymentTransactionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PaymentTransactionData& PaymentTransactionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PaymentTransactionData_vrp_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void PaymentTransactionData::Clear() {
// @@protoc_insertion_point(message_clear_start:vrp.PaymentTransactionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recipient_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  amount_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PaymentTransactionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes recipient_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_recipient_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PaymentTransactionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vrp.PaymentTransactionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes recipient_address = 1;
  if (this->recipient_address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_recipient_address(), target);
  }

  // int64 amount = 2;
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vrp.PaymentTransactionData)
  return target;
}

size_t PaymentTransactionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vrp.PaymentTransactionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes recipient_address = 1;
  if (this->recipient_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_recipient_address());
  }

  // int64 amount = 2;
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PaymentTransactionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vrp.PaymentTransactionData)
  GOOGLE_DCHECK_NE(&from, this);
  const PaymentTransactionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PaymentTransactionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vrp.PaymentTransactionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vrp.PaymentTransactionData)
    MergeFrom(*source);
  }
}

void PaymentTransactionData::MergeFrom(const PaymentTransactionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vrp.PaymentTransactionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.recipient_address().size() > 0) {
    _internal_set_recipient_address(from._internal_recipient_address());
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
}

void PaymentTransactionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vrp.PaymentTransactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PaymentTransactionData::CopyFrom(const PaymentTransactionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vrp.PaymentTransactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaymentTransactionData::IsInitialized() const {
  return true;
}

void PaymentTransactionData::InternalSwap(PaymentTransactionData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  recipient_address_.Swap(&other->recipient_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PaymentTransactionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransferTransactionData::InitAsDefaultInstance() {
  ::vrp::_TransferTransactionData_default_instance_._instance.get_mutable()->recipient_ = const_cast< ::vrp::Recipient*>(
      ::vrp::Recipient::internal_default_instance());
  ::vrp::_TransferTransactionData_default_instance_._instance.get_mutable()->amount_ = const_cast< ::vrp::Amount*>(
      ::vrp::Amount::internal_default_instance());
}
class TransferTransactionData::_Internal {
 public:
  static const ::vrp::Recipient& recipient(const TransferTransactionData* msg);
  static const ::vrp::Amount& amount(const TransferTransactionData* msg);
};

const ::vrp::Recipient&
TransferTransactionData::_Internal::recipient(const TransferTransactionData* msg) {
  return *msg->recipient_;
}
const ::vrp::Amount&
TransferTransactionData::_Internal::amount(const TransferTransactionData* msg) {
  return *msg->amount_;
}
void TransferTransactionData::clear_recipient() {
  if (GetArena() == nullptr && recipient_ != nullptr) {
    delete recipient_;
  }
  recipient_ = nullptr;
}
void TransferTransactionData::clear_amount() {
  if (GetArena() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
}
TransferTransactionData::TransferTransactionData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vrp.TransferTransactionData)
}
TransferTransactionData::TransferTransactionData(const TransferTransactionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  attachment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_attachment().empty()) {
    attachment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_attachment(),
      GetArena());
  }
  if (from._internal_has_recipient()) {
    recipient_ = new ::vrp::Recipient(*from.recipient_);
  } else {
    recipient_ = nullptr;
  }
  if (from._internal_has_amount()) {
    amount_ = new ::vrp::Amount(*from.amount_);
  } else {
    amount_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vrp.TransferTransactionData)
}

void TransferTransactionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransferTransactionData_vrp_2ftransaction_2eproto.base);
  attachment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&recipient_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&amount_) -
      reinterpret_cast<char*>(&recipient_)) + sizeof(amount_));
}

TransferTransactionData::~TransferTransactionData() {
  // @@protoc_insertion_point(destructor:vrp.TransferTransactionData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransferTransactionData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  attachment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete recipient_;
  if (this != internal_default_instance()) delete amount_;
}

void TransferTransactionData::ArenaDtor(void* object) {
  TransferTransactionData* _this = reinterpret_cast< TransferTransactionData* >(object);
  (void)_this;
}
void TransferTransactionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransferTransactionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransferTransactionData& TransferTransactionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransferTransactionData_vrp_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void TransferTransactionData::Clear() {
// @@protoc_insertion_point(message_clear_start:vrp.TransferTransactionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attachment_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && recipient_ != nullptr) {
    delete recipient_;
  }
  recipient_ = nullptr;
  if (GetArena() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferTransactionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vrp.Recipient recipient = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_recipient(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vrp.Amount amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_amount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes attachment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_attachment();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransferTransactionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vrp.TransferTransactionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vrp.Recipient recipient = 1;
  if (this->has_recipient()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::recipient(this), target, stream);
  }

  // .vrp.Amount amount = 2;
  if (this->has_amount()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::amount(this), target, stream);
  }

  // bytes attachment = 3;
  if (this->attachment().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_attachment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vrp.TransferTransactionData)
  return target;
}

size_t TransferTransactionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vrp.TransferTransactionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes attachment = 3;
  if (this->attachment().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attachment());
  }

  // .vrp.Recipient recipient = 1;
  if (this->has_recipient()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *recipient_);
  }

  // .vrp.Amount amount = 2;
  if (this->has_amount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *amount_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferTransactionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vrp.TransferTransactionData)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferTransactionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransferTransactionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vrp.TransferTransactionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vrp.TransferTransactionData)
    MergeFrom(*source);
  }
}

void TransferTransactionData::MergeFrom(const TransferTransactionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vrp.TransferTransactionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.attachment().size() > 0) {
    _internal_set_attachment(from._internal_attachment());
  }
  if (from.has_recipient()) {
    _internal_mutable_recipient()->::vrp::Recipient::MergeFrom(from._internal_recipient());
  }
  if (from.has_amount()) {
    _internal_mutable_amount()->::vrp::Amount::MergeFrom(from._internal_amount());
  }
}

void TransferTransactionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vrp.TransferTransactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferTransactionData::CopyFrom(const TransferTransactionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vrp.TransferTransactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferTransactionData::IsInitialized() const {
  return true;
}

void TransferTransactionData::InternalSwap(TransferTransactionData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attachment_.Swap(&other->attachment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransferTransactionData, amount_)
      + sizeof(TransferTransactionData::amount_)
      - PROTOBUF_FIELD_OFFSET(TransferTransactionData, recipient_)>(
          reinterpret_cast<char*>(&recipient_),
          reinterpret_cast<char*>(&other->recipient_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferTransactionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateAliasTransactionData::InitAsDefaultInstance() {
}
class CreateAliasTransactionData::_Internal {
 public:
};

CreateAliasTransactionData::CreateAliasTransactionData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vrp.CreateAliasTransactionData)
}
CreateAliasTransactionData::CreateAliasTransactionData(const CreateAliasTransactionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_alias().empty()) {
    alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_alias(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vrp.CreateAliasTransactionData)
}

void CreateAliasTransactionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateAliasTransactionData_vrp_2ftransaction_2eproto.base);
  alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreateAliasTransactionData::~CreateAliasTransactionData() {
  // @@protoc_insertion_point(destructor:vrp.CreateAliasTransactionData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateAliasTransactionData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  alias_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateAliasTransactionData::ArenaDtor(void* object) {
  CreateAliasTransactionData* _this = reinterpret_cast< CreateAliasTransactionData* >(object);
  (void)_this;
}
void CreateAliasTransactionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateAliasTransactionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateAliasTransactionData& CreateAliasTransactionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateAliasTransactionData_vrp_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void CreateAliasTransactionData::Clear() {
// @@protoc_insertion_point(message_clear_start:vrp.CreateAliasTransactionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alias_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateAliasTransactionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string alias = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_alias();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vrp.CreateAliasTransactionData.alias"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateAliasTransactionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vrp.CreateAliasTransactionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string alias = 1;
  if (this->alias().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alias().data(), static_cast<int>(this->_internal_alias().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vrp.CreateAliasTransactionData.alias");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_alias(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vrp.CreateAliasTransactionData)
  return target;
}

size_t CreateAliasTransactionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vrp.CreateAliasTransactionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string alias = 1;
  if (this->alias().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alias());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateAliasTransactionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vrp.CreateAliasTransactionData)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateAliasTransactionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateAliasTransactionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vrp.CreateAliasTransactionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vrp.CreateAliasTransactionData)
    MergeFrom(*source);
  }
}

void CreateAliasTransactionData::MergeFrom(const CreateAliasTransactionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vrp.CreateAliasTransactionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.alias().size() > 0) {
    _internal_set_alias(from._internal_alias());
  }
}

void CreateAliasTransactionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vrp.CreateAliasTransactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateAliasTransactionData::CopyFrom(const CreateAliasTransactionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vrp.CreateAliasTransactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAliasTransactionData::IsInitialized() const {
  return true;
}

void CreateAliasTransactionData::InternalSwap(CreateAliasTransactionData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  alias_.Swap(&other->alias_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateAliasTransactionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DataTransactionData_DataEntry::InitAsDefaultInstance() {
  ::vrp::_DataTransactionData_DataEntry_default_instance_.int_value_ = PROTOBUF_LONGLONG(0);
  ::vrp::_DataTransactionData_DataEntry_default_instance_.bool_value_ = false;
  ::vrp::_DataTransactionData_DataEntry_default_instance_.binary_value_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::vrp::_DataTransactionData_DataEntry_default_instance_.string_value_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class DataTransactionData_DataEntry::_Internal {
 public:
};

DataTransactionData_DataEntry::DataTransactionData_DataEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vrp.DataTransactionData.DataEntry)
}
DataTransactionData_DataEntry::DataTransactionData_DataEntry(const DataTransactionData_DataEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  clear_has_value();
  switch (from.value_case()) {
    case kIntValue: {
      _internal_set_int_value(from._internal_int_value());
      break;
    }
    case kBoolValue: {
      _internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case kBinaryValue: {
      _internal_set_binary_value(from._internal_binary_value());
      break;
    }
    case kStringValue: {
      _internal_set_string_value(from._internal_string_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vrp.DataTransactionData.DataEntry)
}

void DataTransactionData_DataEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataTransactionData_DataEntry_vrp_2ftransaction_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}

DataTransactionData_DataEntry::~DataTransactionData_DataEntry() {
  // @@protoc_insertion_point(destructor:vrp.DataTransactionData.DataEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DataTransactionData_DataEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_value()) {
    clear_value();
  }
}

void DataTransactionData_DataEntry::ArenaDtor(void* object) {
  DataTransactionData_DataEntry* _this = reinterpret_cast< DataTransactionData_DataEntry* >(object);
  (void)_this;
}
void DataTransactionData_DataEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataTransactionData_DataEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataTransactionData_DataEntry& DataTransactionData_DataEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataTransactionData_DataEntry_vrp_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void DataTransactionData_DataEntry::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:vrp.DataTransactionData.DataEntry)
  switch (value_case()) {
    case kIntValue: {
      // No need to clear
      break;
    }
    case kBoolValue: {
      // No need to clear
      break;
    }
    case kBinaryValue: {
      value_.binary_value_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kStringValue: {
      value_.string_value_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void DataTransactionData_DataEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:vrp.DataTransactionData.DataEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataTransactionData_DataEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vrp.DataTransactionData.DataEntry.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 int_value = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _internal_set_int_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool bool_value = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _internal_set_bool_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes binary_value = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_binary_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string string_value = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_string_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vrp.DataTransactionData.DataEntry.string_value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataTransactionData_DataEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vrp.DataTransactionData.DataEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vrp.DataTransactionData.DataEntry.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // int64 int_value = 10;
  if (_internal_has_int_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_int_value(), target);
  }

  // bool bool_value = 11;
  if (_internal_has_bool_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_bool_value(), target);
  }

  // bytes binary_value = 12;
  if (_internal_has_binary_value()) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_binary_value(), target);
  }

  // string string_value = 13;
  if (_internal_has_string_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string_value().data(), static_cast<int>(this->_internal_string_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vrp.DataTransactionData.DataEntry.string_value");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_string_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vrp.DataTransactionData.DataEntry)
  return target;
}

size_t DataTransactionData_DataEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vrp.DataTransactionData.DataEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  switch (value_case()) {
    // int64 int_value = 10;
    case kIntValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_int_value());
      break;
    }
    // bool bool_value = 11;
    case kBoolValue: {
      total_size += 1 + 1;
      break;
    }
    // bytes binary_value = 12;
    case kBinaryValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_binary_value());
      break;
    }
    // string string_value = 13;
    case kStringValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataTransactionData_DataEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vrp.DataTransactionData.DataEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const DataTransactionData_DataEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataTransactionData_DataEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vrp.DataTransactionData.DataEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vrp.DataTransactionData.DataEntry)
    MergeFrom(*source);
  }
}

void DataTransactionData_DataEntry::MergeFrom(const DataTransactionData_DataEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vrp.DataTransactionData.DataEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  switch (from.value_case()) {
    case kIntValue: {
      _internal_set_int_value(from._internal_int_value());
      break;
    }
    case kBoolValue: {
      _internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case kBinaryValue: {
      _internal_set_binary_value(from._internal_binary_value());
      break;
    }
    case kStringValue: {
      _internal_set_string_value(from._internal_string_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void DataTransactionData_DataEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vrp.DataTransactionData.DataEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataTransactionData_DataEntry::CopyFrom(const DataTransactionData_DataEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vrp.DataTransactionData.DataEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataTransactionData_DataEntry::IsInitialized() const {
  return true;
}

void DataTransactionData_DataEntry::InternalSwap(DataTransactionData_DataEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataTransactionData_DataEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DataTransactionData::InitAsDefaultInstance() {
}
class DataTransactionData::_Internal {
 public:
};

DataTransactionData::DataTransactionData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vrp.DataTransactionData)
}
DataTransactionData::DataTransactionData(const DataTransactionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vrp.DataTransactionData)
}

void DataTransactionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataTransactionData_vrp_2ftransaction_2eproto.base);
}

DataTransactionData::~DataTransactionData() {
  // @@protoc_insertion_point(destructor:vrp.DataTransactionData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DataTransactionData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DataTransactionData::ArenaDtor(void* object) {
  DataTransactionData* _this = reinterpret_cast< DataTransactionData* >(object);
  (void)_this;
}
void DataTransactionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataTransactionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataTransactionData& DataTransactionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataTransactionData_vrp_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void DataTransactionData::Clear() {
// @@protoc_insertion_point(message_clear_start:vrp.DataTransactionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataTransactionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vrp.DataTransactionData.DataEntry data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataTransactionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vrp.DataTransactionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vrp.DataTransactionData.DataEntry data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vrp.DataTransactionData)
  return target;
}

size_t DataTransactionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vrp.DataTransactionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vrp.DataTransactionData.DataEntry data = 1;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataTransactionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vrp.DataTransactionData)
  GOOGLE_DCHECK_NE(&from, this);
  const DataTransactionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataTransactionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vrp.DataTransactionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vrp.DataTransactionData)
    MergeFrom(*source);
  }
}

void DataTransactionData::MergeFrom(const DataTransactionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vrp.DataTransactionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void DataTransactionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vrp.DataTransactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataTransactionData::CopyFrom(const DataTransactionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vrp.DataTransactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataTransactionData::IsInitialized() const {
  return true;
}

void DataTransactionData::InternalSwap(DataTransactionData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataTransactionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MassTransferTransactionData_Transfer::InitAsDefaultInstance() {
  ::vrp::_MassTransferTransactionData_Transfer_default_instance_._instance.get_mutable()->recipient_ = const_cast< ::vrp::Recipient*>(
      ::vrp::Recipient::internal_default_instance());
}
class MassTransferTransactionData_Transfer::_Internal {
 public:
  static const ::vrp::Recipient& recipient(const MassTransferTransactionData_Transfer* msg);
};

const ::vrp::Recipient&
MassTransferTransactionData_Transfer::_Internal::recipient(const MassTransferTransactionData_Transfer* msg) {
  return *msg->recipient_;
}
void MassTransferTransactionData_Transfer::clear_recipient() {
  if (GetArena() == nullptr && recipient_ != nullptr) {
    delete recipient_;
  }
  recipient_ = nullptr;
}
MassTransferTransactionData_Transfer::MassTransferTransactionData_Transfer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vrp.MassTransferTransactionData.Transfer)
}
MassTransferTransactionData_Transfer::MassTransferTransactionData_Transfer(const MassTransferTransactionData_Transfer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_recipient()) {
    recipient_ = new ::vrp::Recipient(*from.recipient_);
  } else {
    recipient_ = nullptr;
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:vrp.MassTransferTransactionData.Transfer)
}

void MassTransferTransactionData_Transfer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MassTransferTransactionData_Transfer_vrp_2ftransaction_2eproto.base);
  ::memset(&recipient_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&amount_) -
      reinterpret_cast<char*>(&recipient_)) + sizeof(amount_));
}

MassTransferTransactionData_Transfer::~MassTransferTransactionData_Transfer() {
  // @@protoc_insertion_point(destructor:vrp.MassTransferTransactionData.Transfer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MassTransferTransactionData_Transfer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete recipient_;
}

void MassTransferTransactionData_Transfer::ArenaDtor(void* object) {
  MassTransferTransactionData_Transfer* _this = reinterpret_cast< MassTransferTransactionData_Transfer* >(object);
  (void)_this;
}
void MassTransferTransactionData_Transfer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MassTransferTransactionData_Transfer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MassTransferTransactionData_Transfer& MassTransferTransactionData_Transfer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MassTransferTransactionData_Transfer_vrp_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void MassTransferTransactionData_Transfer::Clear() {
// @@protoc_insertion_point(message_clear_start:vrp.MassTransferTransactionData.Transfer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && recipient_ != nullptr) {
    delete recipient_;
  }
  recipient_ = nullptr;
  amount_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MassTransferTransactionData_Transfer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vrp.Recipient recipient = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_recipient(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MassTransferTransactionData_Transfer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vrp.MassTransferTransactionData.Transfer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vrp.Recipient recipient = 1;
  if (this->has_recipient()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::recipient(this), target, stream);
  }

  // int64 amount = 2;
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vrp.MassTransferTransactionData.Transfer)
  return target;
}

size_t MassTransferTransactionData_Transfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vrp.MassTransferTransactionData.Transfer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vrp.Recipient recipient = 1;
  if (this->has_recipient()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *recipient_);
  }

  // int64 amount = 2;
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MassTransferTransactionData_Transfer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vrp.MassTransferTransactionData.Transfer)
  GOOGLE_DCHECK_NE(&from, this);
  const MassTransferTransactionData_Transfer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MassTransferTransactionData_Transfer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vrp.MassTransferTransactionData.Transfer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vrp.MassTransferTransactionData.Transfer)
    MergeFrom(*source);
  }
}

void MassTransferTransactionData_Transfer::MergeFrom(const MassTransferTransactionData_Transfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vrp.MassTransferTransactionData.Transfer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_recipient()) {
    _internal_mutable_recipient()->::vrp::Recipient::MergeFrom(from._internal_recipient());
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
}

void MassTransferTransactionData_Transfer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vrp.MassTransferTransactionData.Transfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MassTransferTransactionData_Transfer::CopyFrom(const MassTransferTransactionData_Transfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vrp.MassTransferTransactionData.Transfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MassTransferTransactionData_Transfer::IsInitialized() const {
  return true;
}

void MassTransferTransactionData_Transfer::InternalSwap(MassTransferTransactionData_Transfer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MassTransferTransactionData_Transfer, amount_)
      + sizeof(MassTransferTransactionData_Transfer::amount_)
      - PROTOBUF_FIELD_OFFSET(MassTransferTransactionData_Transfer, recipient_)>(
          reinterpret_cast<char*>(&recipient_),
          reinterpret_cast<char*>(&other->recipient_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MassTransferTransactionData_Transfer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MassTransferTransactionData::InitAsDefaultInstance() {
}
class MassTransferTransactionData::_Internal {
 public:
};

MassTransferTransactionData::MassTransferTransactionData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  transfers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vrp.MassTransferTransactionData)
}
MassTransferTransactionData::MassTransferTransactionData(const MassTransferTransactionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      transfers_(from.transfers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset_id().empty()) {
    asset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_asset_id(),
      GetArena());
  }
  attachment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_attachment().empty()) {
    attachment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_attachment(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vrp.MassTransferTransactionData)
}

void MassTransferTransactionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MassTransferTransactionData_vrp_2ftransaction_2eproto.base);
  asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attachment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MassTransferTransactionData::~MassTransferTransactionData() {
  // @@protoc_insertion_point(destructor:vrp.MassTransferTransactionData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MassTransferTransactionData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  asset_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attachment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MassTransferTransactionData::ArenaDtor(void* object) {
  MassTransferTransactionData* _this = reinterpret_cast< MassTransferTransactionData* >(object);
  (void)_this;
}
void MassTransferTransactionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MassTransferTransactionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MassTransferTransactionData& MassTransferTransactionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MassTransferTransactionData_vrp_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void MassTransferTransactionData::Clear() {
// @@protoc_insertion_point(message_clear_start:vrp.MassTransferTransactionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transfers_.Clear();
  asset_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attachment_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MassTransferTransactionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes asset_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_asset_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vrp.MassTransferTransactionData.Transfer transfers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transfers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes attachment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_attachment();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MassTransferTransactionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vrp.MassTransferTransactionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes asset_id = 1;
  if (this->asset_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_asset_id(), target);
  }

  // repeated .vrp.MassTransferTransactionData.Transfer transfers = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transfers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_transfers(i), target, stream);
  }

  // bytes attachment = 3;
  if (this->attachment().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_attachment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vrp.MassTransferTransactionData)
  return target;
}

size_t MassTransferTransactionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vrp.MassTransferTransactionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vrp.MassTransferTransactionData.Transfer transfers = 2;
  total_size += 1UL * this->_internal_transfers_size();
  for (const auto& msg : this->transfers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes asset_id = 1;
  if (this->asset_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_asset_id());
  }

  // bytes attachment = 3;
  if (this->attachment().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attachment());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MassTransferTransactionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vrp.MassTransferTransactionData)
  GOOGLE_DCHECK_NE(&from, this);
  const MassTransferTransactionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MassTransferTransactionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vrp.MassTransferTransactionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vrp.MassTransferTransactionData)
    MergeFrom(*source);
  }
}

void MassTransferTransactionData::MergeFrom(const MassTransferTransactionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vrp.MassTransferTransactionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transfers_.MergeFrom(from.transfers_);
  if (from.asset_id().size() > 0) {
    _internal_set_asset_id(from._internal_asset_id());
  }
  if (from.attachment().size() > 0) {
    _internal_set_attachment(from._internal_attachment());
  }
}

void MassTransferTransactionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vrp.MassTransferTransactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MassTransferTransactionData::CopyFrom(const MassTransferTransactionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vrp.MassTransferTransactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MassTransferTransactionData::IsInitialized() const {
  return true;
}

void MassTransferTransactionData::InternalSwap(MassTransferTransactionData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  transfers_.InternalSwap(&other->transfers_);
  asset_id_.Swap(&other->asset_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attachment_.Swap(&other->attachment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MassTransferTransactionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LeaseTransactionData::InitAsDefaultInstance() {
  ::vrp::_LeaseTransactionData_default_instance_._instance.get_mutable()->recipient_ = const_cast< ::vrp::Recipient*>(
      ::vrp::Recipient::internal_default_instance());
}
class LeaseTransactionData::_Internal {
 public:
  static const ::vrp::Recipient& recipient(const LeaseTransactionData* msg);
};

const ::vrp::Recipient&
LeaseTransactionData::_Internal::recipient(const LeaseTransactionData* msg) {
  return *msg->recipient_;
}
void LeaseTransactionData::clear_recipient() {
  if (GetArena() == nullptr && recipient_ != nullptr) {
    delete recipient_;
  }
  recipient_ = nullptr;
}
LeaseTransactionData::LeaseTransactionData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vrp.LeaseTransactionData)
}
LeaseTransactionData::LeaseTransactionData(const LeaseTransactionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_recipient()) {
    recipient_ = new ::vrp::Recipient(*from.recipient_);
  } else {
    recipient_ = nullptr;
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:vrp.LeaseTransactionData)
}

void LeaseTransactionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LeaseTransactionData_vrp_2ftransaction_2eproto.base);
  ::memset(&recipient_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&amount_) -
      reinterpret_cast<char*>(&recipient_)) + sizeof(amount_));
}

LeaseTransactionData::~LeaseTransactionData() {
  // @@protoc_insertion_point(destructor:vrp.LeaseTransactionData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LeaseTransactionData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete recipient_;
}

void LeaseTransactionData::ArenaDtor(void* object) {
  LeaseTransactionData* _this = reinterpret_cast< LeaseTransactionData* >(object);
  (void)_this;
}
void LeaseTransactionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LeaseTransactionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeaseTransactionData& LeaseTransactionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LeaseTransactionData_vrp_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void LeaseTransactionData::Clear() {
// @@protoc_insertion_point(message_clear_start:vrp.LeaseTransactionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && recipient_ != nullptr) {
    delete recipient_;
  }
  recipient_ = nullptr;
  amount_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaseTransactionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vrp.Recipient recipient = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_recipient(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LeaseTransactionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vrp.LeaseTransactionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vrp.Recipient recipient = 1;
  if (this->has_recipient()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::recipient(this), target, stream);
  }

  // int64 amount = 2;
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vrp.LeaseTransactionData)
  return target;
}

size_t LeaseTransactionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vrp.LeaseTransactionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vrp.Recipient recipient = 1;
  if (this->has_recipient()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *recipient_);
  }

  // int64 amount = 2;
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaseTransactionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vrp.LeaseTransactionData)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaseTransactionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LeaseTransactionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vrp.LeaseTransactionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vrp.LeaseTransactionData)
    MergeFrom(*source);
  }
}

void LeaseTransactionData::MergeFrom(const LeaseTransactionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vrp.LeaseTransactionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_recipient()) {
    _internal_mutable_recipient()->::vrp::Recipient::MergeFrom(from._internal_recipient());
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
}

void LeaseTransactionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vrp.LeaseTransactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaseTransactionData::CopyFrom(const LeaseTransactionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vrp.LeaseTransactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaseTransactionData::IsInitialized() const {
  return true;
}

void LeaseTransactionData::InternalSwap(LeaseTransactionData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LeaseTransactionData, amount_)
      + sizeof(LeaseTransactionData::amount_)
      - PROTOBUF_FIELD_OFFSET(LeaseTransactionData, recipient_)>(
          reinterpret_cast<char*>(&recipient_),
          reinterpret_cast<char*>(&other->recipient_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaseTransactionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LeaseCancelTransactionData::InitAsDefaultInstance() {
}
class LeaseCancelTransactionData::_Internal {
 public:
};

LeaseCancelTransactionData::LeaseCancelTransactionData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vrp.LeaseCancelTransactionData)
}
LeaseCancelTransactionData::LeaseCancelTransactionData(const LeaseCancelTransactionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  lease_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lease_id().empty()) {
    lease_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_lease_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vrp.LeaseCancelTransactionData)
}

void LeaseCancelTransactionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LeaseCancelTransactionData_vrp_2ftransaction_2eproto.base);
  lease_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LeaseCancelTransactionData::~LeaseCancelTransactionData() {
  // @@protoc_insertion_point(destructor:vrp.LeaseCancelTransactionData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LeaseCancelTransactionData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  lease_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LeaseCancelTransactionData::ArenaDtor(void* object) {
  LeaseCancelTransactionData* _this = reinterpret_cast< LeaseCancelTransactionData* >(object);
  (void)_this;
}
void LeaseCancelTransactionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LeaseCancelTransactionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeaseCancelTransactionData& LeaseCancelTransactionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LeaseCancelTransactionData_vrp_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void LeaseCancelTransactionData::Clear() {
// @@protoc_insertion_point(message_clear_start:vrp.LeaseCancelTransactionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lease_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaseCancelTransactionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes lease_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_lease_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LeaseCancelTransactionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vrp.LeaseCancelTransactionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes lease_id = 1;
  if (this->lease_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_lease_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vrp.LeaseCancelTransactionData)
  return target;
}

size_t LeaseCancelTransactionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vrp.LeaseCancelTransactionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes lease_id = 1;
  if (this->lease_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_lease_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaseCancelTransactionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vrp.LeaseCancelTransactionData)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaseCancelTransactionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LeaseCancelTransactionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vrp.LeaseCancelTransactionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vrp.LeaseCancelTransactionData)
    MergeFrom(*source);
  }
}

void LeaseCancelTransactionData::MergeFrom(const LeaseCancelTransactionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vrp.LeaseCancelTransactionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lease_id().size() > 0) {
    _internal_set_lease_id(from._internal_lease_id());
  }
}

void LeaseCancelTransactionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vrp.LeaseCancelTransactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaseCancelTransactionData::CopyFrom(const LeaseCancelTransactionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vrp.LeaseCancelTransactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaseCancelTransactionData::IsInitialized() const {
  return true;
}

void LeaseCancelTransactionData::InternalSwap(LeaseCancelTransactionData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  lease_id_.Swap(&other->lease_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaseCancelTransactionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BurnTransactionData::InitAsDefaultInstance() {
  ::vrp::_BurnTransactionData_default_instance_._instance.get_mutable()->asset_amount_ = const_cast< ::vrp::Amount*>(
      ::vrp::Amount::internal_default_instance());
}
class BurnTransactionData::_Internal {
 public:
  static const ::vrp::Amount& asset_amount(const BurnTransactionData* msg);
};

const ::vrp::Amount&
BurnTransactionData::_Internal::asset_amount(const BurnTransactionData* msg) {
  return *msg->asset_amount_;
}
void BurnTransactionData::clear_asset_amount() {
  if (GetArena() == nullptr && asset_amount_ != nullptr) {
    delete asset_amount_;
  }
  asset_amount_ = nullptr;
}
BurnTransactionData::BurnTransactionData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vrp.BurnTransactionData)
}
BurnTransactionData::BurnTransactionData(const BurnTransactionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_asset_amount()) {
    asset_amount_ = new ::vrp::Amount(*from.asset_amount_);
  } else {
    asset_amount_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vrp.BurnTransactionData)
}

void BurnTransactionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BurnTransactionData_vrp_2ftransaction_2eproto.base);
  asset_amount_ = nullptr;
}

BurnTransactionData::~BurnTransactionData() {
  // @@protoc_insertion_point(destructor:vrp.BurnTransactionData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BurnTransactionData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete asset_amount_;
}

void BurnTransactionData::ArenaDtor(void* object) {
  BurnTransactionData* _this = reinterpret_cast< BurnTransactionData* >(object);
  (void)_this;
}
void BurnTransactionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BurnTransactionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BurnTransactionData& BurnTransactionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BurnTransactionData_vrp_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void BurnTransactionData::Clear() {
// @@protoc_insertion_point(message_clear_start:vrp.BurnTransactionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && asset_amount_ != nullptr) {
    delete asset_amount_;
  }
  asset_amount_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BurnTransactionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vrp.Amount asset_amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_asset_amount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BurnTransactionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vrp.BurnTransactionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vrp.Amount asset_amount = 1;
  if (this->has_asset_amount()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::asset_amount(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vrp.BurnTransactionData)
  return target;
}

size_t BurnTransactionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vrp.BurnTransactionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vrp.Amount asset_amount = 1;
  if (this->has_asset_amount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *asset_amount_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BurnTransactionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vrp.BurnTransactionData)
  GOOGLE_DCHECK_NE(&from, this);
  const BurnTransactionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BurnTransactionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vrp.BurnTransactionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vrp.BurnTransactionData)
    MergeFrom(*source);
  }
}

void BurnTransactionData::MergeFrom(const BurnTransactionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vrp.BurnTransactionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_asset_amount()) {
    _internal_mutable_asset_amount()->::vrp::Amount::MergeFrom(from._internal_asset_amount());
  }
}

void BurnTransactionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vrp.BurnTransactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BurnTransactionData::CopyFrom(const BurnTransactionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vrp.BurnTransactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BurnTransactionData::IsInitialized() const {
  return true;
}

void BurnTransactionData::InternalSwap(BurnTransactionData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(asset_amount_, other->asset_amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BurnTransactionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IssueTransactionData::InitAsDefaultInstance() {
}
class IssueTransactionData::_Internal {
 public:
};

IssueTransactionData::IssueTransactionData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vrp.IssueTransactionData)
}
IssueTransactionData::IssueTransactionData(const IssueTransactionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_description(),
      GetArena());
  }
  script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_script().empty()) {
    script_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_script(),
      GetArena());
  }
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&reissuable_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(reissuable_));
  // @@protoc_insertion_point(copy_constructor:vrp.IssueTransactionData)
}

void IssueTransactionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IssueTransactionData_vrp_2ftransaction_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reissuable_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(reissuable_));
}

IssueTransactionData::~IssueTransactionData() {
  // @@protoc_insertion_point(destructor:vrp.IssueTransactionData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IssueTransactionData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  script_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IssueTransactionData::ArenaDtor(void* object) {
  IssueTransactionData* _this = reinterpret_cast< IssueTransactionData* >(object);
  (void)_this;
}
void IssueTransactionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IssueTransactionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IssueTransactionData& IssueTransactionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IssueTransactionData_vrp_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void IssueTransactionData::Clear() {
// @@protoc_insertion_point(message_clear_start:vrp.IssueTransactionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  script_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reissuable_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(reissuable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IssueTransactionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vrp.IssueTransactionData.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vrp.IssueTransactionData.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 decimals = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          decimals_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool reissuable = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          reissuable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes script = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_script();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IssueTransactionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vrp.IssueTransactionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vrp.IssueTransactionData.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vrp.IssueTransactionData.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // int64 amount = 3;
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_amount(), target);
  }

  // int32 decimals = 4;
  if (this->decimals() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_decimals(), target);
  }

  // bool reissuable = 5;
  if (this->reissuable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_reissuable(), target);
  }

  // bytes script = 6;
  if (this->script().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_script(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vrp.IssueTransactionData)
  return target;
}

size_t IssueTransactionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vrp.IssueTransactionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // bytes script = 6;
  if (this->script().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_script());
  }

  // int64 amount = 3;
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_amount());
  }

  // int32 decimals = 4;
  if (this->decimals() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_decimals());
  }

  // bool reissuable = 5;
  if (this->reissuable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IssueTransactionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vrp.IssueTransactionData)
  GOOGLE_DCHECK_NE(&from, this);
  const IssueTransactionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IssueTransactionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vrp.IssueTransactionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vrp.IssueTransactionData)
    MergeFrom(*source);
  }
}

void IssueTransactionData::MergeFrom(const IssueTransactionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vrp.IssueTransactionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.script().size() > 0) {
    _internal_set_script(from._internal_script());
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from.decimals() != 0) {
    _internal_set_decimals(from._internal_decimals());
  }
  if (from.reissuable() != 0) {
    _internal_set_reissuable(from._internal_reissuable());
  }
}

void IssueTransactionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vrp.IssueTransactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IssueTransactionData::CopyFrom(const IssueTransactionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vrp.IssueTransactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IssueTransactionData::IsInitialized() const {
  return true;
}

void IssueTransactionData::InternalSwap(IssueTransactionData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  script_.Swap(&other->script_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IssueTransactionData, reissuable_)
      + sizeof(IssueTransactionData::reissuable_)
      - PROTOBUF_FIELD_OFFSET(IssueTransactionData, amount_)>(
          reinterpret_cast<char*>(&amount_),
          reinterpret_cast<char*>(&other->amount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IssueTransactionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReissueTransactionData::InitAsDefaultInstance() {
  ::vrp::_ReissueTransactionData_default_instance_._instance.get_mutable()->asset_amount_ = const_cast< ::vrp::Amount*>(
      ::vrp::Amount::internal_default_instance());
}
class ReissueTransactionData::_Internal {
 public:
  static const ::vrp::Amount& asset_amount(const ReissueTransactionData* msg);
};

const ::vrp::Amount&
ReissueTransactionData::_Internal::asset_amount(const ReissueTransactionData* msg) {
  return *msg->asset_amount_;
}
void ReissueTransactionData::clear_asset_amount() {
  if (GetArena() == nullptr && asset_amount_ != nullptr) {
    delete asset_amount_;
  }
  asset_amount_ = nullptr;
}
ReissueTransactionData::ReissueTransactionData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vrp.ReissueTransactionData)
}
ReissueTransactionData::ReissueTransactionData(const ReissueTransactionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_asset_amount()) {
    asset_amount_ = new ::vrp::Amount(*from.asset_amount_);
  } else {
    asset_amount_ = nullptr;
  }
  reissuable_ = from.reissuable_;
  // @@protoc_insertion_point(copy_constructor:vrp.ReissueTransactionData)
}

void ReissueTransactionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReissueTransactionData_vrp_2ftransaction_2eproto.base);
  ::memset(&asset_amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reissuable_) -
      reinterpret_cast<char*>(&asset_amount_)) + sizeof(reissuable_));
}

ReissueTransactionData::~ReissueTransactionData() {
  // @@protoc_insertion_point(destructor:vrp.ReissueTransactionData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReissueTransactionData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete asset_amount_;
}

void ReissueTransactionData::ArenaDtor(void* object) {
  ReissueTransactionData* _this = reinterpret_cast< ReissueTransactionData* >(object);
  (void)_this;
}
void ReissueTransactionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReissueTransactionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReissueTransactionData& ReissueTransactionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReissueTransactionData_vrp_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void ReissueTransactionData::Clear() {
// @@protoc_insertion_point(message_clear_start:vrp.ReissueTransactionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && asset_amount_ != nullptr) {
    delete asset_amount_;
  }
  asset_amount_ = nullptr;
  reissuable_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReissueTransactionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vrp.Amount asset_amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_asset_amount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool reissuable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          reissuable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReissueTransactionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vrp.ReissueTransactionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vrp.Amount asset_amount = 1;
  if (this->has_asset_amount()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::asset_amount(this), target, stream);
  }

  // bool reissuable = 2;
  if (this->reissuable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_reissuable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vrp.ReissueTransactionData)
  return target;
}

size_t ReissueTransactionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vrp.ReissueTransactionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vrp.Amount asset_amount = 1;
  if (this->has_asset_amount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *asset_amount_);
  }

  // bool reissuable = 2;
  if (this->reissuable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReissueTransactionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vrp.ReissueTransactionData)
  GOOGLE_DCHECK_NE(&from, this);
  const ReissueTransactionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReissueTransactionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vrp.ReissueTransactionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vrp.ReissueTransactionData)
    MergeFrom(*source);
  }
}

void ReissueTransactionData::MergeFrom(const ReissueTransactionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vrp.ReissueTransactionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_asset_amount()) {
    _internal_mutable_asset_amount()->::vrp::Amount::MergeFrom(from._internal_asset_amount());
  }
  if (from.reissuable() != 0) {
    _internal_set_reissuable(from._internal_reissuable());
  }
}

void ReissueTransactionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vrp.ReissueTransactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReissueTransactionData::CopyFrom(const ReissueTransactionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vrp.ReissueTransactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReissueTransactionData::IsInitialized() const {
  return true;
}

void ReissueTransactionData::InternalSwap(ReissueTransactionData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReissueTransactionData, reissuable_)
      + sizeof(ReissueTransactionData::reissuable_)
      - PROTOBUF_FIELD_OFFSET(ReissueTransactionData, asset_amount_)>(
          reinterpret_cast<char*>(&asset_amount_),
          reinterpret_cast<char*>(&other->asset_amount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReissueTransactionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetAssetScriptTransactionData::InitAsDefaultInstance() {
}
class SetAssetScriptTransactionData::_Internal {
 public:
};

SetAssetScriptTransactionData::SetAssetScriptTransactionData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vrp.SetAssetScriptTransactionData)
}
SetAssetScriptTransactionData::SetAssetScriptTransactionData(const SetAssetScriptTransactionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset_id().empty()) {
    asset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_asset_id(),
      GetArena());
  }
  script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_script().empty()) {
    script_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_script(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vrp.SetAssetScriptTransactionData)
}

void SetAssetScriptTransactionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetAssetScriptTransactionData_vrp_2ftransaction_2eproto.base);
  asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetAssetScriptTransactionData::~SetAssetScriptTransactionData() {
  // @@protoc_insertion_point(destructor:vrp.SetAssetScriptTransactionData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetAssetScriptTransactionData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  asset_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  script_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetAssetScriptTransactionData::ArenaDtor(void* object) {
  SetAssetScriptTransactionData* _this = reinterpret_cast< SetAssetScriptTransactionData* >(object);
  (void)_this;
}
void SetAssetScriptTransactionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetAssetScriptTransactionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetAssetScriptTransactionData& SetAssetScriptTransactionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetAssetScriptTransactionData_vrp_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void SetAssetScriptTransactionData::Clear() {
// @@protoc_insertion_point(message_clear_start:vrp.SetAssetScriptTransactionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  asset_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  script_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetAssetScriptTransactionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes asset_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_asset_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes script = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_script();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetAssetScriptTransactionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vrp.SetAssetScriptTransactionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes asset_id = 1;
  if (this->asset_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_asset_id(), target);
  }

  // bytes script = 2;
  if (this->script().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_script(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vrp.SetAssetScriptTransactionData)
  return target;
}

size_t SetAssetScriptTransactionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vrp.SetAssetScriptTransactionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes asset_id = 1;
  if (this->asset_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_asset_id());
  }

  // bytes script = 2;
  if (this->script().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_script());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetAssetScriptTransactionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vrp.SetAssetScriptTransactionData)
  GOOGLE_DCHECK_NE(&from, this);
  const SetAssetScriptTransactionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetAssetScriptTransactionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vrp.SetAssetScriptTransactionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vrp.SetAssetScriptTransactionData)
    MergeFrom(*source);
  }
}

void SetAssetScriptTransactionData::MergeFrom(const SetAssetScriptTransactionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vrp.SetAssetScriptTransactionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.asset_id().size() > 0) {
    _internal_set_asset_id(from._internal_asset_id());
  }
  if (from.script().size() > 0) {
    _internal_set_script(from._internal_script());
  }
}

void SetAssetScriptTransactionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vrp.SetAssetScriptTransactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetAssetScriptTransactionData::CopyFrom(const SetAssetScriptTransactionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vrp.SetAssetScriptTransactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAssetScriptTransactionData::IsInitialized() const {
  return true;
}

void SetAssetScriptTransactionData::InternalSwap(SetAssetScriptTransactionData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  asset_id_.Swap(&other->asset_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  script_.Swap(&other->script_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SetAssetScriptTransactionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetScriptTransactionData::InitAsDefaultInstance() {
}
class SetScriptTransactionData::_Internal {
 public:
};

SetScriptTransactionData::SetScriptTransactionData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vrp.SetScriptTransactionData)
}
SetScriptTransactionData::SetScriptTransactionData(const SetScriptTransactionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_script().empty()) {
    script_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_script(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vrp.SetScriptTransactionData)
}

void SetScriptTransactionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetScriptTransactionData_vrp_2ftransaction_2eproto.base);
  script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetScriptTransactionData::~SetScriptTransactionData() {
  // @@protoc_insertion_point(destructor:vrp.SetScriptTransactionData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetScriptTransactionData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  script_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetScriptTransactionData::ArenaDtor(void* object) {
  SetScriptTransactionData* _this = reinterpret_cast< SetScriptTransactionData* >(object);
  (void)_this;
}
void SetScriptTransactionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetScriptTransactionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetScriptTransactionData& SetScriptTransactionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetScriptTransactionData_vrp_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void SetScriptTransactionData::Clear() {
// @@protoc_insertion_point(message_clear_start:vrp.SetScriptTransactionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  script_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetScriptTransactionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes script = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_script();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetScriptTransactionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vrp.SetScriptTransactionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes script = 1;
  if (this->script().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_script(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vrp.SetScriptTransactionData)
  return target;
}

size_t SetScriptTransactionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vrp.SetScriptTransactionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes script = 1;
  if (this->script().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_script());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetScriptTransactionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vrp.SetScriptTransactionData)
  GOOGLE_DCHECK_NE(&from, this);
  const SetScriptTransactionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetScriptTransactionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vrp.SetScriptTransactionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vrp.SetScriptTransactionData)
    MergeFrom(*source);
  }
}

void SetScriptTransactionData::MergeFrom(const SetScriptTransactionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vrp.SetScriptTransactionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.script().size() > 0) {
    _internal_set_script(from._internal_script());
  }
}

void SetScriptTransactionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vrp.SetScriptTransactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetScriptTransactionData::CopyFrom(const SetScriptTransactionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vrp.SetScriptTransactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetScriptTransactionData::IsInitialized() const {
  return true;
}

void SetScriptTransactionData::InternalSwap(SetScriptTransactionData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  script_.Swap(&other->script_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SetScriptTransactionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExchangeTransactionData::InitAsDefaultInstance() {
}
class ExchangeTransactionData::_Internal {
 public:
};

void ExchangeTransactionData::clear_orders() {
  orders_.Clear();
}
ExchangeTransactionData::ExchangeTransactionData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  orders_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vrp.ExchangeTransactionData)
}
ExchangeTransactionData::ExchangeTransactionData(const ExchangeTransactionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      orders_(from.orders_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&sell_matcher_fee_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(sell_matcher_fee_));
  // @@protoc_insertion_point(copy_constructor:vrp.ExchangeTransactionData)
}

void ExchangeTransactionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExchangeTransactionData_vrp_2ftransaction_2eproto.base);
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sell_matcher_fee_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(sell_matcher_fee_));
}

ExchangeTransactionData::~ExchangeTransactionData() {
  // @@protoc_insertion_point(destructor:vrp.ExchangeTransactionData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExchangeTransactionData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ExchangeTransactionData::ArenaDtor(void* object) {
  ExchangeTransactionData* _this = reinterpret_cast< ExchangeTransactionData* >(object);
  (void)_this;
}
void ExchangeTransactionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExchangeTransactionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExchangeTransactionData& ExchangeTransactionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExchangeTransactionData_vrp_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void ExchangeTransactionData::Clear() {
// @@protoc_insertion_point(message_clear_start:vrp.ExchangeTransactionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orders_.Clear();
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sell_matcher_fee_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(sell_matcher_fee_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExchangeTransactionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 buy_matcher_fee = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          buy_matcher_fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 sell_matcher_fee = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sell_matcher_fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vrp.Order orders = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_orders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExchangeTransactionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vrp.ExchangeTransactionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 amount = 1;
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_amount(), target);
  }

  // int64 price = 2;
  if (this->price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_price(), target);
  }

  // int64 buy_matcher_fee = 3;
  if (this->buy_matcher_fee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_buy_matcher_fee(), target);
  }

  // int64 sell_matcher_fee = 4;
  if (this->sell_matcher_fee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_sell_matcher_fee(), target);
  }

  // repeated .vrp.Order orders = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_orders_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_orders(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vrp.ExchangeTransactionData)
  return target;
}

size_t ExchangeTransactionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vrp.ExchangeTransactionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vrp.Order orders = 5;
  total_size += 1UL * this->_internal_orders_size();
  for (const auto& msg : this->orders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 amount = 1;
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_amount());
  }

  // int64 price = 2;
  if (this->price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_price());
  }

  // int64 buy_matcher_fee = 3;
  if (this->buy_matcher_fee() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_buy_matcher_fee());
  }

  // int64 sell_matcher_fee = 4;
  if (this->sell_matcher_fee() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sell_matcher_fee());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExchangeTransactionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vrp.ExchangeTransactionData)
  GOOGLE_DCHECK_NE(&from, this);
  const ExchangeTransactionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExchangeTransactionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vrp.ExchangeTransactionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vrp.ExchangeTransactionData)
    MergeFrom(*source);
  }
}

void ExchangeTransactionData::MergeFrom(const ExchangeTransactionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vrp.ExchangeTransactionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  orders_.MergeFrom(from.orders_);
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from.price() != 0) {
    _internal_set_price(from._internal_price());
  }
  if (from.buy_matcher_fee() != 0) {
    _internal_set_buy_matcher_fee(from._internal_buy_matcher_fee());
  }
  if (from.sell_matcher_fee() != 0) {
    _internal_set_sell_matcher_fee(from._internal_sell_matcher_fee());
  }
}

void ExchangeTransactionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vrp.ExchangeTransactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeTransactionData::CopyFrom(const ExchangeTransactionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vrp.ExchangeTransactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeTransactionData::IsInitialized() const {
  return true;
}

void ExchangeTransactionData::InternalSwap(ExchangeTransactionData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  orders_.InternalSwap(&other->orders_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExchangeTransactionData, sell_matcher_fee_)
      + sizeof(ExchangeTransactionData::sell_matcher_fee_)
      - PROTOBUF_FIELD_OFFSET(ExchangeTransactionData, amount_)>(
          reinterpret_cast<char*>(&amount_),
          reinterpret_cast<char*>(&other->amount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExchangeTransactionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SponsorFeeTransactionData::InitAsDefaultInstance() {
  ::vrp::_SponsorFeeTransactionData_default_instance_._instance.get_mutable()->min_fee_ = const_cast< ::vrp::Amount*>(
      ::vrp::Amount::internal_default_instance());
}
class SponsorFeeTransactionData::_Internal {
 public:
  static const ::vrp::Amount& min_fee(const SponsorFeeTransactionData* msg);
};

const ::vrp::Amount&
SponsorFeeTransactionData::_Internal::min_fee(const SponsorFeeTransactionData* msg) {
  return *msg->min_fee_;
}
void SponsorFeeTransactionData::clear_min_fee() {
  if (GetArena() == nullptr && min_fee_ != nullptr) {
    delete min_fee_;
  }
  min_fee_ = nullptr;
}
SponsorFeeTransactionData::SponsorFeeTransactionData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vrp.SponsorFeeTransactionData)
}
SponsorFeeTransactionData::SponsorFeeTransactionData(const SponsorFeeTransactionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_min_fee()) {
    min_fee_ = new ::vrp::Amount(*from.min_fee_);
  } else {
    min_fee_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vrp.SponsorFeeTransactionData)
}

void SponsorFeeTransactionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SponsorFeeTransactionData_vrp_2ftransaction_2eproto.base);
  min_fee_ = nullptr;
}

SponsorFeeTransactionData::~SponsorFeeTransactionData() {
  // @@protoc_insertion_point(destructor:vrp.SponsorFeeTransactionData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SponsorFeeTransactionData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete min_fee_;
}

void SponsorFeeTransactionData::ArenaDtor(void* object) {
  SponsorFeeTransactionData* _this = reinterpret_cast< SponsorFeeTransactionData* >(object);
  (void)_this;
}
void SponsorFeeTransactionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SponsorFeeTransactionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SponsorFeeTransactionData& SponsorFeeTransactionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SponsorFeeTransactionData_vrp_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void SponsorFeeTransactionData::Clear() {
// @@protoc_insertion_point(message_clear_start:vrp.SponsorFeeTransactionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && min_fee_ != nullptr) {
    delete min_fee_;
  }
  min_fee_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SponsorFeeTransactionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vrp.Amount min_fee = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_min_fee(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SponsorFeeTransactionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vrp.SponsorFeeTransactionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vrp.Amount min_fee = 1;
  if (this->has_min_fee()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::min_fee(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vrp.SponsorFeeTransactionData)
  return target;
}

size_t SponsorFeeTransactionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vrp.SponsorFeeTransactionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vrp.Amount min_fee = 1;
  if (this->has_min_fee()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *min_fee_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SponsorFeeTransactionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vrp.SponsorFeeTransactionData)
  GOOGLE_DCHECK_NE(&from, this);
  const SponsorFeeTransactionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SponsorFeeTransactionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vrp.SponsorFeeTransactionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vrp.SponsorFeeTransactionData)
    MergeFrom(*source);
  }
}

void SponsorFeeTransactionData::MergeFrom(const SponsorFeeTransactionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vrp.SponsorFeeTransactionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_min_fee()) {
    _internal_mutable_min_fee()->::vrp::Amount::MergeFrom(from._internal_min_fee());
  }
}

void SponsorFeeTransactionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vrp.SponsorFeeTransactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SponsorFeeTransactionData::CopyFrom(const SponsorFeeTransactionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vrp.SponsorFeeTransactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SponsorFeeTransactionData::IsInitialized() const {
  return true;
}

void SponsorFeeTransactionData::InternalSwap(SponsorFeeTransactionData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(min_fee_, other->min_fee_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SponsorFeeTransactionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InvokeScriptTransactionData::InitAsDefaultInstance() {
  ::vrp::_InvokeScriptTransactionData_default_instance_._instance.get_mutable()->d_app_ = const_cast< ::vrp::Recipient*>(
      ::vrp::Recipient::internal_default_instance());
}
class InvokeScriptTransactionData::_Internal {
 public:
  static const ::vrp::Recipient& d_app(const InvokeScriptTransactionData* msg);
};

const ::vrp::Recipient&
InvokeScriptTransactionData::_Internal::d_app(const InvokeScriptTransactionData* msg) {
  return *msg->d_app_;
}
void InvokeScriptTransactionData::clear_d_app() {
  if (GetArena() == nullptr && d_app_ != nullptr) {
    delete d_app_;
  }
  d_app_ = nullptr;
}
void InvokeScriptTransactionData::clear_payments() {
  payments_.Clear();
}
InvokeScriptTransactionData::InvokeScriptTransactionData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  payments_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vrp.InvokeScriptTransactionData)
}
InvokeScriptTransactionData::InvokeScriptTransactionData(const InvokeScriptTransactionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      payments_(from.payments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  function_call_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_function_call().empty()) {
    function_call_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_function_call(),
      GetArena());
  }
  if (from._internal_has_d_app()) {
    d_app_ = new ::vrp::Recipient(*from.d_app_);
  } else {
    d_app_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vrp.InvokeScriptTransactionData)
}

void InvokeScriptTransactionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InvokeScriptTransactionData_vrp_2ftransaction_2eproto.base);
  function_call_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  d_app_ = nullptr;
}

InvokeScriptTransactionData::~InvokeScriptTransactionData() {
  // @@protoc_insertion_point(destructor:vrp.InvokeScriptTransactionData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InvokeScriptTransactionData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  function_call_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete d_app_;
}

void InvokeScriptTransactionData::ArenaDtor(void* object) {
  InvokeScriptTransactionData* _this = reinterpret_cast< InvokeScriptTransactionData* >(object);
  (void)_this;
}
void InvokeScriptTransactionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InvokeScriptTransactionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InvokeScriptTransactionData& InvokeScriptTransactionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InvokeScriptTransactionData_vrp_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void InvokeScriptTransactionData::Clear() {
// @@protoc_insertion_point(message_clear_start:vrp.InvokeScriptTransactionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payments_.Clear();
  function_call_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && d_app_ != nullptr) {
    delete d_app_;
  }
  d_app_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InvokeScriptTransactionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vrp.Recipient d_app = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_d_app(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes function_call = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_function_call();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vrp.Amount payments = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_payments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InvokeScriptTransactionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vrp.InvokeScriptTransactionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vrp.Recipient d_app = 1;
  if (this->has_d_app()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::d_app(this), target, stream);
  }

  // bytes function_call = 2;
  if (this->function_call().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_function_call(), target);
  }

  // repeated .vrp.Amount payments = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_payments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_payments(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vrp.InvokeScriptTransactionData)
  return target;
}

size_t InvokeScriptTransactionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vrp.InvokeScriptTransactionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vrp.Amount payments = 3;
  total_size += 1UL * this->_internal_payments_size();
  for (const auto& msg : this->payments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes function_call = 2;
  if (this->function_call().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_function_call());
  }

  // .vrp.Recipient d_app = 1;
  if (this->has_d_app()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *d_app_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InvokeScriptTransactionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vrp.InvokeScriptTransactionData)
  GOOGLE_DCHECK_NE(&from, this);
  const InvokeScriptTransactionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InvokeScriptTransactionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vrp.InvokeScriptTransactionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vrp.InvokeScriptTransactionData)
    MergeFrom(*source);
  }
}

void InvokeScriptTransactionData::MergeFrom(const InvokeScriptTransactionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vrp.InvokeScriptTransactionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  payments_.MergeFrom(from.payments_);
  if (from.function_call().size() > 0) {
    _internal_set_function_call(from._internal_function_call());
  }
  if (from.has_d_app()) {
    _internal_mutable_d_app()->::vrp::Recipient::MergeFrom(from._internal_d_app());
  }
}

void InvokeScriptTransactionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vrp.InvokeScriptTransactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvokeScriptTransactionData::CopyFrom(const InvokeScriptTransactionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vrp.InvokeScriptTransactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvokeScriptTransactionData::IsInitialized() const {
  return true;
}

void InvokeScriptTransactionData::InternalSwap(InvokeScriptTransactionData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  payments_.InternalSwap(&other->payments_);
  function_call_.Swap(&other->function_call_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(d_app_, other->d_app_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InvokeScriptTransactionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateAssetInfoTransactionData::InitAsDefaultInstance() {
}
class UpdateAssetInfoTransactionData::_Internal {
 public:
};

UpdateAssetInfoTransactionData::UpdateAssetInfoTransactionData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vrp.UpdateAssetInfoTransactionData)
}
UpdateAssetInfoTransactionData::UpdateAssetInfoTransactionData(const UpdateAssetInfoTransactionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset_id().empty()) {
    asset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_asset_id(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_description(),
      GetArena());
  }
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_image().empty()) {
    image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_image(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vrp.UpdateAssetInfoTransactionData)
}

void UpdateAssetInfoTransactionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateAssetInfoTransactionData_vrp_2ftransaction_2eproto.base);
  asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UpdateAssetInfoTransactionData::~UpdateAssetInfoTransactionData() {
  // @@protoc_insertion_point(destructor:vrp.UpdateAssetInfoTransactionData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateAssetInfoTransactionData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  asset_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateAssetInfoTransactionData::ArenaDtor(void* object) {
  UpdateAssetInfoTransactionData* _this = reinterpret_cast< UpdateAssetInfoTransactionData* >(object);
  (void)_this;
}
void UpdateAssetInfoTransactionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateAssetInfoTransactionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateAssetInfoTransactionData& UpdateAssetInfoTransactionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateAssetInfoTransactionData_vrp_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void UpdateAssetInfoTransactionData::Clear() {
// @@protoc_insertion_point(message_clear_start:vrp.UpdateAssetInfoTransactionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  asset_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  image_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateAssetInfoTransactionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes asset_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_asset_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vrp.UpdateAssetInfoTransactionData.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vrp.UpdateAssetInfoTransactionData.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string image = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_image();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vrp.UpdateAssetInfoTransactionData.image"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateAssetInfoTransactionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vrp.UpdateAssetInfoTransactionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes asset_id = 1;
  if (this->asset_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_asset_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vrp.UpdateAssetInfoTransactionData.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vrp.UpdateAssetInfoTransactionData.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // string image = 4;
  if (this->image().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_image().data(), static_cast<int>(this->_internal_image().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vrp.UpdateAssetInfoTransactionData.image");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_image(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vrp.UpdateAssetInfoTransactionData)
  return target;
}

size_t UpdateAssetInfoTransactionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vrp.UpdateAssetInfoTransactionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes asset_id = 1;
  if (this->asset_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_asset_id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string image = 4;
  if (this->image().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_image());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateAssetInfoTransactionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vrp.UpdateAssetInfoTransactionData)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateAssetInfoTransactionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateAssetInfoTransactionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vrp.UpdateAssetInfoTransactionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vrp.UpdateAssetInfoTransactionData)
    MergeFrom(*source);
  }
}

void UpdateAssetInfoTransactionData::MergeFrom(const UpdateAssetInfoTransactionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vrp.UpdateAssetInfoTransactionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.asset_id().size() > 0) {
    _internal_set_asset_id(from._internal_asset_id());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.image().size() > 0) {
    _internal_set_image(from._internal_image());
  }
}

void UpdateAssetInfoTransactionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vrp.UpdateAssetInfoTransactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateAssetInfoTransactionData::CopyFrom(const UpdateAssetInfoTransactionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vrp.UpdateAssetInfoTransactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateAssetInfoTransactionData::IsInitialized() const {
  return true;
}

void UpdateAssetInfoTransactionData::InternalSwap(UpdateAssetInfoTransactionData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  asset_id_.Swap(&other->asset_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  image_.Swap(&other->image_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateAssetInfoTransactionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InvokeExpressionTransactionData::InitAsDefaultInstance() {
}
class InvokeExpressionTransactionData::_Internal {
 public:
};

InvokeExpressionTransactionData::InvokeExpressionTransactionData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vrp.InvokeExpressionTransactionData)
}
InvokeExpressionTransactionData::InvokeExpressionTransactionData(const InvokeExpressionTransactionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  expression_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_expression().empty()) {
    expression_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_expression(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vrp.InvokeExpressionTransactionData)
}

void InvokeExpressionTransactionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InvokeExpressionTransactionData_vrp_2ftransaction_2eproto.base);
  expression_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

InvokeExpressionTransactionData::~InvokeExpressionTransactionData() {
  // @@protoc_insertion_point(destructor:vrp.InvokeExpressionTransactionData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InvokeExpressionTransactionData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  expression_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InvokeExpressionTransactionData::ArenaDtor(void* object) {
  InvokeExpressionTransactionData* _this = reinterpret_cast< InvokeExpressionTransactionData* >(object);
  (void)_this;
}
void InvokeExpressionTransactionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InvokeExpressionTransactionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InvokeExpressionTransactionData& InvokeExpressionTransactionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InvokeExpressionTransactionData_vrp_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void InvokeExpressionTransactionData::Clear() {
// @@protoc_insertion_point(message_clear_start:vrp.InvokeExpressionTransactionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  expression_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InvokeExpressionTransactionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes expression = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_expression();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InvokeExpressionTransactionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vrp.InvokeExpressionTransactionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes expression = 1;
  if (this->expression().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_expression(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vrp.InvokeExpressionTransactionData)
  return target;
}

size_t InvokeExpressionTransactionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vrp.InvokeExpressionTransactionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes expression = 1;
  if (this->expression().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_expression());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InvokeExpressionTransactionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vrp.InvokeExpressionTransactionData)
  GOOGLE_DCHECK_NE(&from, this);
  const InvokeExpressionTransactionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InvokeExpressionTransactionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vrp.InvokeExpressionTransactionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vrp.InvokeExpressionTransactionData)
    MergeFrom(*source);
  }
}

void InvokeExpressionTransactionData::MergeFrom(const InvokeExpressionTransactionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vrp.InvokeExpressionTransactionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.expression().size() > 0) {
    _internal_set_expression(from._internal_expression());
  }
}

void InvokeExpressionTransactionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vrp.InvokeExpressionTransactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvokeExpressionTransactionData::CopyFrom(const InvokeExpressionTransactionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vrp.InvokeExpressionTransactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvokeExpressionTransactionData::IsInitialized() const {
  return true;
}

void InvokeExpressionTransactionData::InternalSwap(InvokeExpressionTransactionData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  expression_.Swap(&other->expression_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata InvokeExpressionTransactionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PrivatePaymentTransactionData::InitAsDefaultInstance() {
}
class PrivatePaymentTransactionData::_Internal {
 public:
};

PrivatePaymentTransactionData::PrivatePaymentTransactionData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vrp.PrivatePaymentTransactionData)
}
PrivatePaymentTransactionData::PrivatePaymentTransactionData(const PrivatePaymentTransactionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recipient_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recipient_address().empty()) {
    recipient_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_recipient_address(),
      GetArena());
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:vrp.PrivatePaymentTransactionData)
}

void PrivatePaymentTransactionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrivatePaymentTransactionData_vrp_2ftransaction_2eproto.base);
  recipient_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_ = PROTOBUF_LONGLONG(0);
}

PrivatePaymentTransactionData::~PrivatePaymentTransactionData() {
  // @@protoc_insertion_point(destructor:vrp.PrivatePaymentTransactionData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrivatePaymentTransactionData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  recipient_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PrivatePaymentTransactionData::ArenaDtor(void* object) {
  PrivatePaymentTransactionData* _this = reinterpret_cast< PrivatePaymentTransactionData* >(object);
  (void)_this;
}
void PrivatePaymentTransactionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrivatePaymentTransactionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrivatePaymentTransactionData& PrivatePaymentTransactionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrivatePaymentTransactionData_vrp_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void PrivatePaymentTransactionData::Clear() {
// @@protoc_insertion_point(message_clear_start:vrp.PrivatePaymentTransactionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recipient_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  amount_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrivatePaymentTransactionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes recipient_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_recipient_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrivatePaymentTransactionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vrp.PrivatePaymentTransactionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes recipient_address = 1;
  if (this->recipient_address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_recipient_address(), target);
  }

  // int64 amount = 2;
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vrp.PrivatePaymentTransactionData)
  return target;
}

size_t PrivatePaymentTransactionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vrp.PrivatePaymentTransactionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes recipient_address = 1;
  if (this->recipient_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_recipient_address());
  }

  // int64 amount = 2;
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrivatePaymentTransactionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vrp.PrivatePaymentTransactionData)
  GOOGLE_DCHECK_NE(&from, this);
  const PrivatePaymentTransactionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrivatePaymentTransactionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vrp.PrivatePaymentTransactionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vrp.PrivatePaymentTransactionData)
    MergeFrom(*source);
  }
}

void PrivatePaymentTransactionData::MergeFrom(const PrivatePaymentTransactionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vrp.PrivatePaymentTransactionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.recipient_address().size() > 0) {
    _internal_set_recipient_address(from._internal_recipient_address());
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
}

void PrivatePaymentTransactionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vrp.PrivatePaymentTransactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrivatePaymentTransactionData::CopyFrom(const PrivatePaymentTransactionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vrp.PrivatePaymentTransactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivatePaymentTransactionData::IsInitialized() const {
  return true;
}

void PrivatePaymentTransactionData::InternalSwap(PrivatePaymentTransactionData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  recipient_address_.Swap(&other->recipient_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrivatePaymentTransactionData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace vrp
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vrp::SignedTransaction* Arena::CreateMaybeMessage< ::vrp::SignedTransaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vrp::SignedTransaction >(arena);
}
template<> PROTOBUF_NOINLINE ::vrp::Transaction* Arena::CreateMaybeMessage< ::vrp::Transaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vrp::Transaction >(arena);
}
template<> PROTOBUF_NOINLINE ::vrp::GenesisTransactionData* Arena::CreateMaybeMessage< ::vrp::GenesisTransactionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vrp::GenesisTransactionData >(arena);
}
template<> PROTOBUF_NOINLINE ::vrp::PaymentTransactionData* Arena::CreateMaybeMessage< ::vrp::PaymentTransactionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vrp::PaymentTransactionData >(arena);
}
template<> PROTOBUF_NOINLINE ::vrp::TransferTransactionData* Arena::CreateMaybeMessage< ::vrp::TransferTransactionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vrp::TransferTransactionData >(arena);
}
template<> PROTOBUF_NOINLINE ::vrp::CreateAliasTransactionData* Arena::CreateMaybeMessage< ::vrp::CreateAliasTransactionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vrp::CreateAliasTransactionData >(arena);
}
template<> PROTOBUF_NOINLINE ::vrp::DataTransactionData_DataEntry* Arena::CreateMaybeMessage< ::vrp::DataTransactionData_DataEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vrp::DataTransactionData_DataEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::vrp::DataTransactionData* Arena::CreateMaybeMessage< ::vrp::DataTransactionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vrp::DataTransactionData >(arena);
}
template<> PROTOBUF_NOINLINE ::vrp::MassTransferTransactionData_Transfer* Arena::CreateMaybeMessage< ::vrp::MassTransferTransactionData_Transfer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vrp::MassTransferTransactionData_Transfer >(arena);
}
template<> PROTOBUF_NOINLINE ::vrp::MassTransferTransactionData* Arena::CreateMaybeMessage< ::vrp::MassTransferTransactionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vrp::MassTransferTransactionData >(arena);
}
template<> PROTOBUF_NOINLINE ::vrp::LeaseTransactionData* Arena::CreateMaybeMessage< ::vrp::LeaseTransactionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vrp::LeaseTransactionData >(arena);
}
template<> PROTOBUF_NOINLINE ::vrp::LeaseCancelTransactionData* Arena::CreateMaybeMessage< ::vrp::LeaseCancelTransactionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vrp::LeaseCancelTransactionData >(arena);
}
template<> PROTOBUF_NOINLINE ::vrp::BurnTransactionData* Arena::CreateMaybeMessage< ::vrp::BurnTransactionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vrp::BurnTransactionData >(arena);
}
template<> PROTOBUF_NOINLINE ::vrp::IssueTransactionData* Arena::CreateMaybeMessage< ::vrp::IssueTransactionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vrp::IssueTransactionData >(arena);
}
template<> PROTOBUF_NOINLINE ::vrp::ReissueTransactionData* Arena::CreateMaybeMessage< ::vrp::ReissueTransactionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vrp::ReissueTransactionData >(arena);
}
template<> PROTOBUF_NOINLINE ::vrp::SetAssetScriptTransactionData* Arena::CreateMaybeMessage< ::vrp::SetAssetScriptTransactionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vrp::SetAssetScriptTransactionData >(arena);
}
template<> PROTOBUF_NOINLINE ::vrp::SetScriptTransactionData* Arena::CreateMaybeMessage< ::vrp::SetScriptTransactionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vrp::SetScriptTransactionData >(arena);
}
template<> PROTOBUF_NOINLINE ::vrp::ExchangeTransactionData* Arena::CreateMaybeMessage< ::vrp::ExchangeTransactionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vrp::ExchangeTransactionData >(arena);
}
template<> PROTOBUF_NOINLINE ::vrp::SponsorFeeTransactionData* Arena::CreateMaybeMessage< ::vrp::SponsorFeeTransactionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vrp::SponsorFeeTransactionData >(arena);
}
template<> PROTOBUF_NOINLINE ::vrp::InvokeScriptTransactionData* Arena::CreateMaybeMessage< ::vrp::InvokeScriptTransactionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vrp::InvokeScriptTransactionData >(arena);
}
template<> PROTOBUF_NOINLINE ::vrp::UpdateAssetInfoTransactionData* Arena::CreateMaybeMessage< ::vrp::UpdateAssetInfoTransactionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vrp::UpdateAssetInfoTransactionData >(arena);
}
template<> PROTOBUF_NOINLINE ::vrp::InvokeExpressionTransactionData* Arena::CreateMaybeMessage< ::vrp::InvokeExpressionTransactionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vrp::InvokeExpressionTransactionData >(arena);
}
template<> PROTOBUF_NOINLINE ::vrp::PrivatePaymentTransactionData* Arena::CreateMaybeMessage< ::vrp::PrivatePaymentTransactionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vrp::PrivatePaymentTransactionData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
