// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vrp/block.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "vrp/Block.pbobjc.h"
#import "vrp/Transaction.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(Block);
GPBObjCClassDeclaration(Block_Header);
GPBObjCClassDeclaration(MicroBlock);
GPBObjCClassDeclaration(SignedTransaction);

#pragma mark - BlockRoot

@implementation BlockRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - BlockRoot_FileDescriptor

static GPBFileDescriptor *BlockRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"vrp"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Block

@implementation Block

@dynamic hasHeader, header;
@dynamic signature;
@dynamic transactionsArray, transactionsArray_Count;

typedef struct Block__storage_ {
  uint32_t _has_storage_[1];
  Block_Header *header;
  NSData *signature;
  NSMutableArray *transactionsArray;
} Block__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "header",
        .dataTypeSpecific.clazz = GPBObjCClass(Block_Header),
        .number = Block_FieldNumber_Header,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Block__storage_, header),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "signature",
        .dataTypeSpecific.clazz = Nil,
        .number = Block_FieldNumber_Signature,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Block__storage_, signature),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "transactionsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(SignedTransaction),
        .number = Block_FieldNumber_TransactionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Block__storage_, transactionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Block class]
                                     rootClass:[BlockRoot class]
                                          file:BlockRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Block__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Block_Header

@implementation Block_Header

@dynamic chainId;
@dynamic reference;
@dynamic baseTarget;
@dynamic generationSignature;
@dynamic featureVotesArray, featureVotesArray_Count;
@dynamic timestamp;
@dynamic version;
@dynamic generator;
@dynamic rewardVote;
@dynamic rewardBurned;
@dynamic transactionsRoot;

typedef struct Block_Header__storage_ {
  uint32_t _has_storage_[1];
  int32_t chainId;
  int32_t version;
  NSData *reference;
  NSData *generationSignature;
  GPBUInt32Array *featureVotesArray;
  NSData *generator;
  NSData *transactionsRoot;
  int64_t baseTarget;
  int64_t timestamp;
  int64_t rewardVote;
  int64_t rewardBurned;
} Block_Header__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "chainId",
        .dataTypeSpecific.clazz = Nil,
        .number = Block_Header_FieldNumber_ChainId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Block_Header__storage_, chainId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "reference",
        .dataTypeSpecific.clazz = Nil,
        .number = Block_Header_FieldNumber_Reference,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Block_Header__storage_, reference),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "baseTarget",
        .dataTypeSpecific.clazz = Nil,
        .number = Block_Header_FieldNumber_BaseTarget,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Block_Header__storage_, baseTarget),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "generationSignature",
        .dataTypeSpecific.clazz = Nil,
        .number = Block_Header_FieldNumber_GenerationSignature,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Block_Header__storage_, generationSignature),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "featureVotesArray",
        .dataTypeSpecific.clazz = Nil,
        .number = Block_Header_FieldNumber_FeatureVotesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Block_Header__storage_, featureVotesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.clazz = Nil,
        .number = Block_Header_FieldNumber_Timestamp,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Block_Header__storage_, timestamp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "version",
        .dataTypeSpecific.clazz = Nil,
        .number = Block_Header_FieldNumber_Version,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Block_Header__storage_, version),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "generator",
        .dataTypeSpecific.clazz = Nil,
        .number = Block_Header_FieldNumber_Generator,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Block_Header__storage_, generator),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "rewardVote",
        .dataTypeSpecific.clazz = Nil,
        .number = Block_Header_FieldNumber_RewardVote,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(Block_Header__storage_, rewardVote),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "rewardBurned",
        .dataTypeSpecific.clazz = Nil,
        .number = Block_Header_FieldNumber_RewardBurned,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(Block_Header__storage_, rewardBurned),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "transactionsRoot",
        .dataTypeSpecific.clazz = Nil,
        .number = Block_Header_FieldNumber_TransactionsRoot,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(Block_Header__storage_, transactionsRoot),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Block_Header class]
                                     rootClass:[BlockRoot class]
                                          file:BlockRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Block_Header__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Block)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MicroBlock

@implementation MicroBlock

@dynamic version;
@dynamic reference;
@dynamic updatedBlockSignature;
@dynamic senderPublicKey;
@dynamic transactionsArray, transactionsArray_Count;

typedef struct MicroBlock__storage_ {
  uint32_t _has_storage_[1];
  int32_t version;
  NSData *reference;
  NSData *updatedBlockSignature;
  NSData *senderPublicKey;
  NSMutableArray *transactionsArray;
} MicroBlock__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "version",
        .dataTypeSpecific.clazz = Nil,
        .number = MicroBlock_FieldNumber_Version,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MicroBlock__storage_, version),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "reference",
        .dataTypeSpecific.clazz = Nil,
        .number = MicroBlock_FieldNumber_Reference,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MicroBlock__storage_, reference),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "updatedBlockSignature",
        .dataTypeSpecific.clazz = Nil,
        .number = MicroBlock_FieldNumber_UpdatedBlockSignature,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MicroBlock__storage_, updatedBlockSignature),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "senderPublicKey",
        .dataTypeSpecific.clazz = Nil,
        .number = MicroBlock_FieldNumber_SenderPublicKey,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MicroBlock__storage_, senderPublicKey),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "transactionsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(SignedTransaction),
        .number = MicroBlock_FieldNumber_TransactionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MicroBlock__storage_, transactionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MicroBlock class]
                                     rootClass:[BlockRoot class]
                                          file:BlockRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MicroBlock__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SignedMicroBlock

@implementation SignedMicroBlock

@dynamic hasMicroBlock, microBlock;
@dynamic signature;
@dynamic totalBlockId;

typedef struct SignedMicroBlock__storage_ {
  uint32_t _has_storage_[1];
  MicroBlock *microBlock;
  NSData *signature;
  NSData *totalBlockId;
} SignedMicroBlock__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "microBlock",
        .dataTypeSpecific.clazz = GPBObjCClass(MicroBlock),
        .number = SignedMicroBlock_FieldNumber_MicroBlock,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SignedMicroBlock__storage_, microBlock),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "signature",
        .dataTypeSpecific.clazz = Nil,
        .number = SignedMicroBlock_FieldNumber_Signature,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SignedMicroBlock__storage_, signature),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "totalBlockId",
        .dataTypeSpecific.clazz = Nil,
        .number = SignedMicroBlock_FieldNumber_TotalBlockId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SignedMicroBlock__storage_, totalBlockId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SignedMicroBlock class]
                                     rootClass:[BlockRoot class]
                                          file:BlockRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SignedMicroBlock__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
