// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vrp/order.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "vrp/Order.pbobjc.h"
#import "vrp/Amount.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(Amount);
GPBObjCClassDeclaration(AssetPair);

#pragma mark - OrderRoot

@implementation OrderRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - OrderRoot_FileDescriptor

static GPBFileDescriptor *OrderRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"vrp"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - AssetPair

@implementation AssetPair

@dynamic amountAssetId;
@dynamic priceAssetId;

typedef struct AssetPair__storage_ {
  uint32_t _has_storage_[1];
  NSData *amountAssetId;
  NSData *priceAssetId;
} AssetPair__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "amountAssetId",
        .dataTypeSpecific.clazz = Nil,
        .number = AssetPair_FieldNumber_AmountAssetId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AssetPair__storage_, amountAssetId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "priceAssetId",
        .dataTypeSpecific.clazz = Nil,
        .number = AssetPair_FieldNumber_PriceAssetId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AssetPair__storage_, priceAssetId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AssetPair class]
                                     rootClass:[OrderRoot class]
                                          file:OrderRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AssetPair__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Order

@implementation Order

@dynamic senderOneOfCase;
@dynamic chainId;
@dynamic matcherPublicKey;
@dynamic hasAssetPair, assetPair;
@dynamic orderSide;
@dynamic amount;
@dynamic price;
@dynamic timestamp;
@dynamic expiration;
@dynamic hasMatcherFee, matcherFee;
@dynamic version;
@dynamic proofsArray, proofsArray_Count;
@dynamic priceMode;
@dynamic senderPublicKey;
@dynamic eip712Signature;

typedef struct Order__storage_ {
  uint32_t _has_storage_[2];
  Order_Side orderSide;
  int32_t version;
  Order_PriceMode priceMode;
  NSData *senderPublicKey;
  NSData *matcherPublicKey;
  AssetPair *assetPair;
  Amount *matcherFee;
  NSMutableArray *proofsArray;
  NSData *eip712Signature;
  int64_t chainId;
  int64_t amount;
  int64_t price;
  int64_t timestamp;
  int64_t expiration;
} Order__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "chainId",
        .dataTypeSpecific.clazz = Nil,
        .number = Order_FieldNumber_ChainId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Order__storage_, chainId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "senderPublicKey",
        .dataTypeSpecific.clazz = Nil,
        .number = Order_FieldNumber_SenderPublicKey,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Order__storage_, senderPublicKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "matcherPublicKey",
        .dataTypeSpecific.clazz = Nil,
        .number = Order_FieldNumber_MatcherPublicKey,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Order__storage_, matcherPublicKey),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "assetPair",
        .dataTypeSpecific.clazz = GPBObjCClass(AssetPair),
        .number = Order_FieldNumber_AssetPair,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Order__storage_, assetPair),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "orderSide",
        .dataTypeSpecific.enumDescFunc = Order_Side_EnumDescriptor,
        .number = Order_FieldNumber_OrderSide,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Order__storage_, orderSide),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "amount",
        .dataTypeSpecific.clazz = Nil,
        .number = Order_FieldNumber_Amount,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Order__storage_, amount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "price",
        .dataTypeSpecific.clazz = Nil,
        .number = Order_FieldNumber_Price,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Order__storage_, price),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.clazz = Nil,
        .number = Order_FieldNumber_Timestamp,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Order__storage_, timestamp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "expiration",
        .dataTypeSpecific.clazz = Nil,
        .number = Order_FieldNumber_Expiration,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(Order__storage_, expiration),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "matcherFee",
        .dataTypeSpecific.clazz = GPBObjCClass(Amount),
        .number = Order_FieldNumber_MatcherFee,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(Order__storage_, matcherFee),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "version",
        .dataTypeSpecific.clazz = Nil,
        .number = Order_FieldNumber_Version,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(Order__storage_, version),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "proofsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = Order_FieldNumber_ProofsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Order__storage_, proofsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "eip712Signature",
        .dataTypeSpecific.clazz = Nil,
        .number = Order_FieldNumber_Eip712Signature,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Order__storage_, eip712Signature),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "priceMode",
        .dataTypeSpecific.enumDescFunc = Order_PriceMode_EnumDescriptor,
        .number = Order_FieldNumber_PriceMode,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(Order__storage_, priceMode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Order class]
                                     rootClass:[OrderRoot class]
                                          file:OrderRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Order__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "sender",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Order_OrderSide_RawValue(Order *message) {
  GPBDescriptor *descriptor = [Order descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Order_FieldNumber_OrderSide];
  return GPBGetMessageRawEnumField(message, field);
}

void SetOrder_OrderSide_RawValue(Order *message, int32_t value) {
  GPBDescriptor *descriptor = [Order descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Order_FieldNumber_OrderSide];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t Order_PriceMode_RawValue(Order *message) {
  GPBDescriptor *descriptor = [Order descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Order_FieldNumber_PriceMode];
  return GPBGetMessageRawEnumField(message, field);
}

void SetOrder_PriceMode_RawValue(Order *message, int32_t value) {
  GPBDescriptor *descriptor = [Order descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Order_FieldNumber_PriceMode];
  GPBSetMessageRawEnumField(message, field, value);
}

void Order_ClearSenderOneOfCase(Order *message) {
  GPBDescriptor *descriptor = [Order descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - Enum Order_Side

GPBEnumDescriptor *Order_Side_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Buy\000Sell\000";
    static const int32_t values[] = {
        Order_Side_Buy,
        Order_Side_Sell,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Order_Side)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Order_Side_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Order_Side_IsValidValue(int32_t value__) {
  switch (value__) {
    case Order_Side_Buy:
    case Order_Side_Sell:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum Order_PriceMode

GPBEnumDescriptor *Order_PriceMode_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Default\000FixedDecimals\000AssetDecimals\000";
    static const int32_t values[] = {
        Order_PriceMode_Default,
        Order_PriceMode_FixedDecimals,
        Order_PriceMode_AssetDecimals,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Order_PriceMode)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Order_PriceMode_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Order_PriceMode_IsValidValue(int32_t value__) {
  switch (value__) {
    case Order_PriceMode_Default:
    case Order_PriceMode_FixedDecimals:
    case Order_PriceMode_AssetDecimals:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
