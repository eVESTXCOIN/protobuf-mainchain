// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: vrp/block.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Vrp_Block {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var header: Vrp_Block.Header {
    get {return _header ?? Vrp_Block.Header()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  mutating func clearHeader() {self._header = nil}

  var signature: Data = Data()

  var transactions: [Vrp_SignedTransaction] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Header {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var chainID: Int32 = 0

    var reference: Data = Data()

    var baseTarget: Int64 = 0

    var generationSignature: Data = Data()

    var featureVotes: [UInt32] = []

    var timestamp: Int64 = 0

    var version: Int32 = 0

    var generator: Data = Data()

    var rewardVote: Int64 = 0

    var rewardBurned: Int64 = 0

    var transactionsRoot: Data = Data()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}

  fileprivate var _header: Vrp_Block.Header? = nil
}

struct Vrp_MicroBlock {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var version: Int32 = 0

  var reference: Data = Data()

  var updatedBlockSignature: Data = Data()

  var senderPublicKey: Data = Data()

  var transactions: [Vrp_SignedTransaction] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Vrp_SignedMicroBlock {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var microBlock: Vrp_MicroBlock {
    get {return _microBlock ?? Vrp_MicroBlock()}
    set {_microBlock = newValue}
  }
  /// Returns true if `microBlock` has been explicitly set.
  var hasMicroBlock: Bool {return self._microBlock != nil}
  /// Clears the value of `microBlock`. Subsequent reads from it will return its default value.
  mutating func clearMicroBlock() {self._microBlock = nil}

  var signature: Data = Data()

  var totalBlockID: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _microBlock: Vrp_MicroBlock? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Vrp_Block: @unchecked Sendable {}
extension Vrp_Block.Header: @unchecked Sendable {}
extension Vrp_MicroBlock: @unchecked Sendable {}
extension Vrp_SignedMicroBlock: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "vrp"

extension Vrp_Block: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Block"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "signature"),
    3: .same(proto: "transactions"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._header) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.signature) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.transactions) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.signature.isEmpty {
      try visitor.visitSingularBytesField(value: self.signature, fieldNumber: 2)
    }
    if !self.transactions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.transactions, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Vrp_Block, rhs: Vrp_Block) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.signature != rhs.signature {return false}
    if lhs.transactions != rhs.transactions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Vrp_Block.Header: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Vrp_Block.protoMessageName + ".Header"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chain_id"),
    2: .same(proto: "reference"),
    3: .standard(proto: "base_target"),
    4: .standard(proto: "generation_signature"),
    5: .standard(proto: "feature_votes"),
    6: .same(proto: "timestamp"),
    7: .same(proto: "version"),
    8: .same(proto: "generator"),
    9: .standard(proto: "reward_vote"),
    10: .standard(proto: "reward_burned"),
    11: .standard(proto: "transactions_root"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.chainID) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.reference) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.baseTarget) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.generationSignature) }()
      case 5: try { try decoder.decodeRepeatedUInt32Field(value: &self.featureVotes) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.timestamp) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self.version) }()
      case 8: try { try decoder.decodeSingularBytesField(value: &self.generator) }()
      case 9: try { try decoder.decodeSingularInt64Field(value: &self.rewardVote) }()
      case 10: try { try decoder.decodeSingularInt64Field(value: &self.rewardBurned) }()
      case 11: try { try decoder.decodeSingularBytesField(value: &self.transactionsRoot) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.chainID != 0 {
      try visitor.visitSingularInt32Field(value: self.chainID, fieldNumber: 1)
    }
    if !self.reference.isEmpty {
      try visitor.visitSingularBytesField(value: self.reference, fieldNumber: 2)
    }
    if self.baseTarget != 0 {
      try visitor.visitSingularInt64Field(value: self.baseTarget, fieldNumber: 3)
    }
    if !self.generationSignature.isEmpty {
      try visitor.visitSingularBytesField(value: self.generationSignature, fieldNumber: 4)
    }
    if !self.featureVotes.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.featureVotes, fieldNumber: 5)
    }
    if self.timestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.timestamp, fieldNumber: 6)
    }
    if self.version != 0 {
      try visitor.visitSingularInt32Field(value: self.version, fieldNumber: 7)
    }
    if !self.generator.isEmpty {
      try visitor.visitSingularBytesField(value: self.generator, fieldNumber: 8)
    }
    if self.rewardVote != 0 {
      try visitor.visitSingularInt64Field(value: self.rewardVote, fieldNumber: 9)
    }
    if self.rewardBurned != 0 {
      try visitor.visitSingularInt64Field(value: self.rewardBurned, fieldNumber: 10)
    }
    if !self.transactionsRoot.isEmpty {
      try visitor.visitSingularBytesField(value: self.transactionsRoot, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Vrp_Block.Header, rhs: Vrp_Block.Header) -> Bool {
    if lhs.chainID != rhs.chainID {return false}
    if lhs.reference != rhs.reference {return false}
    if lhs.baseTarget != rhs.baseTarget {return false}
    if lhs.generationSignature != rhs.generationSignature {return false}
    if lhs.featureVotes != rhs.featureVotes {return false}
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.version != rhs.version {return false}
    if lhs.generator != rhs.generator {return false}
    if lhs.rewardVote != rhs.rewardVote {return false}
    if lhs.rewardBurned != rhs.rewardBurned {return false}
    if lhs.transactionsRoot != rhs.transactionsRoot {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Vrp_MicroBlock: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MicroBlock"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "reference"),
    3: .standard(proto: "updated_block_signature"),
    4: .standard(proto: "sender_public_key"),
    5: .same(proto: "transactions"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.version) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.reference) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.updatedBlockSignature) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.senderPublicKey) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.transactions) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.version != 0 {
      try visitor.visitSingularInt32Field(value: self.version, fieldNumber: 1)
    }
    if !self.reference.isEmpty {
      try visitor.visitSingularBytesField(value: self.reference, fieldNumber: 2)
    }
    if !self.updatedBlockSignature.isEmpty {
      try visitor.visitSingularBytesField(value: self.updatedBlockSignature, fieldNumber: 3)
    }
    if !self.senderPublicKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.senderPublicKey, fieldNumber: 4)
    }
    if !self.transactions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.transactions, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Vrp_MicroBlock, rhs: Vrp_MicroBlock) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs.reference != rhs.reference {return false}
    if lhs.updatedBlockSignature != rhs.updatedBlockSignature {return false}
    if lhs.senderPublicKey != rhs.senderPublicKey {return false}
    if lhs.transactions != rhs.transactions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Vrp_SignedMicroBlock: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SignedMicroBlock"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "micro_block"),
    2: .same(proto: "signature"),
    3: .standard(proto: "total_block_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._microBlock) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.signature) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.totalBlockID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._microBlock {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.signature.isEmpty {
      try visitor.visitSingularBytesField(value: self.signature, fieldNumber: 2)
    }
    if !self.totalBlockID.isEmpty {
      try visitor.visitSingularBytesField(value: self.totalBlockID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Vrp_SignedMicroBlock, rhs: Vrp_SignedMicroBlock) -> Bool {
    if lhs._microBlock != rhs._microBlock {return false}
    if lhs.signature != rhs.signature {return false}
    if lhs.totalBlockID != rhs.totalBlockID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
